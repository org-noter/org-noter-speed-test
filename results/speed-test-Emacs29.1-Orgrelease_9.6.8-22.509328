
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([while let save-restriction save-excursion save-excursion let if catch let* save-restriction save-excursion org-element-org-data-parser let save-excursion org-element-parse-buffer org-element-contents] 2 [if while let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond let* if while] 4 [org-unescape-code-in-string let* save-excursion let if let org-element-src-block-parser funcall cond cond let cond setq let save-excursion if] 4 [not and if let save-excursion if let* org-element--current-element org-element-copy let* if while let save-excursion org-element--parse-elements cond] 4 [progn if cond let "#<lambda -0x1741e706f6041c56>" funcall catch let let* org-element-map let let cond let progn if] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let cond let] 4 [/= and save-excursion let* save-excursion org-element-headline-parser cond setq let save-excursion if let* org-element--current-element org-element-copy let* if] 4 [plist-put list let let cond let progn if org-element-copy let* if while let save-excursion org-element--parse-elements cond] 4 [if list nconc list let let* save-excursion org-element-headline-parser cond setq let save-excursion if let* org-element--current-element org-element-copy] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let cond let progn if org-element-copy let* if while let] 4 [let cond let progn if org-element-copy let* if while let save-excursion org-element--parse-elements cond let* if while] 3 [if let* save-excursion org-element-section-parser cond setq let save-excursion if let* org-element--current-element org-element-copy let* if while let] 4 [progn if save-excursion org-element--get-time-properties let* save-excursion org-element-headline-parser cond setq let save-excursion if let* org-element--current-element org-element-copy let*] 4 [list list let let save-excursion org-element-property-drawer-parser cond setq let save-excursion if let* org-element--current-element org-element-copy let* if] 4 [let* org-element-map let let cond let progn if org-element-copy let* if while let save-excursion org-element--parse-elements cond] 4 [let* while let progn if save-excursion org-element--get-node-properties let* save-excursion org-element-headline-parser cond setq let save-excursion if let*] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 4 [replace-regexp-in-string org-trim let* save-excursion org-element-headline-parser cond setq let save-excursion if let* org-element--current-element org-element-copy let* if while] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x3959ad08591f394>" funcall let progn if cond] 4 [not or cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 291 [progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage let if or org-back-to-heading let*] 12 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 676 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2595 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 7 [symbolp cond org-element-type let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0x13783316f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 25 [if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let] 3 [cond let cond let "#<lambda 0x13783310bd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 8 [and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 11 [let "#<lambda 0x13783310bd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 40 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 24 [and save-excursion org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 71 [cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction] 121 [let org-noter--doc-file-property let "#<lambda 0x1378337a2d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 24 [or let org-noter--doc-file-property let "#<lambda 0x137833714544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [user-error or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 696 [org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 11 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree] 146 [pdf-cache--image-match pdf-cache-get-image pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 3 [let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 127 [save-current-buffer org-element--cache-active-p and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 8 [let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 36 [image-mode-window-get pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378334e5d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 46 [if org-element-property = and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p] 4 [progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 2 [if if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 80 [org-element-type let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 3 [save-excursion let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 143 [member if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction] 4 [progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 144 [org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 24 [or let org-noter--doc-file-property let "#<lambda 0x1378335ec544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [format setq if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 8 [if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 47 [while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 8 [let* while if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 3 [org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch let save-restriction] 24 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 4 [re-search-backward or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 73 [and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 7 [let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 8 [set-buffer save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion] 4 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 60 [if unwind-protect let* let org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 29 [if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 61 [cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let let*] 4 [cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 42 [if org-element-property and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if] 8 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c36e263>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 6 [org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 90 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 96 [or progn if let org-noter--parse-location-property let "#<lambda 0x101914b17808240e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 2 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x137833ac4544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [org-noter--relative-position-to-view let cond let "#<lambda 0x137833ac4544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [and or progn progn progn let* org-knuth-hash mod if let* save-current-buffer org-element--cache-find progn if if setq] 4 ["#<compiled 0x44512bcfab1d87f>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c371fa3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 6 [progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 83 [and if save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 360 [let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 52 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x137833d3ed44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [or cdr let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 70 [save-excursion let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 124 [if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [not and if if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 2 [and save-excursion org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 42 [let cond let "#<lambda 0x137833d13d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 26 [progn unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 116 [if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 15 [save-current-buffer org-element--cache-active-p and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 8 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x137832414d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 15 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137832414d44ed04>" funcall let progn if cond] 4 [org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 12 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c377f63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 15 [if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if] 20 [or set-buffer save-current-buffer org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion] 22 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137833fd0544ed04>" funcall let progn if cond] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x137833fd0544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 12 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 3 [if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 36 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 40 [save-current-buffer org-element--cache-active-p if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 12 [or set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 11 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13783390e544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13783390e544ed04>" funcall let progn if cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 59 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 32 [or progn if let org-noter--parse-location-property let "#<lambda 0x1378339fcd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 6 [org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 24 [or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 122 [or let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 4 [or set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion] 4 [save-current-buffer org-element--cache-active-p and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 8 ["#<lambda 0x137835f67544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 14 [if progn if org-noter--valid-session if let org-noter--focus-notes-region if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page] 4 [org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while] 4 [let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 65 [not cond org-element-contents mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [cdr let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [org-noter--get-doc-window if let org-noter--doc-approx-location let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while] 3 [mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let let* org-element-map let progn progn if let progn if] 4 [or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 18 [eq and if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [or let progn progn if let org-noter--get-notes-window if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page] 4 [org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 12 [if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch] 70 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x137833bbad44ed04>" funcall] 4 [let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 49 [while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 43 [while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 72 [save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 34 [or set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let] 12 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 11 [if let org-fold-core-get-folding-spec if org-fold-folded-p not or and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading] 4 [unwind-protect save-current-buffer let let progn progn if let org-noter--get-current-view org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler] 6 [save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 48 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378338d0d44ed04>" funcall let progn if cond] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 64 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378339edd44ed04>" funcall let progn if] 4 [save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 8 [let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 25 [symbolp cond org-element-type let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 4 [not and cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall] 4 [let org-noter--parse-location-property let "#<lambda 0x137835ee1544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 67 [let if let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 26 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835ed7544ed04>"] 3 [set-buffer save-current-buffer org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 14 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 818 [null save-excursion let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 123 [and cond org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 7 [unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 61 [cond let cond let "#<lambda 0x137835f98544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 16 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835fb8d44ed04>" funcall let progn] 4 [let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let] 28 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 12 [eq not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835b66544ed04>" funcall] 4 [cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let] 4 [funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x137835b69544ed04>" funcall let] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion] 8 [cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835c4bd44ed04>" funcall let progn if cond] 4 [if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 12 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835c70544ed04>" funcall let progn] 4 [not and if if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 4 [not cond org-get-limited-outline-regexp let* progn save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x137835cddd44ed04>" funcall] 4 [org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 18 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1ac79240e>" funcall let progn if] 8 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835a54544ed04>" funcall let] 4 [let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 12 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835bb1544ed04>" funcall let] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let] 19 [if let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 11 [cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [save-excursion org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 37 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378359ad544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1378359ad544ed04>" funcall let progn] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1378358f6544ed04>" funcall let progn] 4 [let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 82 [save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 17 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 8 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378359e3544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1b7089c0e>" funcall let progn] 17 [save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 22 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378358a4d44ed04>" funcall let progn if] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1b7c64c0e>" funcall let progn if cond let] 11 [or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x137835829d44ed04>" funcall let progn] 4 [let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region] 4 [if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 20 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 20 [cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1b2079c0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 2 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn] 4 [let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion] 33 [save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780dcb2544ed04>"] 4 [org-element-at-point org-element-lineage let if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond let* progn if if] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b287ec0e>" funcall let progn if cond] 15 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 8 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b256dc0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [org-not-nil if let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 4 [not if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading let* progn save-excursion if org-fold-show-children] 8 [or if let org-noter--parse-location-property let "#<lambda 0x101914b1befa8c0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 3 [org-element-type eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 8 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780dc15d44ed04>"] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 7 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ddaad44ed04>"] 4 [and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 4 [window-pixel-edges window-at-side-p mode-line-default-help-echo redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 3 ["#<compiled 0x3267b47f835e5a0>" mapcar pdf-util-scale "#<compiled 0x44512bcfab1d87f>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c5497a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 6 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780deb7d44ed04>" funcall let progn if cond] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility] 4 [org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 12 [if let org-element-lineage let* if let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 4 [save-excursion org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 27 [let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [or set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 13 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780de1a544ed04>" funcall] 4 [cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x13780de1a544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 15 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 12 [and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 10 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c549ce3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 1 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d882d44ed04>" funcall let progn] 4 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let] 8 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780d882d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780d83cd44ed04>" funcall] 4 [org-element--cache-active-p and if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d9d1544ed04>" funcall let] 4 [org-element-contents not cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall] 4 [not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 17 [progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1ac44640e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 7 [and let cond let cond let "#<lambda 0x13780d948544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [catch or org--property-get-separator let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 11 [save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 4 [or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 8 [org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let] 48 [if save-restriction save-excursion org-outline-level funcall let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion] 4 ["#<compiled -0x17ea018380ea6cd7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x16bc84d7d922f63>" tq-process-buffer tq-filter "#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 7 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780db83544ed04>" funcall] 3 [org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 18 ["#<lambda 0x13780dac4d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [and if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1bd7fcc0e>" funcall let progn if] 11 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1bd50bc0e>" funcall let progn if cond let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 4 [null save-excursion let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 101 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 19 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780d9fbd44ed04>"] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780d9fbd44ed04>"] 4 [let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let let* org-element-map] 4 [org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780d995544ed04>" funcall] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1a408c40e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 7 [and if progn if org-noter--valid-session if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ec1e544ed04>" funcall let progn] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101914b1a76bf40e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 6 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 18 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ef12544ed04>" funcall] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ef12544ed04>"] 4 [and if if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 8 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let] 4 [and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 12 [save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 8 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780ee58544ed04>" funcall] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780dd0ad44ed04>"] 4 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 8 [tq-process-buffer tq-filter "#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 3 [derived-mode-p not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 8 [and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1ba116c0e>" funcall let progn if] 4 [let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 38 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ed8bd44ed04>" funcall] 4 [org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 20 [cond let cond let cond let "#<lambda 0x13780ed60d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [save-current-buffer org-element--cache-active-p if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x101914b1bd27c40e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780eb6e544ed04>" funcall let progn] 4 [progn cond org-noter--get-notes-window if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if] 4 [let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 20 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ebcb544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 8 [keymap-canonicalize redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ea71544ed04>" funcall let progn] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ea71544ed04>"] 4 [org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [or or set-buffer save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x13780d802544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101914b1bb30ec0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 6 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e803d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [if save-excursion org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1bb345c0e>" funcall let progn] 4 [let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 11 [save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if let progn progn] 4 [setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let*] 4 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 7 [org-element--cache-active-p and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 11 [or set-buffer save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 11 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e823544ed04>" funcall] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if] 4 [setq if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 12 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e96c544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e96c544ed04>" funcall let progn] 4 [and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 15 [cond let progn if cond let cond let "#<lambda 0x13780ef6a544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ee80544ed04>"] 4 [save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 8 [remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while] 4 [cconv--analyze-function cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv] 4 [let cond let "#<lambda 0x13780ee8dd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1a353f40e>" funcall let progn] 4 [progn cond let cond let cond let "#<lambda 0x13780e61b544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 12 [pdf-info-process-assert-running pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c55e763>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 2 [or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e644544ed04>" funcall let progn] 4 [org-back-to-heading let* progn save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x13780e051d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 14 [save-current-buffer not if progn if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 8 [or progn progn if let org-noter--get-doc-window if let org-noter--doc-approx-location let progn progn if let org-noter-sync-next-page-or-chapter let] 3 [not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 8 [let progn if cond let cond let "#<lambda 0x13780e1f7544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch] 18 [cond let* save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e0b8544ed04>" funcall let progn if cond] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility] 4 [if org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 8 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1a677940e>" funcall let] 4 [if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e15d544ed04>" funcall let] 4 [org-noter--doc-file-property let "#<lambda 0x13780e15d544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e0ead44ed04>" funcall let] 4 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 8 [redisplay--update-region-highlight run-hook-with-args redisplay--pre-redisplay-functions redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 2 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b1a8924c0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e079d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let cond] 4 [if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 4 [if let "#<lambda 0x13780e30f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e30f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [progn condition-case if if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion] 39 [derived-mode-p not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 16 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e350544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [or if let org-noter--parse-location-property let "#<lambda 0x13780e350544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [org-element--cache-active-p if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while let] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e3a5544ed04>" funcall] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let] 7 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780e58e544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [or let org-noter--doc-file-property let "#<lambda 0x101914b1a91ffc0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [or let org-noter--doc-file-property let "#<lambda 0x13780e5c2d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e52b544ed04>" funcall let progn if] 4 [if org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1ab74240e>" funcall] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e574544ed04>"] 4 [not cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 4 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 19 [while let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 8 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780eae2544ed04>" funcall] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let] 3 [progn cond let cond let cond let "#<lambda 0x13780eaaed44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [or goto-char save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780eaaed44ed04>" funcall let progn if] 4 [save-current-buffer org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 14 [set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 8 [cdr let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 12 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ea23d44ed04>" funcall] 4 [throw cond let while let let* save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if] 4 ["#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let let* org-element-map let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e688544ed04>" funcall] 8 [cond let cond let "#<lambda 0x13780e688544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 8 [let* save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage let] 4 [let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 8 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780e116544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e116544ed04>" funcall let progn] 4 [cond org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 4 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c544c63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 6 [not cond org-element-type eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e6c3544ed04>" funcall let progn] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e119544ed04>" funcall let progn] 4 [org-noter--compare-locations and if cond let "#<lambda 0x101914b1af013c0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 7 [if org-element-property < if let progn if cond let cond let "#<lambda 0x13780e7a6d44ed04>" funcall let progn if] 4 [let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage let if or org-back-to-heading let* progn save-excursion] 4 [and cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion] 8 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1afb1dc0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e450d44ed04>" funcall let progn if] 4 [org-element--cache-active-p and if let org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility] 4 [or progn frame-live-p and if progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect] 4 [let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall] 4 [mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let let* org-element-map let progn] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e4d5544ed04>" funcall let] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780f312d44ed04>" funcall] 4 [not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 12 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780f061544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780f061544ed04>"] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 12 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780f312d44ed04>" funcall let progn] 4 [org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 8 [save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 24 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e450d44ed04>" funcall let progn] 4 [progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch] 4 [org-noter--doc-file-property let "#<lambda 0x101914b1afaceba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e47f544ed04>" funcall let progn if] 4 [window-inside-pixel-edges pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [or set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let] 17 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b1af1ae3a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [save-current-buffer org-element--cache-active-p if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e119544ed04>" funcall] 4 [list setq progn cond let cond let cond let "#<lambda 0x13780e119544ed04>" funcall let progn if cond let] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e119544ed04>"] 4 [if save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 3 [and if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function] 8 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e6c3544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e6c3544ed04>"] 4 [if if let* if let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch let] 8 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e116544ed04>" funcall let progn] 4 [progn progn if let org-noter--get-notes-window let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let] 7 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1ae074ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e98d544ed04>"] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e98d544ed04>" funcall] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e98d544ed04>" funcall let progn] 4 [or set-buffer save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction] 12 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b1abf7eba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let] 2 [save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage let if or org-back-to-heading] 12 [cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch let let*] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780eaaed44ed04>" funcall] 4 [and if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 4 [mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 4 [eq not if if if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1a83dc3a6>" funcall let progn if] 20 [not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e574544ed04>" funcall let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e574544ed04>" funcall] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e574544ed04>" funcall let progn if cond] 4 [if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if] 4 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 8 [and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1ab8a4ba6>" funcall let progn if cond] 38 [< if let progn if cond let cond let "#<lambda 0x13780e58e544ed04>" funcall let progn if cond let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e58e544ed04>" funcall let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry let] 4 [org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e3a5544ed04>"] 4 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1a6afbba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 ["#<lambda 0x13780e350544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [timer-set-idle-time run-with-idle-timer vector setq progn if if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 4 [org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 12 [cond let cond let "#<lambda 0x13780e30f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e30f544ed04>" funcall] 4 [cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while] 2 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1a89c0ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond] 4 [memql and if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e3f7d44ed04>" funcall] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780e3f7d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch let] 4 [and cond let cond let cond let "#<lambda 0x13780e0ead44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e15d544ed04>" funcall let progn] 4 [plist-get if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0x13780e15d544ed04>" funcall let] 4 [not cond org-get-limited-outline-regexp concat re-search-forward if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [org-element-contents mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall] 4 [not cond org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 4 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1aa9aeba6>" funcall] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let* progn if org-noter--get-properties-end] 4 [cond let "#<lambda 0x101914b1a5aadba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e051d44ed04>" funcall let progn] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 4 [and cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1a528f3a6>" funcall let progn] 15 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e61b544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x13780e61b544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 40 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [eq or and save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if] 4 [cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [let "#<lambda 0x101914b1acd24ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 ["#<lambda 0x13780ee80544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ee80544ed04>" funcall let progn] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780ee80544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [set-buffer save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 7 [or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e96c544ed04>" funcall let progn] 4 [let org-element-lineage let if let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn] 4 [org-noter--parse-location-property let "#<lambda 0x101914b1b4bb7ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 15 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let] 2 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780d802544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d802544ed04>" funcall let progn] 3 [or set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion] 13 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1b9ccfba6>" funcall let progn if] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ebcb544ed04>" funcall let progn if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ebcb544ed04>" funcall let progn] 4 [setq if progn cond let cond let cond let "#<lambda 0x13780eb6e544ed04>" funcall let progn if cond let] 4 [or or set-buffer save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ed60d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 12 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ed8bd44ed04>" funcall] 4 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780db7c544ed04>" funcall let] 4 [org-element--cache-active-p and if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780dd0ad44ed04>" funcall let progn if] 4 [let org-noter--doc-file-property let "#<lambda 0x13780dd0ad44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780efbd544ed04>"] 4 [or and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ee58544ed04>" funcall let] 4 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn] 7 [and if org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 8 [setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780ef17544ed04>" funcall let progn if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 3 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1a720dba6>" funcall let] 14 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1a720dba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [org-noter--relative-position-to-view let cond let "#<lambda 0x13780ef12544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 4 [if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1a4f9fba6>" funcall let] 6 [let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>"] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x101914b1a4becba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780d995544ed04>"] 4 [not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry] 8 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780d9fbd44ed04>" funcall let progn if cond] 4 [let "#<lambda 0x13780d9fbd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d9fbd44ed04>" funcall let progn] 4 [or and not and if if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion] 12 [let* progn if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if save-excursion] 4 [and not and or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility] 4 [if org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0x13780da49d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 3 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780da49d44ed04>"] 4 [cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b1ac52cba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c54a263>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 4 [let "#<lambda 0x13780d948544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [function setq let let* org-element-map or let* progn if org-noter--get-properties-end if let cond let* progn progn] 8 [if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 16 [symbolp cond org-element-contents mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d8afd44ed04>" funcall] 5 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780d8afd44ed04>" funcall] 4 [mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch] 6 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x16bc84d7d922f63>" tq-process-buffer tq-filter "#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 6 [or progn if let org-noter--parse-location-property let "#<lambda 0x13780debdd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780debdd44ed04>" funcall let progn] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x13780d200d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 5 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1be5bb3a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1be5bb3a6>" funcall let progn] 8 [org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 4 [let cond let "#<lambda 0x13780de1a544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [or let org-noter--doc-file-property let "#<lambda 0x101914b1b2c2fba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let] 7 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780dd49544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [org-element--cache-active-p and if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if] 4 [progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 4 [progn if cond let cond let "#<lambda 0x13780deb7d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [or goto-char save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780deb7d44ed04>" funcall let progn if] 4 [let if let org-before-first-heading-p if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [let catch or org--property-get-separator let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 4 [save-current-buffer not if progn if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b24a83a6>"] 11 [let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch let let* org-element-map] 7 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101914b1b27833a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [symbolp cond org-element-contents mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1ba8de3a6>" funcall let progn if] 4 [org-element-property < if let progn if cond let cond let "#<lambda 0x13780dcb2544ed04>" funcall let progn if cond] 7 [and if let org-noter--parse-location-property let "#<lambda 0x13780dcb2544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780dcb2544ed04>" funcall let progn if cond] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn] 4 [or let org-noter--doc-file-property let "#<lambda 0x101914b1b20593a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map] 3 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let* progn if] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13783579f544ed04>"] 4 [not cond org-element-type let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 7 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378358a4d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1378358a4d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 8 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b5efa3a6>" funcall let progn if] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 1 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1b6a33ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b6a33ba6>" funcall let progn if] 4 [or progn progn progn let* org-knuth-hash mod if let* save-current-buffer org-element--cache-find progn if if setq let] 4 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 8 [not cond org-element-contents mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let] 2 [org-noter--doc-file-property let "#<lambda 0x101914b17f401ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if let progn if org-noter--get-view-info] 2 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x137835c70544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835c70544ed04>" funcall let progn if cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835c4bd44ed04>" funcall] 5 [or let org-noter--doc-file-property let "#<lambda 0x137835b69544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x137835b66544ed04>" funcall let progn if cond let] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b17fe4aba6>" funcall let progn if cond let] 6 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 4 [cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if] 4 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn] 4 ["#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall] 4 [if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction] 4 [and not and or org-back-to-heading let* progn save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835ed7544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 5 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x137835ed7544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if] 4 [org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [cond org-element-contents not cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835ee1544ed04>" funcall let progn if] 3 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1b1338ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835d7b544ed04>" funcall let progn if cond] 5 [condition-case if if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835d7b544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [progn if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 8 [or or set-buffer save-current-buffer org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction] 7 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let*] 4 [mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch let let* org-element-map let let] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes] 2 [> and if let org-noter--parse-location-property let "#<lambda 0x137833b0c544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map] 2 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b17c8baba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b17c8baba6>" funcall let progn if cond let] 4 [and if cond let "#<lambda 0x101914b17fa69ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>"] 2 [or if let org-noter--parse-location-property let "#<lambda 0x101914b17fa69ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if] 2 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x137833bbad44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [set-buffer save-current-buffer org-element--cache-active-p and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 4 [plist-get if org-element-property setq while let org-element-lineage let if let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cond org-element-contents not cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>"] 8 [let org-noter--doc-file-property let "#<lambda 0x101914b17ce7d3a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>"] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b17ce7d3a6>" funcall let progn] 4 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [org-element-contents not cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall] 3 [outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let] 4 [org-noter--compare-locations and if cond let "#<lambda 0x101914b17bababa6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond] 3 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let*] 4 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137833f25544ed04>" funcall let progn if cond] 4 [not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x137832414d44ed04>" funcall] 2 [let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 16 [< if let progn if cond let cond let "#<lambda 0x137833c18d44ed04>" funcall let progn if cond let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137833c18d44ed04>" funcall let progn if] 4 [save-current-buffer org-element--cache-active-p and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility] 4 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let] 4 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1483b13a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b1483b13a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1783fc3a6>" funcall let progn if cond] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137833ac4544ed04>" funcall let] 4 [let cond let "#<lambda 0x137833a9b544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [save-restriction or and if let while let catch or setq cond let* progn progn unwind-protect save-current-buffer] 4 [and if cond let "#<lambda 0x101914b32fca4ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let] 4 [cond let "#<lambda 0x13783325f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [org-noter--doc-file-property let "#<lambda 0x13783325f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [let "#<lambda 0x101914b3209a33a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b3209a33a6>" funcall] 4 [not if progn if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [or set-buffer save-current-buffer org-element--cache-active-p and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 9 [featurep and if save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 4 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b3e051aba6>" funcall let progn if] 4 [if save-excursion let let org-fold-core-get-folding-spec if org-fold-folded-p not or and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold] 4 [org-element--cache-active-p and if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b322b8cba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [let "#<lambda 0x137833681d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn] 4 ["#<lambda 0x101914b32129f3a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b322231ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b325f503a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond] 4 [and if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13783316f544ed04>" funcall let progn if cond] 4 [org-noter--doc-file-property let "#<lambda 0x101914b325bf13a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x129451a3aef9b32e>" funcall let progn if cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x129451a3aef9b32e>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [let progn eval let* org-babel-execute:elisp funcall save-current-buffer let setq progn let* cond let* progn if let*] 2 [Automatic\ GC] 1583)) (25844 7393 409191 994000) nil]
