
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([list list let save-excursion org-element-section-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond] 1 [- 1- if save-restriction save-excursion org-outline-level funcall let org-end-of-subtree save-excursion min let* save-excursion org-element-headline-parser cond let] 4 [let* progn progn let save-excursion org-element-section-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements] 4 [let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let* if] 4 [not cond org-get-limited-outline-regexp let* progn progn let save-excursion org-element-section-parser cond let save-excursion org-element--current-element let* if while] 8 [replace-regexp-in-string replace-regexp-in-string org-trim let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements] 4 [while let progn if save-excursion org-element--get-node-properties let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while] 4 [not cond org-get-limited-outline-regexp let* progn cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond] 4 [goto-char let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond let*] 4 [save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond] 4 [not or cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 332 [car let or progn if let org-noter--parse-location-property let "#<lambda -0x758cd43ee142278>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 477 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2225 [progn unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 59 [null save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 39 [condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 48 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 34 [condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 62 [run-hook-with-args-until-success or progn unwind-protect save-current-buffer let let org-noter--doc-approx-location let progn progn if let org-noter-sync-next-page-or-chapter let while] 2 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871ccc914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 108 [let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 15 [user-error condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 397 [outline-back-to-heading condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 38 [unless eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 4 [let "#<lambda 0xa08704ea114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 7 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 52 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c3693a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 4 [cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let let*] 4 [cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 74 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry let while let cond let*] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871e77114e800>" funcall let progn] 4 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 16 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let progn] 2 [and let cond let org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while save-excursion progn if] 40 [mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch] 4 [progn progn if let org-noter--focus-notes-region if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f31c9c28e>" funcall let progn if] 8 [goto-char condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 4 [org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 12 [save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 22 [- 1- if save-restriction save-excursion org-outline-level funcall let* save-excursion if org-show-children progn if while save-excursion progn] 4 [org-noter--relative-position-to-view let cond let "#<lambda 0xa0871b88114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 6 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 36 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c371223>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 16 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0870502914e800>" funcall let progn] 7 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087060e914e800>" funcall let progn if cond] 7 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter] 2 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 32 [condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 56 [if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let] 4 [while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 8 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 28 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [or cdr let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 80 [while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 132 [if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 33 [let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 45 [or progn if let org-noter--parse-location-property let "#<lambda 0xa08714d8114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 4 [or let org-noter--doc-file-property let "#<lambda 0xa0871b58914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871a86114e800>" funcall let progn] 6 [let cond let "#<lambda 0xa0871a86114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [re-search-backward and let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 8 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871ab5114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [let cond let "#<lambda 0xa0871a4d914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 6 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08716b4914e800>" funcall let progn] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08716ff914e800>" funcall let progn] 4 [symbolp cond org-element-type let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [if org-element-property = or if if let* progn if org-noter--get-properties-end if let cond let* progn progn] 4 [and if progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0xa0871620114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 3 [let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 27 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08713aa914e800>"] 3 [cond org-element-contents not cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>"] 4 [macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [outline-back-to-heading condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 38 [remove-overlays org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 7 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 639 [progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 80 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa08718f6114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [org-element-contents mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall] 4 [let cond let "#<lambda 0xa087180b914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0871865114e800>" funcall let progn if] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871865114e800>" funcall let progn if cond] 4 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37cce3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 16 [org-element-contents not cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall] 4 [pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 7 [derived-mode-p not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 11 [setq if while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [redisplay--update-region-highlight run-hook-with-args redisplay--pre-redisplay-functions redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101163292037e28e>" funcall let progn if cond] 16 [outline-flag-region outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 20 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871fa3914e800>" funcall let] 4 [org-not-nil if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 6 [let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 38 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 4 [org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 4 [save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 18 [org-noter--valid-session if let org-noter--get-doc-window let progn progn if let org-noter--doc-goto-location if let progn progn if let] 7 [cond let org--hide-wrapper-toggle org-hide-drawer-toggle progn if let "#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion let*] 8 [cdr let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f596d328e>" funcall let progn if cond] 3 [or progn if let org-noter--parse-location-property let "#<lambda 0xa087820f114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [macroexp-macroexpand macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let] 3 [unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 25 [or progn if let org-noter--parse-location-property let "#<lambda 0xa08782cc114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall catch let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087709b114e800>" funcall let progn] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087709b114e800>" funcall let progn] 4 [org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 9 ["#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087702a114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08770be914e800>" funcall let progn if cond] 4 [cond org-element-contents mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>"] 4 [let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08771de114e800>" funcall let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 19 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08710f6914e800>" funcall let progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 9 [setq if progn cond let cond let cond let "#<lambda 0xa08713df114e800>" funcall let progn if cond let] 4 [if let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 43 [save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 61 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn] 10 [cond let cond let "#<lambda 0xa087123d914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [buffer-live-p and if progn if org-noter--valid-session cond let* org-noter--parse-root org-element-contents let progn progn if let org-noter-sync-next-page-or-chapter] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871164914e800>" funcall let] 4 [cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer] 4 [timer--activate timer-activate-when-idle run-with-idle-timer vector setq progn if if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 4 [symbolp cond org-element-contents mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let] 3 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 19 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087112f914e800>" funcall let progn if cond] 4 [org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 20 [and or cond let* org-noter--parse-root org-element-contents if let progn progn if let progn if org-noter--get-view-info let] 1 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871290114e800>"] 4 [not cond org-get-limited-outline-regexp let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 20 [while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 29 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871191914e800>" funcall let progn if cond] 3 [cond let "#<lambda 0xa0871191914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632f3dac328e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 6 [let cond let "#<lambda 0xa08715c7114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 3 [let cond let cond let "#<lambda 0xa08715c7114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [save-excursion org-outline-level funcall and let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [and if cond let "#<lambda 0x1011632f3de71a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 9 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871565914e800>" funcall let progn] 7 [cond org-element-type let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall catch let] 4 [let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>"] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877647914e800>" funcall let progn if] 4 [if let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 30 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0877746914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 5 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877746914e800>" funcall let] 4 [not cond org-element-contents mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877746914e800>"] 4 [progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if] 12 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f3a90e28e>" funcall let progn if] 6 [let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 23 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 17 [while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08778f5114e800>"] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f37acea8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc] 4 [org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 16 [not cond org-element-contents mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let] 3 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877b01914e800>" funcall] 4 [eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f3546a28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 7 [save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f3411c28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 6 ["#<lambda 0xa0877442114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [apply pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 1 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08775b6114e800>" funcall let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877525114e800>" funcall let] 4 [run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087751c114e800>" funcall] 4 [outline-back-to-heading condition-case org-back-to-heading progn condition-case if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08769c4914e800>"] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f32cf928e>" funcall let progn if] 5 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa0876911114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0876911114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 ["#<lambda 0x1011632f328a0a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08777e3914e800>"] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa08777da914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [gv-deref cons funcall let* progn if progn if progn cond let cond let "#<lambda 0xa08777da914e800>" funcall let] 4 [org--hide-wrapper-toggle org-hide-drawer-toggle progn if let "#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion let* progn if] 4 [or let org-noter--doc-file-property let "#<lambda 0x1011632fa4a7728e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 4 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 8 [list list let let save-excursion org-element-property-drawer-parser cond let save-excursion org-element--current-element setq if while let let* save-restriction] 4 [if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 4 [progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 22 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877efb914e800>" funcall let progn if] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632fa2551a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 7 [cond let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 4 [cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall catch let let* org-element-map let let progn] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876554914e800>" funcall let progn if cond] 4 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fa208428e>"] 3 [or if let org-noter--parse-location-property let "#<lambda 0xa087656a114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fa07d128e>" funcall let progn] 6 [let cond let "#<lambda 0xa0876521114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa330b28e>" funcall let progn if] 2 ["#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 3 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa08764f7114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [function setq let let* org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn] 4 [or if let org-noter--parse-location-property let "#<lambda 0x1011632fa121c28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0877aa2114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 28 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 4 [pdf-info-process-assert-running pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c55fd23>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877f16114e800>" funcall] 4 [cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 6 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877f85114e800>"] 4 [let cond let "#<lambda 0xa0877f85114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [if let org-noter--parse-location-property let "#<lambda 0x1011632fafcda28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let] 6 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa0877fbc114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 4 [if org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0877924914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877924914e800>" funcall] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877924914e800>" funcall let progn if cond] 4 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 10 [cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if] 4 [org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa087796f914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 ["#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall catch let let* org-element-map let let progn progn if let] 2 [and if cond let "#<lambda 0x1011632fae222a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let] 4 [pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c5583e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 2 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08779d1914e800>" funcall] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08779d1914e800>" funcall let] 4 [or if let org-noter--parse-location-property let "#<lambda 0x1011632fae38b28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632fae38b28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 4 [cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let let* org-element-map let progn progn] 4 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0xa0877d87114e800>" funcall let progn] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x1011632faed5828e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 3 [vector setq if progn cond let cond let cond let "#<lambda 0xa0877e8e114e800>" funcall let progn if cond] 4 [let let save-excursion org-element-property-drawer-parser cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fad53a28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877de4114e800>" funcall let progn if] 4 ["#<compiled -0x17ea0114983b26d7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x9c5db717f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 15 [let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 8 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876e6c914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [and cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall catch] 3 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x9c5db717f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 5 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0xa0876ef2114e800>" funcall let progn] 4 [org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 11 [and if cond let "#<lambda 0x1011632fab8cb28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let] 4 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c55c3a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 2 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fabd33a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 2 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0876ed8914e800>" funcall] 4 [cond let "#<lambda 0xa0876ed8914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [progn or progn get-buffer-window or progn progn if let org-noter--get-doc-window internal--before-with-selected-window let let progn progn if] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0876f5b914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let] 2 [and cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0876c0a114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632facb8128e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 3 ["#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall catch let let* org-element-map let] 4 [symbolp cond org-element-contents not cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let let* org-element-map] 4 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fad91e28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876ca0114e800>" funcall] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876ca0114e800>" funcall let] 4 [if cond let "#<lambda 0x1011632fac2f028e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>"] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632fac2f028e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 4 [or let org-noter--doc-file-property let "#<lambda 0xa08700be114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632face89a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 6 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa087002a914e800>"] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0870014114e800>" funcall] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa08763bc914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [let cond and cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087678b914e800>" funcall] 4 [not cond format let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0876328114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876328114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632f6e42a026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 3 [or let org-noter--doc-file-property let "#<lambda 0x1011632f6e42a026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08763bc914e800>" funcall] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f6f864826>" funcall let progn] 11 [if org-element-property < if let progn if cond let cond let "#<lambda 0xa0870014114e800>" funcall let progn if] 4 [org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fac233026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [cond let "#<lambda 0xa087002a914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087002a914e800>" funcall let progn] 4 [cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let] 2 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08700be114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0870080914e800>" funcall let progn if cond] 12 [org-element-type let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let] 2 [let "#<lambda 0x1011632fada86826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632faf23f026>" funcall let progn if cond] 50 [cond let cond let "#<lambda 0xa0876f81114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [let* progn save-excursion or let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let] 4 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c544c63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0876c0a114e800>" funcall] 4 [or if let org-noter--parse-location-property let "#<lambda 0xa0876c0a114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion progn if] 3 [or let org-noter--doc-file-property let "#<lambda 0x1011632fac852826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let] 7 [consp and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876fac114e800>" funcall let progn if cond] 4 [save-restriction save-excursion org-outline-level funcall 1- let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [not and cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876f35114e800>" funcall let] 4 [cond org-element-contents not cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0876f5b914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fabd41826>" funcall let] 9 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fabd41826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876ed8914e800>"] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if] 4 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0876f6f114e800>" funcall let] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632fabdf7026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0876229114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876ef2114e800>" funcall let progn if cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0876ef2114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 16 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1011632faaf35826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fad553026>" funcall let progn if] 25 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0877de4114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [save-excursion org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fae8eb826>" funcall let progn if] 14 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let] 4 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fae0c1826>" funcall let progn if] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877d87114e800>" funcall let] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877d87114e800>" funcall] 4 [not cond org-get-limited-outline-regexp let* progn if cond let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08779d1914e800>" funcall let progn if] 4 [setq cond let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let] 3 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fafdef826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087796f914e800>" funcall let progn] 4 [outline-back-to-heading condition-case org-back-to-heading-or-point-min org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fafaae026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond] 6 [> and if let org-noter--parse-location-property let "#<lambda 0x1011632fa03cb026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 6 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fa3d19826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [cond let "#<lambda 0xa0877609914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877609914e800>" funcall let progn] 4 [macroexp-macroexpand macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn] 4 [progn or progn let progn progn if let progn if org-noter--get-view-info let progn progn if let] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa156c026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 3 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877aa2114e800>"] 4 [org-flag-region if save-excursion org-flag-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [org-element-property < if let progn if cond let cond let "#<lambda 0xa0876455914e800>" funcall let progn if cond] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087640d114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [or let org-noter--doc-file-property let "#<lambda 0x1011632fa3570026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let] 2 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa3570026>" funcall let progn if cond let] 20 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08764f7114e800>" funcall let progn] 4 [let "#<lambda 0xa08764f7114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [org-not-nil if let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 4 [and let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if] 4 [cond let "#<lambda 0xa087656a114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa349d826>" funcall let progn if cond let] 2 [cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0877e0c114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877e0c114e800>"] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877ecf114e800>" funcall let progn if] 4 [cconv-make-interpreted-closure function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [cond let "#<lambda 0xa0877c38114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [- 1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer] 4 [cond org-element-type let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let] 4 [not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fa4efc826>" funcall let] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08764b3114e800>" funcall let progn if cond] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa08777da914e800>" funcall let progn if] 4 [save-excursion org-entry-end-position cond let* progn if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xa0876911114e800>" funcall let progn if cond let] 4 [let cond let cond let "#<lambda 0xa0876911114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [cond let "#<lambda 0xa08769c4914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry let while let cond let*] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087751c114e800>" funcall] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632f34a2b026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 3 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877525114e800>" funcall let progn if] 4 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08775b6114e800>"] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let*] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn] 2 [if org-element-property < if let progn if cond let cond let "#<lambda 0xa087757f114e800>" funcall let progn if] 4 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 14 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877442114e800>" funcall let progn if] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877543114e800>" funcall let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877354114e800>" funcall let progn] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877354114e800>" funcall let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632f37b48826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 2 [or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f37b48826>" funcall let progn] 4 [org-at-heading-p let* progn cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if let* while] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877b01914e800>" funcall] 4 [plist-put setcar if org-element-put-property if while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877b5e914e800>" funcall let progn] 4 [org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [or if let org-noter--parse-location-property let "#<lambda 0xa0877bca114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch] 4 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 8 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f3a4e8026>" funcall] 3 [or let org-noter--doc-file-property let "#<lambda 0xa0877698114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 6 [goto-char save-restriction or and if let while let catch or setq cond let* progn progn unwind-protect] 4 [pdf-info-query--escape mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 4 [funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>"] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632f39da6026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 2 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0871565914e800>" funcall] 3 [if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let] 7 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa087153a914e800>"] 5 [funcall redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 5 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871191914e800>" funcall let progn] 5 [org-noter--doc-file-property let "#<lambda 0xa0871191914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [cond org-element-contents mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>"] 3 [let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632f3e62f826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871290114e800>" funcall let progn] 1 [and cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to cond let] 4 [timer-set-idle-time run-with-idle-timer vector setq progn if if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871164914e800>" funcall] 5 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871164914e800>" funcall let progn if] 4 [< if let progn if cond let cond let "#<lambda 0xa087123d914e800>" funcall let progn if cond let] 3 [if save-restriction save-excursion org-outline-level funcall 1- let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08712c2914e800>" funcall let] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa08712c2914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info] 1 [let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 7 [org-element-property or let org-noter--doc-file-property let "#<lambda 0xa08713df114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08710f6914e800>" funcall] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1011632f3c1a7826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 6 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [org-entry-end-position cond let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08770be914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa087702a114e800>"] 5 [org-noter--doc-file-property let "#<lambda 0xa08782cc114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632f59303826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa0877278114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [cond let cond let "#<lambda 0xa08772c9114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 6 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08772c9114e800>" funcall let progn if] 4 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0871f9d114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 7 [org-element-type let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let let*] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871730114e800>" funcall] 2 [not cond org-get-limited-outline-regexp let* progn cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion] 4 [if org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101163292f8a2026>" funcall] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101163292e851826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 6 [let "#<lambda 0x101163292e851826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08718f6114e800>"] 3 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08718f6114e800>" funcall let progn if] 4 [cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let progn progn if] 3 [org-noter--parse-location-property let "#<lambda 0x101163292f78a026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [if save-restriction save-excursion org-outline-level funcall and let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08713f5914e800>" funcall let progn] 3 [mode-line-default-help-echo redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 3 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632924d62826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 3 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08713aa914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 7 [mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch] 4 ["#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let let* org-element-map let] 4 [if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1011632922635826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [cond let cond let "#<lambda 0xa08716b4914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08716b4914e800>" funcall] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08716b4914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871a4d914e800>"] 6 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632920a63026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond] 4 [let org-noter--parse-location-property let "#<lambda 0xa0871ab5114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 3 [cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let] 2 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 3 [or progn if let org-noter--parse-location-property let "#<lambda 0x1011632920269826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 6 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map or] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let progn progn] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08714d8114e800>" funcall let progn if cond] 4 [while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 5 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0870764114e800>" funcall let progn if cond] 7 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1011632f32a6b826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08707fd114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f32ec0826>" funcall let progn if] 4 ["#<compiled -0x1c880c9b7ca740df>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x9c5db717f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 4 [outline-back-to-heading condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 8 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f33487026>"] 2 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f33487026>" funcall let progn] 4 [cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let] 7 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08706ab914e800>" funcall let progn] 3 [kill-this-buffer-enabled-p redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes] 3 [cond let cond let "#<lambda 0xa08705a8914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f306c2026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa0871b88114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [and if let org-noter--parse-location-property let "#<lambda 0xa0871b99114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0871e77114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 6 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa08704a1114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 7 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa08704ea114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 6 [cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let let*] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101163292aa2a826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 7 [symbolp cond org-element-contents mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871d09114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 2 [org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101163292b5dc026>" funcall let] 2 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101163292b5dc026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871ccc914e800>"] 4 ["#<compiled 0x9c5c3a20f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c375323>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 2 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda -0xf82b85e28732278>" funcall let progn if] 4 [Automatic\ GC] 1185)) (25844 5196 75244 689000) nil]
