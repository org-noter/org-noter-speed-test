
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([if org-noter--doc-file-property let "#<lambda -0x755e93bb82c6abc>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond] 2 [save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 8 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 684 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2576 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 24 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 26 [setq progn if org-element-lineage let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x8158eebb8de8cd4>" funcall prog1 catch let progn if cond] 5 [goto-char save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 4 [save-current-buffer org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if] 12 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 2 [while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 108 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x811ce4a58de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 6 [and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 108 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree] 87 [save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let] 4 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 59 [org-element-ast-map let* progn if org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn] 2 [org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 24 [cond org-element-type let* and let* org-element-begin = or and not and if if let save-restriction save-excursion] 7 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 8 [let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point] 4 [kill-this-buffer-enabled-p redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 ["#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch let let* progn if] 8 [car if let cond let* and let* org-element-contents-begin let cond let while let let* save-restriction save-excursion] 4 [let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while] 12 [= and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if] 4 [save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 24 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 55 [cond org-element-type let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch let] 4 [while if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form] 20 [mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch let let* progn if org-element-ast-map] 4 [and let* org-element-begin let* while if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811ce2de8de8cd4>"] 7 [integerp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x811ce3438de8cd4>" funcall prog1 catch let progn] 3 [org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 44 [cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch let let*] 4 [org-element-end <= and while let cond let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 9 [and not and or org-back-to-heading if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let*] 4 [cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map let progn progn if] 6 [let "#<lambda 0x811cefa90de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534a10a4bbe>" funcall prog1 catch let progn if cond let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 26 [cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if] 9 [let org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 7 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811ce1788de8cd4>" funcall] 7 [let org-fold-region if save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 19 [org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cd84e8de8cd4>"] 6 [let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 52 [progn if let org-noter--parse-location-property let "#<lambda 0x811cd8070de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 6 [if save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 40 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 20 [funcall let* progn if progn if progn cond let cond let "#<lambda 0x811cd8940de8cd4>" funcall prog1 catch let] 4 [if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if] 4 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 84 [eq if let cond let* and let* org-element-begin < or let if let org-before-first-heading-p if org-back-to-heading-or-point-min] 4 ["#<compiled 0x12b3bf2be5f2863>" tq-process-buffer tq-filter "#<compiled -0x732d3b7cb1ecdbb>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37eee3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 2 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 8 [let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [or set-buffer save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage] 4 [cond let "#<lambda 0x811ce68d0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let] 7 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811ce0dc8de8cd4>" funcall] 7 [not cond org-get-limited-outline-regexp let* progn save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [let cond let "#<lambda 0x811ce0f18de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond] 6 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cea7b0de8cd4>" funcall prog1 catch let progn if cond] 6 [save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 44 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811ceac50de8cd4>" funcall] 3 [org-element-begin let* while if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811ce8370de8cd4>" funcall prog1] 6 [- 1- if save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 50 [let* if let* let* < if let progn if cond let cond let "#<lambda 0x811ce9440de8cd4>" funcall prog1] 3 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811ce8d48de8cd4>" funcall prog1 catch] 6 [if let progn if cond let cond let "#<lambda 0x811ce9960de8cd4>" funcall prog1 catch let progn if cond] 3 [save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 12 [save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if] 16 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cd9fb8de8cd4>" funcall] 6 [save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if] 4 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let] 10 [save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 7 [cond let while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion] 8 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 18 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cf3b50de8cd4>" funcall prog1 catch] 4 [prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let] 4 [save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion] 4 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 28 [> and if let org-noter--parse-location-property let "#<lambda 0x811cf5f20de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 5 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 36 [derived-mode-p if org-noter--doc-file-property let "#<lambda 0x10199535588f1bbe>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 2 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 8 [let cond let "#<lambda 0x811cf4530de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond] 4 [and let* org-element-begin = or and not and if if let save-restriction save-excursion save-excursion let if] 4 [and let* let* < if let progn if cond let cond let "#<lambda 0x811cf4b08de8cd4>" funcall prog1 catch] 5 [cond org-element-type let* and let* let* < if let progn if cond let cond let "#<lambda 0x811cf4cd8de8cd4>"] 5 [mapcar "#<compiled 0x57925fb18f3a5a0>" mapcar pdf-util-scale "#<compiled 0x1b7789821214607f>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c579323>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 5 [if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 23 [or if let org-noter--parse-location-property let "#<lambda 0x1019953545f433be>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 2 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 761 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure] 8 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x8158f3e88de8cd4>" funcall prog1 catch let progn if cond] 4 [let* and let* < if let progn if cond let cond let "#<lambda 0x8158f5020de8cd4>" funcall prog1 catch] 4 [cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv] 7 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 6 [if save-excursion org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 8 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10199535451093be>" funcall prog1 catch] 5 [car eq if let cond let* and let* vector setq if progn cond let cond let] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cf3e78de8cd4>" funcall] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 7 [or progn if let org-noter--parse-location-property let "#<lambda 0x101995355d0c0bbe>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 6 [if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 12 [font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e8887424e6243>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer let if] 4 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0x811cf9128de8cd4>" funcall prog1 catch let progn if cond let] 4 [cond org-element-type eq not if if if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p] 8 [pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c54b723>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 10 [cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 4 [and save-current-buffer org-element--cache-active-p and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion] 8 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534b3c033be>" funcall] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cf9b88de8cd4>" funcall] 4 [symbolp cond org-element-type let* and let* and if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer] 4 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c54b1e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 2 [let* and let* < if let progn if cond let cond let "#<lambda 0x811cf8550de8cd4>" funcall prog1 catch] 4 [pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 12 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811ce5120de8cd4>" funcall prog1] 4 [while let org-element-lineage let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let] 4 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if save-excursion] 4 [or if let org-noter--parse-location-property let "#<lambda 0x10199534b0b7a3be>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 3 [if let* if let* let* < if let progn if cond let cond let "#<lambda 0x811ce5298de8cd4>" funcall] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 4 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x12b25be3e5f2863>" tq-process-buffer tq-filter "#<compiled -0x732d3b7cb1ecdbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 7 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cfef30de8cd4>" funcall prog1 catch] 4 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 8 [boundp and or let org-element--cache-verify-element and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p] 4 [org-noter--parse-location-property let "#<lambda 0x10199534b34733be>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let] 2 [let* vector setq if progn cond let cond let cond let "#<lambda 0x811cfe108de8cd4>" funcall prog1 catch let] 4 [save-current-buffer progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage] 4 ["#<compiled -0x732d3b7cb1ecdbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 6 [let cond let "#<lambda 0x811cfe6d8de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond] 4 [cdr car let* make-org-noter--view-info let progn progn if let progn if org-noter--get-view-info let progn progn if] 4 [if while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10199534b0d153be>" funcall prog1 catch let] 4 [catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [if org-fontify-drawers font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e8d872c032d43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect] 4 [let* < if let progn if cond let cond let "#<lambda 0x811cf8cb8de8cd4>" funcall prog1 catch let progn] 4 [org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199534b6109bbe>" funcall prog1 catch let] 2 [mapconcat pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c54c6e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 2 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 20 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c54de23>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 36 [cond let "#<lambda 0x811cf90e0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let] 4 [if let* if let* and if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cff3b0de8cd4>" funcall] 4 [pdf-info-query pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c543523>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 13 [cond let "#<lambda 0x811cfaa20de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let] 4 [let* org-element-begin let* while if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case] 4 [pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 2 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 17 [if let cond let* and let* vector setq if progn cond let cond let cond let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function] 7 [cond org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534d2959bbe>" funcall prog1] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cfb4a8de8cd4>" funcall] 4 [org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cfbe80de8cd4>" funcall prog1 catch] 4 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn] 4 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10199534d0be03be>" funcall] 2 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cf48c8de8cd4>" funcall prog1 catch] 4 [or if let org-noter--parse-location-property let "#<lambda 0x10199534b4984bbe>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 3 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cc4be0de8cd4>"] 4 [< or let if let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [pdf-info-query--parse-response "#<compiled 0x12b2435ee5f2863>" tq-process-buffer tq-filter "#<compiled -0x732d3b7cb1ecdbb>" accept-process-output pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc78b0de8cd4>" funcall prog1] 4 [and if let org-noter--parse-location-property let "#<lambda 0x811cc4f50de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 16 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199534b4318bbe>" funcall prog1] 2 [cdr car if let cond let* and let* vector setq if progn cond let cond let] 4 [if let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let] 4 [let* vector setq if progn cond let cond let cond let "#<lambda 0x811cc2d38de8cd4>" funcall prog1 catch let] 4 [while catch org-activate-links--text-properties if org-activate-links font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e92c350430443>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let*] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc2048de8cd4>" funcall] 4 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c5462a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 10 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc3c10de8cd4>" funcall prog1] 4 [cond org-element-type let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x811cc3c10de8cd4>"] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 6 [symbolp cond org-element-type let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cc3130de8cd4>" funcall] 4 [function cons vector setq if progn cond let cond let "#<lambda 0x811cc3130de8cd4>" funcall prog1 catch let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn if] 6 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0x811cc3f80de8cd4>" funcall prog1 catch let progn if cond let] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [symbolp cond org-element-type let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch] 4 [let "#<lambda 0x10199534ba4523be>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall] 3 [mapcar "#<compiled 0xac1ba5e82ecc529>" mapcar pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x12b247b1e5f2863>" tq-process-buffer tq-filter "#<compiled -0x732d3b7cb1ecdbb>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c540623>"] 2 [let cond let "#<lambda 0x811cc6118de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond] 4 [let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region] 4 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 12 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811ccb1b0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [and if let org-noter--parse-location-property let "#<lambda 0x10199534b99eabbe>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc8900de8cd4>"] 4 [if let org-element--property org-element-parent if let org-element-lineage let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x10199534bbb063be>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811ccbd58de8cd4>" funcall prog1] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 18 [if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion] 4 [cond org-element-type let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x811cc7240de8cd4>"] 4 ["#<compiled -0x17ea011ec6c82ed7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x12b25be3e5f2863>" tq-process-buffer tq-filter "#<compiled -0x732d3b7cb1ecdbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 17 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc7d10de8cd4>"] 4 [pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c5592e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 3 [cond let cond let "#<lambda 0x811cc8ea8de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 4 [image-display-size cdr let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let] 3 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cc83d8de8cd4>" funcall prog1 catch let progn] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199534d2d08bbe>" funcall prog1 catch] 2 [and progn if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811ccaea0de8cd4>" funcall prog1 catch let progn] 4 [let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch let let* progn] 3 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 4 [org-element-type let* and let* < if let progn if cond let cond let "#<lambda 0x811ccabf0de8cd4>" funcall prog1] 4 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion] 4 [if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cca7c0de8cd4>" funcall prog1 catch let progn] 4 [save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let] 8 [org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [keymap-canonicalize redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [setq if progn cond let cond let cond let "#<lambda 0x811cdf1e0de8cd4>" funcall prog1 catch let progn if] 4 [while catch let org-do-emphasis-faces font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156f2540d8d86c43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn] 4 [org-noter--relative-position-to-view let cond let "#<lambda 0x811cdf528de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 4 [if let cond let* and let* let* < if let progn if cond let cond let] 4 [or if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c558e63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 8 [vector setq if progn cond let cond let cond let "#<lambda 0x811cdfeb0de8cd4>" funcall prog1 catch let progn] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cdfeb0de8cd4>"] 4 [cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let] 8 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 8 [eq cond org-noter--relative-position-to-view let cond let "#<lambda 0x811cc1d20de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cc1d20de8cd4>" funcall prog1 catch] 4 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let*] 16 [font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156f240c086daa43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer let] 4 [pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 7 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc1ce8de8cd4>" funcall prog1] 4 [or and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [cond org-element-type let* and let* let* < if let progn if cond let cond let "#<lambda 0x811cc1b38de8cd4>"] 4 [if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children] 8 [org-noter--parse-location-property let "#<lambda 0x811cc1140de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let] 4 [if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 8 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cc1e10de8cd4>" funcall] 4 ["#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall] 2 [pdf-cache--data-get pdf-cache-number-of-pages pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 7 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cd2b30de8cd4>" funcall prog1] 4 [org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 4 [cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cd20d0de8cd4>" funcall prog1 catch] 4 [save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while] 4 [org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199534fe73d3be>" funcall prog1] 2 [save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry progn if while] 4 [mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 13 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cde5c8de8cd4>" funcall] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x811cde5c8de8cd4>" funcall prog1 catch let progn if cond] 4 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cde790de8cd4>" funcall prog1] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc5e28de8cd4>" funcall prog1] 4 [let* vector setq if progn cond let cond let cond let "#<lambda 0x811cc5e28de8cd4>" funcall prog1 catch let] 4 [while let dotimes let while let dotimes let measure-time setq let progn eval let* org-babel-execute:elisp funcall] 3 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x811cc5450de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811d41238de8cd4>" funcall prog1 catch let progn if cond] 4 [progn or progn frame-live-p and if progn if org-noter--valid-session if let org-noter--get-doc-window if let org-noter--doc-approx-location let] 2 [< if let progn if cond let cond let "#<lambda 0x811cc5450de8cd4>" funcall prog1 catch let progn if] 3 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc5450de8cd4>" funcall] 4 [cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>" funcall catch let let*] 7 [if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x811cde5c8de8cd4>" funcall prog1 catch let progn if] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cdeef0de8cd4>" funcall] 4 [let cond let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x811cdeef0de8cd4>"] 4 [or if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>" funcall catch] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cdef68de8cd4>" funcall prog1] 4 [progn cond let cond let cond let "#<lambda 0x811cdef68de8cd4>" funcall prog1 catch let progn if cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x811cd20d0de8cd4>" funcall prog1 catch let progn if cond] 7 [let* setq cond save-excursion let let org-fold-core-get-folding-spec if org-fold-folded-p not or and save-excursion org-at-heading-p or progn] 4 [let org-noter--parse-location-property let "#<lambda 0x10199534fd26cc16>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond] 3 [and if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cd2580de8cd4>" funcall prog1 catch let progn if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cd2b30de8cd4>" funcall prog1 catch] 4 [let cond let* and let* org-element-begin = or and not and if if let save-restriction save-excursion] 4 [intern org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534fb0db416>" funcall prog1 catch let progn if cond let] 5 [if let* if let* vector setq if progn cond let cond let cond let "#<lambda 0x811cd2e60de8cd4>" funcall] 4 [mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>" funcall catch let let* progn if org-element-ast-map] 3 [not cond org-element-contents mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let] 6 [org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children] 4 [vector setq if progn cond let cond let cond let "#<lambda 0x811cc1140de8cd4>" funcall prog1 catch let progn] 4 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let cond let*] 4 [let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>" funcall catch let let* progn] 2 [car if let cond let* and let* vector setq if progn cond let cond let cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 10 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc1ce8de8cd4>" funcall prog1 catch] 4 [setq while let org-element-lineage let if let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [pdf-util-pdf-window-p pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 6 [< if let progn if cond let cond let "#<lambda 0x811cc1d20de8cd4>" funcall prog1 catch let progn if] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cdfa00de8cd4>" funcall] 4 [memq not and if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info] 6 [let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x811cdfeb0de8cd4>" funcall prog1] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10199534f38f3416>" funcall prog1 catch let] 15 [and let* let* < if let progn if cond let cond let "#<lambda 0x811cdf528de8cd4>" funcall prog1 catch] 4 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cdf1e0de8cd4>" funcall prog1 catch let progn if cond] 4 [cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map let progn progn] 3 [eq cond org-noter--relative-position-to-view let cond let "#<lambda 0x811cca290de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534d2805416>" funcall prog1 catch let progn if cond] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cca7c0de8cd4>" funcall] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 12 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811ccabf0de8cd4>"] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x811ccaea0de8cd4>" funcall prog1 catch let progn if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811ccaea0de8cd4>" funcall prog1 catch] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc83d8de8cd4>" funcall prog1 catch] 4 [cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>" funcall catch let] 3 [let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x811cc9278de8cd4>" funcall prog1] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn] 2 [cond let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x811cc8ea8de8cd4>" funcall] 4 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 4 [cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let] 2 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10199534bb3e8c16>" funcall] 5 [cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let] 11 [if cond org-noter--compare-locations and if cond let "#<lambda 0x10199534bbdd7416>" funcall prog1 catch let progn if cond let] 2 [cond org-element-contents mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>"] 2 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading let* progn] 4 [catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>"] 2 [or if let org-noter--parse-location-property let "#<lambda 0x811cc6118de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [let* and let* < if let progn if cond let cond let "#<lambda 0x811cc64c0de8cd4>" funcall prog1 catch] 4 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map] 6 [catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while] 4 [not cond org-element-type let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc3130de8cd4>" funcall] 4 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 8 [or if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch] 4 [let "#<lambda 0x10199534b8316416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>"] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc3c10de8cd4>"] 4 [setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cc2048de8cd4>" funcall prog1 catch let] 4 [save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 8 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 8 [let* < if let progn if cond let cond let "#<lambda 0x811cc2b20de8cd4>" funcall prog1 catch let progn] 7 [goto-char save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if let progn] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc4f50de8cd4>" funcall] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x10199534b4109416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>"] 2 [progn cond org-noter--compare-locations and if cond let "#<lambda 0x10199534b55fc416>" funcall prog1 catch let progn if cond let] 2 [let cond let* and let* let* < if let progn if cond let cond let "#<lambda 0x811cc4be0de8cd4>"] 4 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let* save-excursion] 4 [cons progn if org-noter-pdf--approx-location-cons car vector progn if org-noter-pdf--get-current-view run-hook-with-args-until-success or progn unwind-protect save-current-buffer let let] 7 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534d15cd416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>"] 6 ["#<lambda 0x811cf73b8de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534d1416c16>" funcall] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cfbe80de8cd4>" funcall] 3 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree] 8 [or progn if let org-noter--parse-location-property let "#<lambda 0x811cfb4a8de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn] 4 [mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>" funcall catch] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cfa310de8cd4>" funcall prog1 catch] 4 [funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>" funcall catch let let* progn if org-element-ast-map let*] 3 [let* and let* < if let progn if cond let cond let "#<lambda 0x811cf6040de8cd4>" funcall prog1 catch] 3 [org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 7 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10199534b68f7416>" funcall prog1 catch let progn] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cfaa20de8cd4>" funcall prog1] 4 [let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [display-graphic-p if unless eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 4 [progn let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks] 4 [cond let* and let* < if let progn if cond let cond let "#<lambda 0x811cf90e0de8cd4>" funcall prog1] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 4 [let cond let "#<lambda 0x811cf8cb8de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond] 4 [org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 8 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x10199534b1418416>" funcall prog1 catch let progn if cond] 3 [if let org-noter--parse-location-property let "#<lambda 0x811cf8b68de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 4 [org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 6 [cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect] 4 [and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199534b2defc16>" funcall prog1 catch] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cfef30de8cd4>"] 4 [integerp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x10199534b3bcac16>" funcall prog1 catch let progn] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534b2da6416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>"] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811ce5d40de8cd4>" funcall] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811ce5120de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 6 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map or] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 8 [- 1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer] 13 [save-excursion org-outline-level funcall let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [memq and progn or progn frame-live-p and if progn if org-noter--valid-session if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page] 1 [cond let cond let "#<lambda 0x811cf9b88de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 4 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10199534d3e64416>" funcall prog1 catch] 17 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cf9128de8cd4>" funcall prog1] 2 [let* and and let* let let org-element--property org-element-parent setq while catch let org-element-lineage-map if or org-back-to-heading] 4 [let "#<lambda 0x8158f2618de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x8158f2ec8de8cd4>" funcall] 3 [or if let org-element--cache-verify-element and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if] 4 [macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [not cond org-get-limited-outline-regexp let* progn save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch] 3 [run-with-idle-timer vector setq progn if if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 4 [let* and let* < if let progn if cond let cond let "#<lambda 0x811cf22a8de8cd4>" funcall prog1 catch] 4 [if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>" funcall catch let] 2 [eq cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 4 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1019953546e70c16>" funcall prog1 catch let progn if] 2 [setq progn progn if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [let* let* < if let progn if cond let cond let "#<lambda 0x8158f3038de8cd4>" funcall prog1 catch let] 2 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function] 6 [progn if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [eq if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x1019953545219c16>" funcall prog1 catch let progn if] 6 [progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 4 ["#<lambda 0x1019953547921416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc] 6 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cf64f0de8cd4>" funcall] 6 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x811cf64f0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children cond let* progn if] 4 [or if unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 4 [pdf-info-query--parse-response "#<compiled 0x12b3bf2be5f2863>" tq-process-buffer tq-filter "#<compiled -0x732d3b7cb1ecdbb>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c348723>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 2 [and or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 5 [if let* and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cf4060de8cd4>" funcall] 7 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [let "#<lambda 0x811cf5f20de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [let "#<lambda 0x10199535441f8416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>"] 2 [create-image apply pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 2 [if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn] 4 [if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cf3400de8cd4>" funcall prog1 catch let progn] 9 [org-noter--parse-location-property let "#<lambda 0x101995355fbec416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let] 2 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cd95c0de8cd4>" funcall prog1 catch] 7 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x811cd9fb8de8cd4>" funcall prog1 catch let progn if cond] 3 [function org-element-lineage-map if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility] 4 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree if save-excursion if progn progn] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811ce8d48de8cd4>" funcall] 10 [let* and let* and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 1 [save-excursion save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cea7b0de8cd4>" funcall] 5 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811ce0f18de8cd4>" funcall prog1 catch] 3 [and if save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion] 4 [if let org-element--property progn if let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [progn if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 4 [and let* let* < if let progn if cond let cond let "#<lambda 0x811ce6d80de8cd4>" funcall prog1 catch] 4 [let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page] 3 [org-before-first-heading-p if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [let org-element--cache-verify-element and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children cond] 4 [eq cond org-noter--relative-position-to-view let cond let "#<lambda 0x811cd8698de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 8 [vector setq if progn cond let cond let cond let "#<lambda 0x811cd8940de8cd4>" funcall prog1 catch let progn] 3 [let* if let* org-element-end let while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cd84e8de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 6 [prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 4 [cond let cond let "#<lambda 0x811ce7150de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 9 [org-noter--compare-locations and if cond let "#<lambda 0x10199534a7f34c16>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811ce1788de8cd4>" funcall prog1] 3 [run-hook-with-args-until-success cond org-noter--relative-position-to-view let cond let "#<lambda 0x811ce19e0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 8 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199535410f6416>" funcall prog1 catch let] 9 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101995355a185416>" funcall prog1 catch let progn if cond let] 6 [if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811ceffc0de8cd4>" funcall prog1 catch let progn if cond] 3 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if] 4 [derived-mode-p if org-noter--doc-file-property let "#<lambda 0x1019953556707416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811ce2748de8cd4>" funcall prog1] 3 [cond let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x811ce3438de8cd4>" funcall] 3 [> and if let org-noter--parse-location-property let "#<lambda 0x811cee9b0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 9 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199535562e3416>" funcall prog1 catch let progn] 2 [mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch] 3 [let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x1019953554fce416>" funcall prog1 catch let] 6 ["#<lambda 0x811ce30f0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811ce35a0de8cd4>" funcall] 3 [cl-intersection or let* progn if org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let] 2 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while] 4 [progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if] 4 [or if let org-noter--parse-location-property let "#<lambda 0x1019953558346416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc] 2 [cond org-element-type let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 3 [or progn if let org-noter--parse-location-property let "#<lambda 0x10199535556bb416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>"] 2 [let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x1295cf7ea7ab48be>" funcall prog1 catch let progn if] 7 [Automatic\ GC] 1083)) (25847 64120 917301 266000) nil]
