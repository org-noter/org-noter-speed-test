
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([save-excursion not if let org-element-src-block-parser funcall cond cond let cond let save-excursion org-element--current-element let* if while] 2 [and let cond let org-end-of-subtree save-excursion min let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if] 8 [save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let* if while] 4 [if org-element--next-mode setq let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements] 8 [and cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let* if while let] 4 [cond let org-end-of-subtree save-excursion min let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let] 4 [org-reduced-level prog1 let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond] 4 [cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion] 4 [user-error condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 502 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa72653aa9e18d84>" funcall let progn if cond] 4 [cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch let] 6 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 527 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2224 [not or cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 221 [while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 108 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc00c147df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 7 [or let progn progn if let org-noter--get-notes-window if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page] 8 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c374663>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 12 ["#<lambda 0xabc010757df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 2 [condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 30 [let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 18 [while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 30 [condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 68 [or cdr let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 109 [if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if let] 4 [let* org-noter--doc-get-page-slice let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 4 [eq cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc010d8fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 3 [outline-flag-region outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 12 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 31 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xabc010d7fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 3 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc010d7fdf5314>" funcall let progn if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 3 [save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 16 [let cond let cond let "#<lambda 0xabc0162bfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let] 2 [let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 21 [not cond format let* save-excursion if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 204 [not cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch] 4 [outline-back-to-heading condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 16 [and let cond let org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while save-excursion progn if] 32 [redisplay--update-region-highlight run-hook-with-args redisplay--pre-redisplay-functions redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 3 [cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 67 [or if let org-noter--parse-location-property let "#<lambda 0xabc0145c7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [let* progn save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0135b7df5314>" funcall let] 3 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc013797df5314>"] 4 [if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond] 2 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc013b2fdf5314>" funcall let] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc013b2fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [function overlay-put let progn if org-flag-region let* if let* cond let org--hide-wrapper-toggle org-hide-drawer-toggle progn if let] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc01231fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 6 [let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 34 ["#<lambda 0x1018d6b089c1a18e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let] 2 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc01984fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 104 [condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 46 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map or let* progn] 4 [pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 6 [progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 66 [or if let org-noter--parse-location-property let "#<lambda 0xabc01be5fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 44 [org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 10 [let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 29 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc01ccafdf5314>" funcall let progn if cond] 6 [cond org-element-type let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let* progn if org-noter--get-properties-end if let cond let* progn] 4 [and if let org-noter--parse-location-property let "#<lambda 0xabc01c627df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 7 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc01c627df5314>" funcall let progn if cond] 4 [save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 28 [null save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 56 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc01df07df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 6 [cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch let let*] 4 [mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall catch let let* org-element-map let let] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc01ca6fdf5314>" funcall let progn if cond] 4 [if while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch let let* org-element-map] 2 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 40 [pdf-view-sorted-hotspot-functions pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 6 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if let progn if] 6 [if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 24 [if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 8 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn] 6 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc0487afdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [let progn if cond let cond let "#<lambda 0xabc0485f7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 7 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc01a3cfdf5314>"] 7 [org-element-contents let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while let dotimes let] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc01a2dfdf5314>" funcall] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc01a2dfdf5314>" funcall let progn if cond] 6 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc01912fdf5314>" funcall let progn if] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc018fa7df5314>" funcall] 7 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6bc94e7e18e>" funcall let progn if cond] 10 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc049a9fdf5314>" funcall let progn if cond] 4 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 8 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 16 [symbolp cond org-element-type let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [let while let dotimes let while let dotimes let measure-time setq let progn eval let* org-babel-execute:elisp] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc04cd67df5314>" funcall let progn] 4 [not cond org-get-limited-outline-regexp let* progn cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion] 8 [symbolp cond org-element-type let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall catch] 2 [and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 8 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc04b97fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc04d937df5314>"] 4 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 29 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc04f00fdf5314>" funcall let progn if] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc04f00fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 33 [save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 40 [cond org-element-type let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall catch let] 6 [cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 37 [save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 59 [and if let org-noter--parse-location-property let "#<lambda 0x1018d6b3952e798e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond] 2 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc04f207df5314>" funcall let progn] 5 [not cond org-element-type let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [and if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 9 [outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let] 4 [outline-back-to-heading condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 25 [cons vector setq if progn cond let cond let cond let "#<lambda 0xabc04c867df5314>" funcall let progn if] 5 [org-element-contents not cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall] 4 [let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 3 [let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc040077df5314>" funcall let progn if cond] 4 [eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [or let org-noter--doc-file-property let "#<lambda 0xabc0419a7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 4 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 27 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc02d957df5314>"] 2 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc02d957df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 21 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1018d6b38900b18e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc02ca5fdf5314>" funcall let] 9 [let org-noter--parse-location-property let "#<lambda 0xabc02f90fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 5 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc02f90fdf5314>"] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0230afdf5314>" funcall let progn if cond] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b38989d98e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 4 [progn unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 40 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc023a27df5314>" funcall] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 55 [save-restriction save-excursion org-outline-level funcall 1- let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 11 [org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 7 [apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 1 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc022f67df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [and cond let cond let cond let "#<lambda 0xabc022f67df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 14 [and let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 8 [progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b38718498e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 5 [list list let let save-excursion org-element-property-drawer-parser cond let save-excursion org-element--current-element setq if while let let* save-restriction] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b387dc398e>"] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc021e47df5314>" funcall let progn] 7 [function setq let let* org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes] 2 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let] 6 [cond let cond let cond let "#<lambda 0xabc022a1fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b38a80a18e>" funcall let] 7 [let cond let "#<lambda 0xabc0264bfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 3 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0264bfdf5314>" funcall let progn if] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b3828ce18e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>"] 6 [org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 32 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b38212918e>" funcall let progn] 12 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0217ffdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0203afdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [remove-overlays org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 8 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc020f9fdf5314>" funcall] 5 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let] 11 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0259d7df5314>" funcall let progn if cond] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc02636fdf5314>" funcall let progn if] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc02636fdf5314>" funcall let progn if cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b385f1b98e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc026947df5314>" funcall let progn if cond] 4 [org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0fbb7698e>" funcall let] 2 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1fc0ccee5ccc9b23>" tq-process-buffer tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 7 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc026a77df5314>" funcall let] 4 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403c64fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 7 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403c64fdf5314>"] 4 [cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall catch let] 3 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403d7bfdf5314>" funcall] 5 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 6 [or cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 9 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403dc5fdf5314>"] 4 [let cond let "#<lambda 0xaa403d2c7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 6 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b0fd75e98e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond] 7 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403e69fdf5314>" funcall let] 6 [let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0fcfa518e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 3 [list let let save-excursion org-element-property-drawer-parser cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion] 4 [setq while let dotimes let while let dotimes let measure-time setq let progn eval let* org-babel-execute:elisp] 2 [outline-back-to-heading condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 40 [or let org-noter--doc-file-property let "#<lambda 0xaa403c58fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 3 [not cond org-get-limited-outline-regexp let* progn save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c541c63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 3 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0c915598e>" funcall let progn if] 11 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c55e763>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 6 [if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch let] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xaa403a5efdf5314>" funcall] 4 [if save-restriction save-excursion org-outline-level funcall let* save-excursion if org-show-children cond let* progn if if org-show-set-visibility save-excursion] 4 [cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let] 4 [window-inside-pixel-edges pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 8 [if progn cond let cond let cond let "#<lambda 0xaa40389ffdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 3 [cond org-element-type let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch let] 4 [vector setq if progn cond let cond let cond let "#<lambda 0xaa40389ffdf5314>" funcall let progn if cond] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0c9fd418e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond] 6 [progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xaa403919fdf5314>" funcall let progn if cond] 4 [symbolp cond org-element-type let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 2 [or if let org-noter--parse-location-property let "#<lambda 0x1018d6b0f8a5998e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond] 3 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0xaa4039c67df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 7 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f88f618e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond] 6 [cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall catch let let*] 3 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403f32fdf5314>" funcall let] 4 [not cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall catch] 3 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 8 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f023218e>" funcall let progn if cond] 6 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f114098e>" funcall let progn if cond let] 2 [pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 1 [or progn progn if let org-noter--get-doc-window internal--before-with-selected-window let let progn progn if let org-noter--get-current-view org-noter--get-view-info let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa4036557df5314>" funcall let progn if cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4037dbfdf5314>"] 4 [eq cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0f1da018e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>"] 7 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa40372efdf5314>" funcall let] 4 ["#<compiled -0x17ea0192248904d7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1fc0ccee5ccc9b23>" tq-process-buffer tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4036d0fdf5314>" funcall let] 4 [save-excursion let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xaa4030d17df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4030d17df5314>" funcall let] 4 [let dotimes let while let dotimes let measure-time setq let progn eval let* org-babel-execute:elisp funcall let] 2 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f3b2b98e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>"] 4 [pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c55c563>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 2 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa4036cc7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0xaa4036cc7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [progn if let org-noter--parse-location-property let "#<lambda 0xaa4036cc7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [org-element-contents mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall] 6 [run-hook-with-args-until-success cond org-noter--relative-position-to-view let cond let "#<lambda 0xaa40304afdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 10 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f798518e>" funcall let progn if] 2 [org-noter--doc-file-property let "#<lambda 0xaa403163fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403163fdf5314>" funcall let] 4 [not and cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall] 4 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403026fdf5314>" funcall] 4 [funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>"] 5 [cond org-element-contents mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>"] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4033c97df5314>"] 4 [cond let "#<lambda 0x1018d6b0f123918e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 3 [let cond let "#<lambda 0xaa4032b7fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 4 [unless eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4032377df5314>"] 4 [let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 8 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b0bad8718e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond] 7 [org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4031e1fdf5314>" funcall] 4 [function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while let] 2 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c5539a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 9 [pdf-view-image-size pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4034f5fdf5314>" funcall let progn] 4 [cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403afc7df5314>"] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0bb13e326>" funcall let progn if] 28 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0bb13e326>" funcall let progn if] 12 [< if let progn if cond let cond let "#<lambda 0xaa4034f5fdf5314>" funcall let progn if cond let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4034f5fdf5314>" funcall let] 4 [org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 8 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b0ba8f7b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 4 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 17 [let cond and cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xaa4032377df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 16 [if org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f13a3b26>" funcall let] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4032b7fdf5314>" funcall let progn] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f1ac4326>" funcall let progn if cond] 49 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure] 2 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa4031ddfdf5314>" funcall let progn if] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xaa4031ddfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0f0d62326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403026fdf5314>" funcall] 4 [cond let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let*] 4 [vector setq if progn cond let cond let cond let "#<lambda 0xaa403163fdf5314>" funcall let progn if cond] 3 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f6002b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 3 [org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f6269b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 2 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xaa403089fdf5314>" funcall] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0f326cb26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [setq if progn cond let cond let cond let "#<lambda 0xaa40304afdf5314>" funcall let progn if cond let] 4 [if let org-noter--parse-location-property let "#<lambda 0x1018d6b0f3d33b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xaa4036cc7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [let cond let "#<lambda 0xaa4036cc7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 4 [let cond let "#<lambda 0xaa4030d17df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 4 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f3647326>" funcall let progn if cond let] 8 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0xaa4036d0fdf5314>" funcall let progn] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let "#<lambda 0xaa4036d0fdf5314>" funcall] 4 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f1f7a326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 2 [let org-noter--parse-location-property let "#<lambda 0x1018d6b0f1f7a326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa40372efdf5314>" funcall let progn] 4 [let org-noter--doc-file-property let "#<lambda 0xaa40372efdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f1780b26>" funcall let progn] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa4037dbfdf5314>" funcall let progn if cond] 4 [derived-mode-p not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 8 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403eb1fdf5314>" funcall let progn if cond] 4 [save-excursion let* progn org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f92b4b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403f32fdf5314>"] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f88aeb26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 7 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let let* org-element-map let let progn] 2 ["#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall] 6 [window-pixel-edges window-at-side-p mode-line-default-help-echo redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 3 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f7530b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 3 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0xaa4038e07df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 ["#<lambda 0x1018d6b0f781d326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa40383d7df5314>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa40383d7df5314>" funcall let progn if cond] 4 [or setq cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f722b326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4039dafdf5314>" funcall let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 6 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0c9a83b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa40389ffdf5314>" funcall let progn] 4 [not and cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall] 4 [let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while let dotimes let measure-time] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403a5efdf5314>" funcall let progn] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403a5efdf5314>" funcall let progn if] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0xaa403a5efdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [save-restriction save-excursion org-outline-level funcall let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0240a7df5314>" funcall let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403c02fdf5314>" funcall let] 4 [not cond org-element-contents not cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc02506fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 3 [not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc02443fdf5314>" funcall let] 4 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry if] 4 [if save-excursion org-flag-region save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [let "#<lambda 0x1018d6b0fc7e1b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond] 7 [org-at-heading-p let* progn cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to] 4 [cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while] 3 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0fd706326>" funcall let progn if cond let] 8 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403e8f7df5314>" funcall let progn if cond] 4 [cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let] 4 [org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 4 [org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0fc404326>" funcall let progn] 2 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403dc5fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 ["#<lambda 0xaa403dc5fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0fdd10b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 2 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0fdd10b26>" funcall] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403d7bfdf5314>"] 4 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c54e223>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 7 [progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0fb621b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc026a77df5314>" funcall] 4 [org-noter--compare-locations and if cond let "#<lambda 0x1018d6b385edcb26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 3 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc02636fdf5314>" funcall] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc02636fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 2 [not cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch] 4 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0259d7df5314>"] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b3831dab26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 3 [unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 8 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b382356326>" funcall let] 11 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0203afdf5314>" funcall let] 4 [or let org-noter--doc-file-property let "#<lambda 0xabc0203afdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b382623b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 6 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc02120fdf5314>"] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b381975b26>" funcall let progn] 7 [mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch let let* org-element-map let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 5 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc02074fdf5314>" funcall let progn if cond] 4 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b3826f1b26>" funcall let progn if] 3 [and if cond let "#<lambda 0x1018d6b387c04b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let] 6 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc021e47df5314>"] 4 [goto-char save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc027097df5314>" funcall let progn if cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b387f0f326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 2 [let cond let "#<lambda 0xabc022f67df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 4 [let "#<lambda 0x1018d6b38b30a326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond] 3 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0236b7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond] 6 [not cond org-get-limited-outline-regexp let* progn cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if] 4 [cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let let*] 2 [let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>"] 4 [cond org-element-contents if let progn progn if let progn if org-noter--get-view-info let progn progn if let] 3 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xabc02ce37df5314>" funcall let progn if cond let] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc02c587df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 3 [let cond let "#<lambda 0xabc02d957df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 3 [function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [symbolp cond org-element-type let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc0419a7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [progn if if let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect save-current-buffer let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b3945b6326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 3 [org-element-contents mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall] 4 [if let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc04c867df5314>" funcall let progn if cond] 4 [or if let org-noter--parse-location-property let "#<lambda 0x1018d6b395670b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc04f207df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc04ffd7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 6 [mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let let* org-element-map let let] 4 [cond org-element-contents mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>"] 3 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b38e8fe326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [progn if let org-noter--parse-location-property let "#<lambda 0xabc04e3f7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 3 [cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let] 3 [or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b38d33f326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc04d937df5314>" funcall let] 4 [mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch] 5 [if let "#<lambda 0xabc04b97fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [or let org-noter--doc-file-property let "#<lambda 0x1018d6bc8d390326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let] 3 [let org-noter--parse-location-property let "#<lambda 0x1018d6bc8da88326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>"] 3 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6bc9460cb26>" funcall let progn if cond let] 6 [progn or progn setq and or cond let* org-noter--parse-root org-element-contents if let progn progn if let] 5 [save-excursion org-flag-heading let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6bc94cf3b26>" funcall] 4 [if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map or let* progn if org-noter--get-properties-end] 4 [org-noter--doc-file-property let "#<lambda 0xabc018fa7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 5 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0xabc01912fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc019547df5314>" funcall let progn if cond] 7 [progn org-before-first-heading-p if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 2 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b080c77b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [cond let cond let "#<lambda 0xabc0485f7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0497c7df5314>" funcall] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0497c7df5314>" funcall let] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b081c5eb26>" funcall let progn if cond] 6 [let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [let "#<lambda 0x1018d6b081a0f326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b380be5b26>" funcall let progn if] 2 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b380be5b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 4 [org-element-contents if let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler] 1 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc01daa7df5314>" funcall let progn if] 4 [progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b08f119b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 6 ["#<compiled 0x86d01ac0c4fe>" format-decode insert-file-contents-literally pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1fc0ccee5ccc9b23>" tq-process-buffer tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page] 3 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b089171326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [cond let "#<lambda 0xabc01d5dfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>"] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc01df07df5314>"] 2 ["#<compiled 0x1fc0ccee5ccc9b23>" tq-process-buffer tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc01d2d7df5314>" funcall let progn if cond] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xabc01c627df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b08e76e326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 2 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc01ccafdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 3 [let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let let* org-element-map] 4 [plist-get if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1018d6b08ea16b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc01c517df5314>" funcall let progn] 5 ["#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let let* org-element-map let] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc01ba37df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b088b20326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc01984fdf5314>" funcall let] 1 [let org-noter--parse-location-property let "#<lambda 0x1018d6b385834b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>"] 2 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b385834b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 4 [org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 12 [cond let "#<lambda 0xabc013797df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 3 [progn frame-live-p and if progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer] 3 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1018d6b383eaa326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 7 [let org-noter--parse-location-property let "#<lambda 0xabc0157f7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 4 [and if let org-noter--parse-location-property let "#<lambda 0x1018d6b384a30326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0xabc017d5fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 6 [if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b385d5a326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function] 2 [or let org-noter--doc-file-property let "#<lambda 0xabc016defdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map or] 4 [cond org-element-contents not cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let let* org-element-map] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc01f8a7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1018d6b083869326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 7 ["#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c36f723>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 3 [cond org-element-contents not cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>"] 4 [cond let org--hide-wrapper-toggle org-hide-drawer-toggle progn if let "#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion let*] 4 [let progn progn if let org-noter--get-notes-window let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes] 2 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc01f7dfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let* progn if org-noter--get-properties-end] 4 [org-element-contents not cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let let* org-element-map let] 2 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c3693a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b085767b26>" funcall let progn] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc01fc3fdf5314>" funcall let progn if cond] 6 [while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [cond org-element-type let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0112e7df5314>" funcall let progn if] 2 [or let org-noter--doc-file-property let "#<lambda 0xabc0112e7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b380769326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 2 [let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let "#<lambda 0xabc0104efdf5314>" funcall let progn if] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0104efdf5314>" funcall let progn if cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc010757df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0xabc00c147df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 ["#<compiled -0x1b9eeb06f2354d81>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c3755e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 2 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc00c07fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 2 [org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1297d76b920e83ae>" funcall let progn] 4 [cond let org-noter--note-after-tipping-point and setq cond let cond let "#<lambda -0xc3d17edeb3b727c>" funcall let progn if cond let] 2 [org-element-property or let org-noter--doc-file-property let "#<lambda -0xc3d17edeb3b727c>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [let progn eval let* org-babel-execute:elisp funcall let setq if let* cond let* progn if let* org-babel-execute-src-block] 6 [Automatic\ GC] 948)) (25844 4209 628283 448000) nil]
