
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([if org-element-property let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond] 4 [while let progn if save-excursion org-element--get-node-properties let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while] 8 [let* progn progn let save-excursion org-element-section-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements] 4 [org-trim let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let*] 8 [save-excursion min let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond] 4 [save-excursion org-element-section-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let* if while] 4 [re-search-forward if let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond] 4 [let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond let* if] 4 [user-error condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 388 [funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>"] 4 [org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 120 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 39 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2200 [condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 40 [let cond let "#<lambda 0xabc00c07fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 4 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 500 [progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 59 [outline-back-to-heading condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 24 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc010757df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 6 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 48 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if let progn if org-noter--get-view-info] 2 [cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 44 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 4 [org-noter--doc-file-property let "#<lambda 0xabc0112e7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 7 [cond let cond let "#<lambda 0xabc0112e7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 4 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 40 [image-mode-window-get pdf-view-current-page number-to-string eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 3 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion] 4 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc01fc3fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 3 [save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 25 [if let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect save-current-buffer let if let] 4 [org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 6 [if let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 10 [let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 28 [save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 20 [or cdr let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 87 [let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 28 [condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 92 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc01f8a7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 6 [org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 18 [save-restriction save-excursion org-outline-level funcall let* save-excursion if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [progn cond let cond let cond let "#<lambda 0xabc016defdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 7 [or if let org-noter--parse-location-property let "#<lambda 0xabc016defdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 64 [let "#<lambda 0xabc015c17df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [not or cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 266 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc0145c7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0xabc0157f7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc0157f7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc0135b7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 28 [while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map] 2 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc013b2fdf5314>" funcall let progn if] 4 [not cond org-get-limited-outline-regexp let* progn cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc01231fdf5314>" funcall] 6 [cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [cond let* if let* cond let org--hide-wrapper-toggle org-hide-drawer-toggle progn if let "#<lambda 0x13e3eb0>" funcall if let* if] 4 [if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch let] 3 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 9 [and if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [if let org-noter--get-notes-window if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if] 4 [condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 29 [outline-back-to-heading condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 29 [let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 34 [and cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch] 6 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc01beffdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [let cond let cond let "#<lambda 0xabc01ccafdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch let let*] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter] 2 [if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 45 [org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc01d2d7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [let cond let cond let "#<lambda 0xabc01d2d7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc01df07df5314>" funcall let progn] 3 [unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 22 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c370ba3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 14 [org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 12 [org-end-of-subtree save-excursion let* save-excursion if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let] 2 ["#<lambda 0xabc01eb77df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b381fb598e>" funcall let] 10 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 56 [let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 12 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc01875fdf5314>" funcall] 4 [progn unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 51 [cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 32 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0497c7df5314>" funcall] 4 [if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall catch let] 3 [let progn if cond let cond let "#<lambda 0xabc0487afdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 69 [cond org-element-contents not cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>"] 6 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc01a3cfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc01a2dfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0xabc01a2dfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>"] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc019547df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc01912fdf5314>" funcall] 4 [null save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 29 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let] 10 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc04a05fdf5314>" funcall let progn] 3 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1018d6bc94e7e18e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 7 [or progn if let org-noter--parse-location-property let "#<lambda 0xabc049a9fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 12 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 27 [mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall catch] 3 [list setq progn cond let cond let cond let "#<lambda 0xabc04cacfdf5314>" funcall let progn if cond let] 4 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 24 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc04c03fdf5314>" funcall let progn if] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0xabc04c03fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 53 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc04cd67df5314>" funcall let progn if cond] 4 [and cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to cond let] 8 [if let "#<lambda 0xabc04b97fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let] 3 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc04d937df5314>"] 4 [let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 8 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc04f1c7df5314>" funcall let progn if cond] 7 [outline-back-to-heading condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 57 [and let cond let org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while save-excursion progn if] 16 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn] 6 [cdr let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 8 [org-noter--doc-file-property let "#<lambda 0x1018d6b395b5598e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 2 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc04f527df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [cond let cond let "#<lambda 0xabc04f527df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 4 [pdf-view-image-size pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch let let* org-element-map let progn] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc04f8dfdf5314>" funcall let] 4 [and let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 20 ["#<lambda 0x1018d6b39471998e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let] 7 [cond let cond let "#<lambda 0xabc04c867df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 1 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc04c867df5314>" funcall let progn if cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b39418e18e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>"] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc04028fdf5314>" funcall let] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b3944fe98e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>"] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc040077df5314>" funcall] 3 [org-element-contents mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall] 4 [or let org-noter--doc-file-property let "#<lambda 0x1018d6b38e18d98e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let] 6 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if] 4 [outline-flag-region outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 16 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc02d957df5314>" funcall let] 5 [let "#<lambda 0xabc02c587df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 6 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc02ca5fdf5314>"] 8 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b38f90e18e>" funcall let progn if] 10 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc02f90fdf5314>" funcall let] 2 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b38fa4c18e>" funcall let progn if] 20 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc0230afdf5314>" funcall] 4 ["#<lambda 0xabc0230afdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 4 [let let* org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while] 3 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc023a27df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map save-excursion] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc02223fdf5314>" funcall let progn if] 3 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq] 8 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 12 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b38718498e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond] 2 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1fc0ccee5ccc9b23>" tq-process-buffer tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 12 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc027097df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [progn let progn progn if let org-noter--get-notes-window let progn progn if let org-noter--focus-notes-region if let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 1 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc022a1fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [1- if save-restriction save-excursion org-outline-level funcall let org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while] 4 [and if cond let "#<lambda 0x1018d6b38a80a18e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let] 3 [condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc02074fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0264bfdf5314>" funcall let progn if cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b38212918e>" funcall let progn if cond] 27 [org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks] 3 [cond let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>"] 4 [if save-restriction save-excursion org-outline-level funcall max format setq if while let* save-excursion if org-show-children progn if] 4 [org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 18 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc020f9fdf5314>" funcall let progn if] 3 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc020f9fdf5314>" funcall] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b38392898e>" funcall let progn if cond let] 9 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 5 [or let org-noter--doc-file-property let "#<lambda 0xabc02636fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc02636fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc026947df5314>" funcall] 2 [org-flag-region save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc026a77df5314>" funcall] 4 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0xabc026a77df5314>" funcall let progn] 4 [save-excursion org-outline-level funcall let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [org-not-nil if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 2 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let] 4 [pdf-cache-get-image pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 4 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 402 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0xaa403d7bfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403d7bfdf5314>" funcall let] 4 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403dc5fdf5314>" funcall let] 4 [let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall catch let let* org-element-map] 2 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0xaa403d30fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [or let org-noter--doc-file-property let "#<lambda 0xaa403e8f7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 4 [let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 16 [progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 12 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0248d7df5314>" funcall let] 8 [progn cond let cond let cond let "#<lambda 0xabc0248d7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [let catch let* org-element-map let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect save-current-buffer] 4 [goto-char save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc02443fdf5314>" funcall let progn if cond] 4 ["#<lambda 0xabc02506fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403c58fdf5314>" funcall let progn if cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403c58fdf5314>" funcall let] 4 [memq and progn or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter-sync-next-page-or-chapter let while] 2 [let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 4 [org-noter--parse-root org-element-contents if let progn progn if let progn if org-noter--get-view-info let progn progn if let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 4 [org-flag-region save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer] 4 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 12 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403ade7df5314>" funcall let progn] 4 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0c93c918e>" funcall let progn if cond let] 2 [remove-overlays org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 12 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 11 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xaa403919fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map or let* progn if org-noter--get-properties-end if let cond let*] 4 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0f871f98e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>"] 7 [or progn progn if let org-noter--get-doc-window internal--before-with-selected-window let let progn progn if let org-noter--get-current-view org-noter--get-view-info let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4038e07df5314>" funcall] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4039c67df5314>"] 4 [let cond let "#<lambda 0xaa4039c67df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 4 [let cond let while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let] 4 [- image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403f67fdf5314>" funcall] 4 [eq cond org-noter--relative-position-to-view let cond let "#<lambda 0xaa403f67fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [kill-this-buffer-enabled-p redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 3 [or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f8ecc18e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let] 7 [progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f0bdf18e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 3 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4036557df5314>" funcall] 4 [save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 12 [org-noter--doc-file-property let "#<lambda 0x1018d6b0f14bd18e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 7 [cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch let] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0f1da018e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>"] 2 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4036d0fdf5314>"] 4 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f195c98e>" funcall let progn if cond] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4030d17df5314>" funcall let] 4 [let org-noter--doc-file-property let "#<lambda 0xaa4036cc7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa40304afdf5314>"] 4 [cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xaa40304afdf5314>" funcall let progn if cond let] 4 [cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let] 3 [1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [if let "#<lambda 0x1018d6b0f61c218e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 6 ["#<compiled 0x485722330cc65a0>" mapcar pdf-util-scale "#<compiled -0x1b9eeb06f2354d81>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c544c63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 2 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403163fdf5314>" funcall let] 4 [cons funcall let* progn if cond let cond let cond let "#<lambda 0xaa403163fdf5314>" funcall let progn if] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0f608818e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>"] 2 [or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0f1dbb18e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond] 7 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4033c97df5314>" funcall let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa4032b7fdf5314>" funcall let progn if] 4 [image-mode-window-get pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 2 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa4032377df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [make-org-noter--view-info let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa4031e1fdf5314>" funcall let progn if cond] 4 ["#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if] 4 [eq cond let progn if cond let cond let "#<lambda 0xaa403b857df5314>" funcall let progn if cond let] 4 [let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn] 4 [eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 8 [not cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1018d6b0ffb9398e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 2 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0ffb9398e>" funcall let progn] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let] 4 [save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let] 4 [symbolp cond org-element-type let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch] 2 [or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0bb13e326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [vector setq if progn cond let cond let cond let "#<lambda 0xaa4034f5fdf5314>" funcall let progn if cond] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa4034f5fdf5314>" funcall let progn if] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403b857df5314>" funcall let] 4 [let "#<lambda 0x1018d6b0ba8f7b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond] 7 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xaa4031e1fdf5314>" funcall] 4 [and cond let cond let cond let "#<lambda 0xaa4031e1fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f121e326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc] 3 [cond let cond let cond let "#<lambda 0xaa4032377df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4032377df5314>" funcall let] 4 [org-noter--doc-file-property let "#<lambda 0xaa4032b7fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if let*] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f1ac4326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 6 [mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let let* org-element-map let let] 7 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa4031ddfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 3 [progn cond let cond let cond let "#<lambda 0xaa4031ddfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0f0d62326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 2 [if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xaa403026fdf5314>" funcall] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f0607b26>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403163fdf5314>" funcall let progn if cond] 3 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f6002b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond let] 4 [not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa4031ccfdf5314>" funcall let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4031ccfdf5314>" funcall let] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f6269b26>" funcall let progn if] 20 [org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0xaa403089fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch] 2 [cond org-element-type let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond] 2 [if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 6 [let cond let "#<lambda 0xaa40304afdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f3d33b26>" funcall let progn if cond] 39 [mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch] 4 [cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4036cc7df5314>" funcall let progn if] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4030d17df5314>" funcall] 4 [run-hook-with-args-until-success or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0f3647326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc] 3 [if progn cond let cond let cond let "#<lambda 0xaa4036d0fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [cconv-fv cconv-make-interpreted-closure function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa40372efdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa4037dbfdf5314>" funcall let progn if cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4037dbfdf5314>"] 4 [let progn if cond let cond let "#<lambda 0xaa4036557df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403a04fdf5314>" funcall let progn] 4 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f02fe326>" funcall let progn if cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403eb1fdf5314>" funcall let progn] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403f32fdf5314>" funcall] 4 [if let progn if cond let cond let "#<lambda 0xaa403f67fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [numberp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xaa403f67fdf5314>" funcall let progn if cond] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f88aeb26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 2 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403f68fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [consp and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f8abdb26>"] 10 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f8abdb26>" funcall let progn if cond let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4039c67df5314>" funcall let progn] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [goto-char save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f722b326>" funcall let progn if cond] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403919fdf5314>" funcall] 4 [and if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0c9a83b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 2 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0c87e6b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403ade7df5314>" funcall let progn if] 4 [cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let] 4 [org-noter--compare-locations and cond let cond let cond let "#<lambda 0xaa403a5efdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xaa403a5efdf5314>"] 4 [cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403aabfdf5314>" funcall let progn if cond] 4 ["#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0fc0b9b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 7 [if let "#<lambda 0xaa403c02fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403c02fdf5314>" funcall let progn if cond] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xaa403c58fdf5314>" funcall] 4 [vector setq if progn cond let cond let cond let "#<lambda 0xaa403c58fdf5314>" funcall let progn if cond] 4 [let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc02506fdf5314>" funcall let progn] 4 [org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 3 [and cond let cond let cond let "#<lambda 0xabc02443fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0c8da2b26>" funcall let progn if] 13 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403e69fdf5314>" funcall let progn if] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b0fd706326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 6 [setq if progn cond let cond let cond let "#<lambda 0xaa403e8f7df5314>" funcall let progn if cond let] 4 [cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let] 2 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403d2c7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0fc404326>" funcall let progn] 9 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403d30fdf5314>"] 4 [let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let let* org-element-map] 4 [while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403d7bfdf5314>" funcall let progn if cond] 4 [org-noter--parse-location-property let "#<lambda 0xaa403d7bfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 12 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0fb621b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 3 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc026a77df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b385edcb26>" funcall let progn if cond let] 14 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc026947df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc02636fdf5314>" funcall let progn] 4 [and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0259d7df5314>" funcall let progn] 4 [let cond let "#<lambda 0xabc020f9fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 4 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0xabc020f9fdf5314>" funcall let progn] 4 [window-edges window-inside-pixel-edges pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 3 [if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc02120fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1018d6b381975b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b38a880b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 2 [org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 6 [if org-element-property < if let progn if cond let cond let "#<lambda 0xabc02074fdf5314>" funcall let progn if] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc02074fdf5314>" funcall let progn if] 4 [cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc022a1fdf5314>" funcall] 4 [let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b387c04b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 3 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc021e47df5314>" funcall let progn if cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc027097df5314>" funcall] 4 [cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction] 4 [if save-excursion org-flag-region save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [let "#<lambda 0xabc0236b7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [not cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch] 3 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xabc02223fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [or let org-noter--doc-file-property let "#<lambda 0xabc02223fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b38b5e8326>" funcall let progn if cond] 11 [progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch] 7 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0230afdf5314>" funcall let] 4 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc02f90fdf5314>"] 5 [and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b3890a6b26>" funcall let progn if] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc02ca5fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 2 [cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let let* org-element-map let let progn progn] 2 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b38eef0b26>" funcall let progn] 4 [org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let let*] 2 [pdf-info--normalize-file-or-buffer pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 4 [symbolp cond org-element-contents mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 2 ["#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch let let* org-element-map let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc02d957df5314>" funcall let progn] 3 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc02d957df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 4 [if while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall] 4 [if cond let "#<lambda 0x1018d6b3945b6326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>"] 7 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc040077df5314>" funcall] 6 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 10 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xabc04028fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 3 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b3959dfb26>" funcall let progn if] 7 [progn if org-noter--valid-session if let org-noter--get-doc-window select-window let progn progn if let org-noter-sync-prev-page-or-chapter let while let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc04ffd7df5314>" funcall let] 1 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc04ffd7df5314>" funcall let progn if cond] 4 [cconv-make-interpreted-closure function overlay-put let progn if org-flag-region let* if let* cond let org--hide-wrapper-toggle org-hide-drawer-toggle progn if] 4 [if cond let cond let "#<lambda 0xabc04f527df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 3 [pdf-view-sorted-hotspot-functions pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 3 ["#<compiled -0x1c8d763f03fb12df>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1fc0ccee5ccc9b23>" tq-process-buffer tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc04f00fdf5314>"] 4 [setq if while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [or let org-noter--doc-file-property let "#<lambda 0xabc04d937df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 4 [cconv-make-interpreted-closure function setq let let* org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let] 2 [cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6bc8d390326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if] 4 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 2 [and if let org-noter--parse-location-property let "#<lambda 0xabc04d4b7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc04c03fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6bc8da88326>" funcall] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc04cacfdf5314>" funcall let progn] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc04cacfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 8 [org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 3 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc049a9fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [cond org-element-type let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let] 2 [cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6bc9460cb26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [cond let cond let cond let "#<lambda 0xabc04af0fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 3 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc04af0fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 3 [progn cond let cond let cond let "#<lambda 0xabc04a05fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6bc95150b26>" funcall let progn if] 7 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0498efdf5314>" funcall let progn] 5 [cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry let while let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 3 [let cond let "#<lambda 0xabc01912fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 4 [frames-on-display-list "#<subr F616e6f6e796d6f75732d6c616d626461_anonymous_lambda_2>" internal--before-save-selected-window pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc0485f7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc0487afdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 7 [save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0493ffdf5314>" funcall] 6 [list setq progn cond let cond let cond let "#<lambda 0xabc01875fdf5314>" funcall let progn if cond let] 2 [org-noter--doc-file-property let "#<lambda 0xabc01875fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if let progn if org-noter--get-view-info let progn] 3 [let "#<lambda 0xabc0280bfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc01daa7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 5 [progn frame-live-p and if progn if org-noter--valid-session if let org-noter--get-doc-window let progn progn if let org-noter--doc-goto-location] 4 [cond let cond let "#<lambda 0xabc01eb77df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 2 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xabc01eb77df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c370ba3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 1 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc01ca6fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b08b287b26>" funcall let] 3 [outline-back-to-heading condition-case org-back-to-heading save-excursion org-flag-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if let] 4 [org-not-nil if let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc01c627df5314>"] 2 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b08e76e326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 4 [let org-noter--parse-location-property let "#<lambda 0xabc01beffdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc01c517df5314>" funcall let progn] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc01c517df5314>" funcall let progn if cond let] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b08e1bdb26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 ["#<compiled -0x17ea019b8af882d7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1fc0ccee5ccc9b23>" tq-process-buffer tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 1 [cond let cond let cond let "#<lambda 0xabc01be5fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [tq-process-buffer tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37e5a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if] 3 [condition-case org-back-to-heading-or-point-min save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [let "#<lambda 0x1018d6b088b20326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond] 6 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc01984fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc013b2fdf5314>" funcall let progn if cond] 7 [let org-noter--doc-file-property let "#<lambda 0x1018d6b38313bb26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>"] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc013797df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c3779a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 4 [cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0157f7df5314>" funcall] 3 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map or let*] 4 ["#<lambda 0xabc0145c7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 3 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b082434326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond let] 2 [org-noter--doc-file-property let "#<lambda 0xabc015c17df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 6 [list let let save-excursion org-element-property-drawer-parser cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc016defdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b384e5fb26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 6 [let* progn save-excursion if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [cond org-element-contents not cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>"] 3 [if progn if org-noter--valid-session cond let* org-noter--parse-root org-element-contents if let progn progn if let progn if] 3 [let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 3 [if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 5 [numberp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xabc01e86fdf5314>" funcall let progn if cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc01e86fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [or let org-noter--doc-file-property let "#<lambda 0x1018d6b085767b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc012827df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [cond let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 2 [plist-get if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1018d6b380769326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 6 [org-noter--compare-locations and if cond let "#<lambda 0x1018d6b3803cd326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 3 [org-noter--compare-locations and if cond let "#<lambda 0x1018d6b3812e2b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc00c147df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 7 [save-restriction save-excursion org-outline-level funcall let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [kill-buffer "#<compiled -0x1c8d77baabd23adf>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1fc0ccee5ccc9b23>" tq-process-buffer tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page] 3 [org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1297d76b920e83ae>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 6 [if org-element-property or let org-noter--doc-file-property let "#<lambda -0xc3d17edeb3b727c>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [Automatic\ GC] 977)) (25844 4179 463533 987000) nil]
