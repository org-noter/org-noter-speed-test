
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if] 1 [if save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 40 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 656 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2363 [cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let] 4 [not cond org-get-limited-outline-regexp let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 3 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 10 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree] 109 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 7 [and not and or org-back-to-heading if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if] 4 [or if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>" funcall catch] 4 [save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 16 [save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 2 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 1343 [let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>"] 3 [org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 52 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 10 [if org-noter--doc-file-property let "#<lambda 0xa5d2d00038d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond] 4 [org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 8 [progn if org-noter--valid-session if let org-noter--doc-goto-location if let progn progn if let org-noter-sync-next-page-or-chapter let while let] 3 [unwind-protect save-current-buffer let let progn progn if let org-noter--get-current-view org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler] 4 [let org-fold-region if save-excursion org-fold-heading let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion] 4 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 44 [or and save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let] 4 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 4 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 60 [and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 112 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x8c40d2decc1f063>" tq-process-buffer tq-filter "#<compiled -0x72a5679944255fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 20 [if progn if or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property] 4 [save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 28 [let org-cite-processor-has-capability-p and or let* org-cite-activate font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ebc0c135e1b43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond] 4 [or if let org-noter--parse-location-property let "#<lambda 0xa5d1b6b838d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc] 4 [or let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 8 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form] 13 [save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 12 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [and save-excursion org-at-heading-p and or org-back-to-heading let* progn save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0xa5d1a879b8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>"] 4 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 27 [save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if] 16 [while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 84 [mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>" funcall catch] 4 [if let cond let* and let* org-element-end goto-char if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn] 8 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c376a23>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 14 [org-element-type let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let] 4 [progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 28 [cond let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>"] 2 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [if let* if let* org-element-begin goto-char progn if let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 34 [if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x1010a335e00ed0ba>" funcall prog1 catch let progn] 8 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [pdf-info--normalize-file-or-buffer pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c372563>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1a99138d00e8>" funcall prog1 catch] 4 [let org-element--property org-element-parent setq while catch let org-element-lineage-map if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if] 4 [progn if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 8 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 21 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d1abb438d00e8>" funcall prog1 catch let progn if cond let] 4 [mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 9 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 12 [progn if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x1010a335e24690ba>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>"] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1988fb8d00e8>" funcall prog1] 4 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children cond let*] 4 [while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 16 [let org-noter--parse-location-property let "#<lambda 0xa5d1987ab8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond] 4 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion] 8 [let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 52 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 16 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 11 [let* org-element-end or let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion] 4 [function setq let let* progn if org-element-ast-map let* progn if org-element-map or let* progn if org-noter--get-properties-end] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map] 11 [car eq if let cond let* and let* and if let* save-current-buffer org-element--cache-find progn if if] 4 [org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children] 4 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 32 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 8 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 12 [cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map save-excursion org-noter--show-note-entry let] 4 ["#<compiled -0x72a5679944255fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 5 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 27 ["#<compiled -0x17ea01a5f16e5ed7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x8c40d2decc1f063>" tq-process-buffer tq-filter "#<compiled -0x72a5679944255fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 27 [let* vector setq if progn cond let cond let cond let "#<lambda 0xa5d1a16eb8d00e8>" funcall prog1 catch let] 4 [and or let org-element--cache-verify-element and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if] 3 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37ca23>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 5 [cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>" funcall catch let] 9 [save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 8 [progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa5d1a2b5b8d00e8>" funcall prog1 catch let progn] 4 [cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let] 4 [eq or and save-current-buffer org-element--cache-active-p and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let] 4 [and not and or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility] 12 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d199ea38d00e8>"] 4 [let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let] 13 [after-insert-file-set-coding insert-file-contents-literally pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x8c40d2decc1f063>" tq-process-buffer tq-filter "#<compiled -0x72a5679944255fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page] 2 [catch or setq cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1a396b8d00e8>" funcall prog1] 4 [mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 5 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer] 4 [pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c37b663>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 16 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 7 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa5d1accb38d00e8>" funcall prog1 catch let progn if cond] 4 [pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 6 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 4 [let while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion] 4 [save-excursion org-outline-level funcall let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cconv--analyze-function cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv] 4 [and if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let] 4 [font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ea29de8ee7543>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if] 4 [while catch let org-do-emphasis-faces font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e8aa05d052043>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x1010a335ccfce0ba>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>"] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1a2dcb8d00e8>" funcall prog1 catch] 4 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree] 4 ["#<compiled 0x8c40a344cc1f063>" tq-process-buffer tq-filter "#<compiled -0x72a5679944255fb>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c579323>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 2 [org-noter--relative-position-to-view let cond let "#<lambda 0xa5d1a3e938d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x1010a335ecb730ba>" funcall prog1 catch let progn if cond let] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1a461b8d00e8>" funcall prog1 catch] 4 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if if org-show-set-visibility] 4 [symbolp cond org-element-contents mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let] 4 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 32 [or progn if let org-noter--parse-location-property let "#<lambda 0x1010a335eca780ba>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>"] 3 [mapcar "#<compiled 0x16dc3ecdbc2cc529>" mapcar pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x8c40a344cc1f063>" tq-process-buffer tq-filter "#<compiled -0x72a5679944255fb>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c578223>"] 2 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xa5d1a4ceb8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc] 4 [pdf-history-push pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 3 [let* < if let progn if cond let cond let "#<lambda 0xa5d1bd55b8d00e8>" funcall prog1 catch let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 8 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c5486a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1bce0b8d00e8>" funcall prog1 catch] 4 [jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer let if let progn progn] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d1bc1fb8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>"] 4 [cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>" funcall catch let let*] 6 [cons funcall let* progn if progn if progn cond let cond let "#<lambda 0xa5d1bde338d00e8>" funcall prog1 catch] 4 [eq if let cond let* and let* let* < if let progn if cond let cond] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 20 [mapcar "#<compiled 0x64bd74b9528e5a0>" mapcar pdf-util-scale "#<compiled 0x8220ac766fe6e7e>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c54ac23>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 7 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1bf6638d00e8>" funcall prog1 catch] 4 [progn cond let cond let cond let "#<lambda 0xa5d1bc6db8d00e8>" funcall prog1 catch let progn if cond let] 4 [function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler] 4 [org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa5d1bc98b8d00e8>" funcall prog1 catch let progn if cond] 4 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion] 8 [save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 4 [1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d2b952b8d00e8>" funcall prog1] 4 [pdf-info-query pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c54b5a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1a131b8d00e8>" funcall prog1 catch] 4 [if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if] 12 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1a72b38d00e8>" funcall prog1 catch] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d2be6e38d00e8>" funcall prog1 catch] 4 [org-unfontify-region font-lock-unfontify-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e923c5cea0b43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer] 4 [if let cond let* and let* vector setq if progn cond let cond let cond let] 8 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let] 4 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion] 8 [if org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1010a335d38c08ba>" funcall] 2 [pdf-info-query--parse-response "#<compiled 0x8c40a344cc1f063>" tq-process-buffer tq-filter "#<compiled -0x72a5679944255fb>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c54f923>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page] 2 [org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 16 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0xa5d1a6c9b8d00e8>" funcall prog1 catch let progn if cond] 4 [org-before-first-heading-p if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xa5d1a63cb8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc] 4 [and progn or progn aref progn progn org-element--cache-root let* save-current-buffer org-element--cache-find progn if if setq let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq] 2 [let cond let cond let "#<lambda 0xa5d1a7d3b8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc] 4 [if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if] 8 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c54c2a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1a666b8d00e8>" funcall] 4 [let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p] 4 [mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>" funcall catch let let* progn if org-element-ast-map] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1b57d38d00e8>"] 4 [org-fold-region if save-excursion org-fold-heading let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [progn cond let cond let cond let "#<lambda 0xa5d1b4fe38d00e8>" funcall prog1 catch let progn if cond let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1b40138d00e8>" funcall prog1 catch] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1010a3346e0a38ba>" funcall prog1 catch let] 5 [let* and let* vector setq if progn cond let cond let cond let "#<lambda 0xa5d1b7c438d00e8>" funcall prog1] 4 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion] 4 [progn progn if let org-noter--get-notes-window let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let] 2 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d1b72f38d00e8>" funcall prog1 catch let progn if cond let] 4 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 12 [progn cond let cond let cond let "#<lambda 0xa5d1b8ffb8d00e8>" funcall prog1 catch let progn if cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1bf5038d00e8>" funcall] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1010a334799e00ba>" funcall prog1 catch] 4 [let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d1b456b8d00e8>" funcall prog1 catch let progn if] 4 [let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d1b9cdb8d00e8>" funcall prog1 catch let] 4 [or progn org-noter--view-info-notes let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156f2b826286eb43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn] 4 [setq if progn cond let cond let cond let "#<lambda 0xa5d1ba7238d00e8>" funcall prog1 catch let progn if] 4 [remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while] 12 [let org-element--cache-verify-element and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if save-excursion if] 4 [progn unwind-protect let* org-unfontify-region font-lock-unfontify-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156eb049af95c443>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form] 14 ["#<lambda 0xa5d1bb0e38d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc] 4 [if org-noter--doc-file-property let "#<lambda 0xa5d1bbdeb8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond] 4 [and progn or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--get-notes-window let progn progn] 4 [and if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1baff38d00e8>" funcall prog1 catch] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function] 8 [progn if cond let cond let "#<lambda 0xa5d1b8afb8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>"] 4 [function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while let] 3 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 8 [run-hook-with-args-until-success or progn unwind-protect save-current-buffer let let org-noter--doc-approx-location let progn progn if let org-noter-sync-next-page-or-chapter let while] 2 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d1bd8038d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>"] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 11 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d1bed638d00e8>" funcall prog1 catch let progn if cond] 4 [funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond] 3 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1bfcc38d00e8>"] 4 [org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children] 4 [org-element-contents mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>" funcall] 7 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d186dd38d00e8>" funcall] 4 [catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading] 8 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 2 [let* and let* < if let progn if cond let cond let "#<lambda 0xa5d1873838d00e8>" funcall prog1 catch] 4 [and not and or org-back-to-heading if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let*] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d187d4b8d00e8>" funcall prog1 catch] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [cond org-element-type let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond] 4 [let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region] 8 [if let* vector setq if progn cond let cond let cond let "#<lambda 0xa5d1818f38d00e8>" funcall prog1 catch] 4 [function seq-find org-cite-get-processor let and or let* org-cite-activate font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156f246899d30f43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map] 4 [let progn if cond let cond let "#<lambda 0xa5d183dfb8d00e8>" funcall prog1 catch let progn if cond let] 4 [1- if save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function seq-find org-cite-get-processor let org-cite-processor-has-capability-p and or] 4 [vector setq if progn cond let cond let cond let "#<lambda 0xa5d1826ab8d00e8>" funcall prog1 catch let progn] 4 [pdf-info-query--escape mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1820cb8d00e8>" funcall] 4 [if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>" funcall catch let] 2 [tq-process-buffer tq-filter "#<compiled -0x72a5679944255fb>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c559b23>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 2 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d180a638d00e8>" funcall] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 8 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1805938d00e8>" funcall] 4 [org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa5d1839c38d00e8>" funcall prog1 catch] 4 [outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1010a3346ae3a8ba>" funcall prog1 catch let progn if cond] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1837738d00e8>" funcall prog1 catch] 4 [org-element-lineage-map if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion] 4 [org-element-type let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>" funcall catch let let*] 4 [if let* < if let progn if cond let cond let "#<lambda 0xa5d1815238d00e8>" funcall prog1 catch let] 4 [save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn] 4 [cond let "#<lambda -0x12aee2b408985c9c>" funcall catch let let* progn if org-element-ast-map let* progn if org-element-map let progn] 4 [prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let] 4 [gethash or let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 4 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 4 [integerp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x1010a3346d14f8ba>" funcall prog1 catch let progn] 2 [not cond org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d2816838d00e8>" funcall] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1010a3346d20d8ba>" funcall prog1 catch let progn if] 4 [let org-noter--parse-location-property let "#<lambda 0xa5d1802e38d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond] 4 [cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond] 4 [pdf-info-process-assert-running pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x1010a3346bff38ba>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>"] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1813438d00e8>" funcall prog1 catch] 4 [function org-element-lineage-map if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>" funcall catch let let* progn if org-element-ast-map let*] 4 ["#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>" funcall catch let let* progn if] 4 [cond let progn if cond let cond let "#<lambda 0xa5d2827a38d00e8>" funcall prog1 catch let progn if cond] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1010a334638188ba>" funcall prog1 catch] 11 [catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while] 16 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d281e038d00e8>" funcall prog1 catch] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1010a3346adc68ba>" funcall prog1 catch let progn if cond] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d281d338d00e8>" funcall prog1] 4 [let* progn if org-element-map or let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa5d28293b8d00e8>" funcall] 4 [let org-element--cache-verify-element and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading if] 4 ["#<compiled 0x8c40d2decc1f063>" tq-process-buffer tq-filter "#<compiled -0x72a5679944255fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d2818938d00e8>" funcall] 4 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if save-excursion if progn progn] 4 [catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>"] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d2808738d00e8>" funcall] 4 [save-current-buffer org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if] 16 [cond let "#<lambda 0xa5d18a37b8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let] 4 [eq and if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x1010a3345a93e8ba>" funcall prog1 catch let progn] 2 [and let* vector setq if progn cond let cond let cond let "#<lambda 0xa5d18adb38d00e8>" funcall prog1 catch] 4 [if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 12 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let] 4 [consp and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1010a3345aa15f12>"] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d18adb38d00e8>" funcall prog1] 4 [let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d18adb38d00e8>" funcall prog1 catch let] 4 [if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d18a37b8d00e8>" funcall prog1] 4 [if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d2808738d00e8>" funcall prog1 catch] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 2 [cond let cond let "#<lambda 0xa5d2805db8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter] 2 [let* vector setq if progn cond let cond let cond let "#<lambda 0xa5d2818938d00e8>" funcall prog1 catch let] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1010a3346ae53f12>" funcall prog1 catch let] 6 [org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x1010a3346abba712>" funcall prog1 catch let progn if cond let "#<lambda -0x10de1d41f8985c9c>"] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d281d338d00e8>" funcall] 4 [if progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 4 [if let "#<lambda 0x1010a33463199f12>" funcall prog1 catch let progn if cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let] 6 [if let* if let* vector setq if progn cond let cond let cond let "#<lambda 0xa5d281e038d00e8>" funcall] 4 [mod if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let] 4 [cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map or let* progn if] 4 [or if cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d2822538d00e8>"] 4 ["#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond let "#<lambda -0x10de1d41f8985c9c>" funcall catch let let* progn if] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d2827a38d00e8>" funcall prog1] 4 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1010a334639be712>" funcall prog1 catch let] 3 [if org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1010a3346bb05712>" funcall] 3 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa5d1813438d00e8>" funcall] 4 [org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x1010a3346b718712>" funcall prog1 catch] 6 [or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa5d2803eb8d00e8>" funcall prog1 catch] 4 [cons let* progn if cond let cond let cond let "#<lambda 0xa5d2803eb8d00e8>" funcall prog1 catch let progn] 4 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 4 [cond let cond let "#<lambda 0xa5d1800bb8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1802e38d00e8>" funcall prog1] 4 [eq and if let org-element--property org-element-parent setq while catch let org-element-lineage-map if or org-back-to-heading if org-back-to-heading-or-point-min] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x1010a3346b131f12>" funcall] 12 [let cond let cond let "#<lambda 0xa5d2816838d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 13 [cond let "#<lambda 0x1010a3346a429712>" funcall prog1 catch let progn if cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond let "#<lambda -0x10de1d41f8985c9c>"] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d180ed38d00e8>" funcall prog1] 4 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if] 8 [mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond let "#<lambda -0x10de1d41f8985c9c>" funcall catch let let* progn if org-element-ast-map] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d180c7b8d00e8>" funcall prog1 catch] 4 [symbolp cond org-element-type let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond let "#<lambda -0x10de1d41f8985c9c>" funcall catch] 6 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure] 16 [let cond let cond let "#<lambda 0xa5d1837738d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc] 4 [vector setq if progn cond let cond let cond let "#<lambda 0xa5d1839c38d00e8>" funcall prog1 catch let progn] 6 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 2 [org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks] 4 [or if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc] 4 [> and if let org-noter--parse-location-property let "#<lambda 0xa5d1820cb8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>"] 4 [eq if let cond let* and let* org-element-contents-begin let cond let while let let* save-restriction save-excursion] 4 [cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond let "#<lambda -0x10de1d41f8985c9c>" funcall catch let let*] 3 [if let cond let* and let* org-element-begin goto-char progn if let* org-up-heading-safe while save-excursion progn if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 9 [let* if let* < if let progn if cond let cond let "#<lambda 0xa5d183dfb8d00e8>" funcall prog1 catch] 3 [< if let progn if cond let cond let "#<lambda 0xa5d183dfb8d00e8>" funcall prog1 catch let progn if] 4 [if let org-noter--parse-location-property let "#<lambda 0x1010a33453456f12>" funcall prog1 catch let progn if cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond] 3 [setq if progn cond let cond let cond let "#<lambda 0xa5d1818f38d00e8>" funcall prog1 catch let progn if] 4 [cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond let "#<lambda -0x10de1d41f8985c9c>" funcall catch let] 7 [let* if let* vector setq if progn cond let cond let cond let "#<lambda 0xa5d182a438d00e8>" funcall prog1] 4 [goto-char save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 10 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1010a3345f18f712>" funcall prog1 catch let progn] 2 [save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let] 4 [progn cond let cond let cond let "#<lambda 0xa5d1873838d00e8>" funcall prog1 catch let progn if cond let] 4 [not cond org-get-limited-outline-regexp concat re-search-forward if save-excursion org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if] 4 [progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--get-doc-window select-window let progn progn if let] 4 [and cond let cond let cond let "#<lambda 0xa5d1be48b8d00e8>" funcall prog1 catch let progn if cond let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 6 [if let org-noter--parse-location-property let "#<lambda 0xa5d1bfcc38d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond] 4 [let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 8 [progn progn let* org-knuth-hash mod if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x1010a3345f327712>" funcall prog1 catch let progn if cond let] 8 [cond org-element-type let* and let* let* < if let progn if cond let cond let "#<lambda 0xa5d1bd8038d00e8>"] 4 [- 1- if save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while] 4 [cdr car if let cond let* and let* vector setq if progn cond let cond let] 9 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1b8afb8d00e8>" funcall prog1 catch] 4 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if if org-show-set-visibility] 4 [let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond let "#<lambda -0x10de1d41f8985c9c>" funcall catch let let* progn] 3 [cond org-element-type let* and let* vector setq if progn cond let cond let cond let "#<lambda 0xa5d1baff38d00e8>"] 4 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let*] 4 [let "#<lambda 0xa5d1bb65b8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>"] 4 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 16 [macroexp-macroexpand macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 7 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1bb0e38d00e8>"] 4 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 8 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 8 [org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1010a33469696712>" funcall prog1 catch] 5 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1b9cdb8d00e8>" funcall] 4 [cond let cond let "#<lambda 0xa5d1b456b8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond] 7 [memq not and if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if] 4 [numberp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x1010a334791abf12>" funcall prog1 catch let progn] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1bf5038d00e8>"] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [eq if let* if let* let* < if let progn if cond let cond let "#<lambda 0xa5d1b8ffb8d00e8>"] 4 [org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 8 [window-current-scroll-bars window-edges window-inside-pixel-edges pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 14 [org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 12 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 27 [if let cond let* and let* let* < if let progn if cond let cond let] 4 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d1b40138d00e8>" funcall prog1 catch let progn if cond let] 4 [let* and let* and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion] 4 [or if let org-noter--parse-location-property let "#<lambda 0x1010a3346e2ca712>" funcall prog1 catch let progn if cond let "#<lambda -0x10de1d41f8985c9c>" mapc] 2 [memq not and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let] 4 [org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>" funcall catch let let* progn] 4 [org-element-parent setq while let org-element-lineage let if let org-before-first-heading-p if org-fold-show-children cond let* progn if if] 4 [org-noter--parse-location-property let "#<lambda 0x1010a33462546712>" funcall prog1 catch let progn if cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let] 2 [cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d1a74738d00e8>" funcall prog1 catch] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 3 [symbolp cond org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d1a7d3b8d00e8>" funcall] 4 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1a5e538d00e8>" funcall] 6 [run-hook-with-args-until-success or progn if let org-noter--parse-location-property let "#<lambda 0x1010a3346c217f12>" funcall prog1 catch let progn if cond let] 2 [if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d2bfb0b8d00e8>" funcall prog1 catch let progn] 4 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 12 [let or progn if let org-noter--parse-location-property let "#<lambda 0x1010a335de1c6712>" funcall prog1 catch let progn if cond let] 6 [cond org-element-contents mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>"] 4 [intern org-element--property or if let org-noter--parse-location-property let "#<lambda 0x1010a335df714f12>" funcall prog1 catch let progn if cond let] 9 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d2be6e38d00e8>" funcall] 4 [setq cond let progn if cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond let] 2 [let* if let* vector setq if progn cond let cond let cond let "#<lambda 0xa5d1a72b38d00e8>" funcall prog1] 4 [window-at-side-p mode-line-default-help-echo redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0xa5d1a131b8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>"] 9 [progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>" funcall catch] 6 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while] 4 [cond let "#<lambda -0x480192437d7118>" funcall catch let let* progn if org-element-ast-map let* progn if org-element-map let* progn] 4 [and cond let cond let cond let "#<lambda 0xa5d1bc6db8d00e8>" funcall prog1 catch let progn if cond let] 7 [if let* org-element-end <= and while let cond let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let progn if] 3 [org-element-begin = and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x1010a335cfd59712>" funcall prog1 catch let progn if cond let "#<lambda -0x10de1d41f8985c9c>"] 2 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 2 [org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn if] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1010a335ce558f12>" funcall prog1 catch let progn if cond] 6 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1a42ab8d00e8>"] 3 [or set-buffer save-current-buffer progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1010a335cf0a4712>" funcall prog1 catch] 6 [let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d1bc1fb8d00e8>" funcall prog1 catch let progn if] 5 [prog1 catch let progn if cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond let] 2 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa5d1bce0b8d00e8>" funcall prog1 catch] 3 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa5d1bd55b8d00e8>" funcall prog1 catch let progn if cond] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1010a335efb6cf12>" funcall prog1 catch let] 2 [let progn if cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond let "#<lambda -0x10de1d41f8985c9c>" funcall] 2 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa5d1a55e38d00e8>" funcall] 4 [org-at-heading-p and or org-back-to-heading let* progn save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [numberp if cond org-noter--compare-locations and if cond let "#<lambda 0x1010a335ecb9af12>" funcall prog1 catch let progn if cond] 6 [let* let* < if let progn if cond let cond let "#<lambda 0xa5d1a461b8d00e8>" funcall prog1 catch let] 4 [org-element-type memq if not and while let org-element-lineage let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1a3e938d00e8>" funcall prog1] 8 [let cond let cond let "#<lambda 0xa5d1a369b8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc] 4 [if let* if let* let* < if let progn if cond let cond let "#<lambda 0xa5d1af4538d00e8>" funcall] 5 [let* vector setq if progn cond let cond let cond let "#<lambda 0xa5d1af1a38d00e8>" funcall prog1 catch let] 7 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa5d1afbf38d00e8>" funcall prog1 catch] 6 [if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading let* progn save-excursion if] 4 [pdf-view-image-size pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1010a335d5365712>" funcall prog1 catch let progn if cond] 12 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading] 4 [and if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d1accb38d00e8>" funcall prog1 catch let progn if] 9 [window-edges window-inside-pixel-edges pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 3 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d1ac0838d00e8>" funcall] 4 [save-current-buffer progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage] 4 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1010a335c9b74712>" funcall prog1 catch let progn] 6 [and save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn] 4 [progn if cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond let "#<lambda -0x10de1d41f8985c9c>" funcall catch] 5 [mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond let "#<lambda -0x10de1d41f8985c9c>" funcall catch] 4 [if let* vector setq if progn cond let cond let cond let "#<lambda 0xa5d1a396b8d00e8>" funcall prog1 catch] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 4 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let* save-excursion] 4 [cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let] 2 ["#<compiled -0x1c8b249cb0c178df>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x8c40d2decc1f063>" tq-process-buffer tq-filter "#<compiled -0x72a5679944255fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 3 [progn if cond let cond let "#<lambda 0xa5d1a2b5b8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>"] 3 [progn let* org-knuth-hash mod if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion] 4 [if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d1a16eb8d00e8>" funcall prog1 catch let progn] 9 [if cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond let "#<lambda -0x10de1d41f8985c9c>" funcall catch let] 3 [vector setq if progn cond let cond let cond let "#<lambda 0xa5d1a14138d00e8>" funcall prog1 catch let progn] 4 [cond org-element-contents mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond let "#<lambda -0x10de1d41f8985c9c>"] 2 [cond org-element-type eq if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn] 4 [pdf-info-process-assert-running pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37d9a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 2 [let* and let* let* goto-char save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 4 [let cond let cond let "#<lambda 0xa5d19a28b8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc] 3 [consp and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let] 7 [setq progn progn if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [pdf-info-query--parse-response "#<compiled 0x8c41c7a6cc1f063>" tq-process-buffer tq-filter "#<compiled -0x72a5679944255fb>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c373023>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 3 [window-pixel-edges window-at-side-p mode-line-default-help-echo redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 12 [cond let cond let "#<lambda 0xa5d1987ab8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond] 4 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn] 4 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1010a335e3465f12>" funcall prog1 catch let progn if cond] 2 [if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while save-excursion progn if] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0xa5d1a99138d00e8>" funcall prog1 catch let progn if cond let] 8 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let*] 2 [progn progn org-element--cache-root let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq] 4 [cond let* and let* vector setq if progn cond let cond let cond let "#<lambda 0xa5d19bf1b8d00e8>" funcall] 6 [not cond format let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let] 5 [if let* if let* org-element-begin let* while if let* save-current-buffer org-element--cache-find progn if if setq let] 4 [catch let progn if cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond let "#<lambda -0x10de1d41f8985c9c>"] 6 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d1a9f738d00e8>" funcall prog1 catch let progn if cond] 3 [not cond org-element-type memq if not and while let org-element-lineage setq if org-end-of-subtree save-excursion let* save-excursion] 4 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion] 4 [pdf-view-current-page number-to-string eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 3 [let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d1a815b8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>"] 9 [list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading] 4 [save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map let let] 2 [cond org-element-type let "#<lambda -0x12aee2b408985c9c>" mapc cond cond let "#<lambda -0x12aee2b408985c9c>" mapc cond let "#<lambda -0x12aee2b408985c9c>" funcall catch let] 3 ["#<lambda 0x1010a335d812e712>" funcall prog1 catch let progn if cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc] 2 [cond let cond let "#<lambda 0xa5d2b0a938d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond] 3 [let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond let "#<lambda -0x10de1d41f8985c9c>"] 3 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv] 3 [not cond org-element-type let* and let* org-element-begin = or and not and if if let save-restriction] 4 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xa5d2af27b8d00e8>" funcall prog1 catch let progn if cond let] 2 [let cond let "#<lambda 0xa5d2a1d6b8d00e8>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond] 3 [setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [let "#<lambda 0x1010a33562902f12>" funcall prog1 catch let progn if cond let "#<lambda -0x10de1d41f8985c9c>" mapc cond cond let "#<lambda -0x10de1d41f8985c9c>"] 2 [if org-noter--doc-file-property let "#<lambda -0x22d0ed847bbe2b0>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond cond] 3 [org-noter--relative-position-to-view let cond let "#<lambda -0x22d0ed847bbe2b0>" funcall prog1 catch let progn if cond let "#<lambda -0x12aee2b408985c9c>" mapc cond] 4 [save-excursion org-outline-level funcall let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn] 7 [let progn eval let* org-babel-execute:elisp funcall save-current-buffer let setq progn let* cond let* progn if let*] 5 [Automatic\ GC] 1150)) (25847 63729 115318 780000) nil]
