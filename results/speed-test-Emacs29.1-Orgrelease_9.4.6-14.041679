
[profiler-profile "28.1" cpu #s(hash-table size 487 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([upcase let* funcall cond cond let cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements] 3 [char-after eq and cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let* if] 4 [while let progn if save-excursion org-element--get-node-properties let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while] 8 [cond if org-element--next-mode org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond let* if while let] 4 [let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond let* if] 4 [if org-element-property goto-char let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements] 4 [not cond org-get-limited-outline-regexp let* progn cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond] 4 [progn if save-excursion org-element--get-node-properties let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion] 4 [save-restriction save-excursion org-outline-level funcall let org-end-of-subtree save-excursion min let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let*] 4 [apply let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond let* if while let] 4 [let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 32 [user-error condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 417 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry let while let cond] 4 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2190 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 28 [condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 50 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function overlay-put let progn if org-flag-region let* if let* cond let org--hide-wrapper-toggle org-hide-drawer-toggle] 4 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 32 [let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch let let* org-element-map] 4 [org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 100 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 26 [cond let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 12 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xbc9c9afc52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 544 [pdf-cache-get-image pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 3 [org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 18 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 8 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 10 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9c9b4352e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 7 [and let cond let org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while save-excursion progn if] 41 [if let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 6 [not or cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 245 [save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 36 [or cdr let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 78 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xbc9c96f2d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12f43b5d842>" funcall let progn] 9 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9c96dfd2e4484>" funcall let progn if cond] 4 [while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 100 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 36 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 24 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c36fc63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 20 [cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 34 [outline-back-to-heading condition-case org-back-to-heading let* progn save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 27 [progn unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 65 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9cf211d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond] 7 [cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion let* progn] 4 [while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 22 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 8 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9cf57252e4484>"] 7 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f4d1a4042>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond let] 2 [or let org-noter--doc-file-property let "#<lambda 0xbc9cf4fe52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let] 4 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 56 [pdf-cache--data-get pdf-cache-number-of-pages pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 2 [and if let org-noter--parse-location-property let "#<lambda 0xbc9cf78052e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond] 4 [save-excursion org-outline-level funcall 1- let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 24 [unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 41 [cond let "#<lambda 0xbc9cf7bbd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0xbc9cf04cd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 24 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 16 [org-element-contents not cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9c904852e4484>" funcall] 6 [let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 22 [cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f78a38842>" funcall let progn] 3 [let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9cf03ed2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [null save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 43 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9cf07752e4484>" funcall let] 4 [function setq let let* org-element-map or let* progn if org-noter--get-properties-end if let cond let* progn progn] 4 [org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 3 [and cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch] 5 [and if let org-noter--parse-location-property let "#<lambda 0xbc9cf15152e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond] 7 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9cf15152e4484>" funcall let progn if cond] 5 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9cf112d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [outline-flag-region outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 8 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 2 [condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 44 [function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler] 7 [let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 54 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de8b1d2e4484>" funcall] 7 [condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 35 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9deaced2e4484>"] 6 [cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 32 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9dead252e4484>" funcall] 3 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101ff12f79752842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond] 2 [cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch let let*] 4 [org-noter--doc-file-property let "#<lambda 0xbc9de654d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de64fd2e4484>" funcall let progn if cond] 4 [let cond let "#<lambda 0xbc9de64fd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9de69552e4484>" funcall let] 7 [let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 19 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9de77f52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 7 [goto-char condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 4 [progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 123 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 8 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9dee30d2e4484>"] 6 [progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 13 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 3 [save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 29 [org-noter--parse-location-property let "#<lambda 0xbc9de904d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [cconv-make-interpreted-closure function setq let let* org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9def49d2e4484>" funcall let progn] 4 [if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 2 [org-noter--relative-position-to-view let cond let "#<lambda 0xbc9de92e52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xbc9de92e52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [create-image apply pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 11 [org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 4 [org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 12 [save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 71 [let "#<lambda 0xbc9df6e652e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xbc9df480d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9df480d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond] 6 ["#<lambda 0x101ff12f776a0042>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond let "#<lambda -0x146e94c277549ccb>" mapc cond let] 2 [vector setq if progn cond let cond let cond let "#<lambda 0xbc9df53252e4484>" funcall let progn if cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 3 [cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch let let* org-element-map let progn progn if let progn if org-noter--get-view-info] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 8 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9dec2152e4484>" funcall let progn if cond] 4 ["#<lambda -0x146e94c277549ccb>" mapc cond cond let "#<lambda -0x146e94c277549ccb>" mapc cond let "#<lambda -0x146e94c277549ccb>" funcall catch let let* org-element-map let] 6 [let catch let* org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let] 4 [macroexp-macroexpand macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond] 9 [funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0xbc9dec6a52e4484>" funcall let progn] 4 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x5eb827ea1a5b523>" tq-process-buffer tq-filter "#<compiled -0x7cc9add54c5b5bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 12 [cond let cond let "#<lambda 0xbc9dec9f52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let] 4 ["#<compiled -0x1c8cb22841029adf>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x5eb827ea1a5b523>" tq-process-buffer tq-filter "#<compiled -0x7cc9add54c5b5bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9df0dc52e4484>" funcall let progn if cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12f6c13b042>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>"] 3 [org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 12 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df3b652e4484>" funcall] 4 [org-entry-end-position cond let* progn if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond let "#<lambda -0x146e94c277549ccb>" mapc cond let "#<lambda -0x146e94c277549ccb>" funcall catch let let*] 2 [pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 3 [let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond let "#<lambda -0x146e94c277549ccb>" mapc cond let "#<lambda -0x146e94c277549ccb>" funcall] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff1295ccdd042>" funcall let progn if cond] 7 [outline-back-to-heading condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 22 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9df03752e4484>" funcall let progn if cond] 4 [outline-back-to-heading condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 20 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff1295c7a4042>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>"] 2 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 8 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df1bb52e4484>" funcall] 4 [org-noter--parse-location-property let "#<lambda 0xbc9df1bb52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 2 ["#<compiled -0x7cc9add54c5b5bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 6 [eq cond let progn if cond let cond let "#<lambda 0xbc9df67052e4484>" funcall let progn if cond let] 2 [cond let "#<lambda 0x101ff12945247042>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond let "#<lambda -0x146e94c277549ccb>" mapc] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df7c552e4484>" funcall let] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9df7c552e4484>" funcall let progn if cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let] 3 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9d257cd2e4484>" funcall] 4 [save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if let*] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d24ddd2e4484>" funcall] 7 [null save-excursion let* progn org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d27a3d2e4484>"] 3 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 53 [image-set-window-vscroll image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 4 [tq-process-buffer tq-filter "#<compiled -0x7cc9add54c5b5bb>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c540863>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if] 7 [if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101ff12acc19c842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc] 2 [and cond let cond let cond let "#<lambda 0xbc9d2ac2d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 6 [if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 41 [let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 18 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12ad5a10042>" funcall let progn] 6 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 10 [org-element-property or let org-noter--doc-file-property let "#<lambda 0xbc9d260a52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond] 4 [cond let cond let "#<lambda 0xbc9d22acd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let] 3 [cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d22acd2e4484>" funcall let progn if] 3 [integerp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12ad63f3842>" funcall let progn if cond] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 5 [cond let "#<lambda 0xbc9d2221d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9d2247d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 8 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d21f0d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [or let org-noter--doc-file-property let "#<lambda 0xbc9d21fd52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let] 1 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d21fd52e4484>" funcall let] 4 [outline-back-to-heading condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d22c252e4484>"] 7 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9d2193d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xbc9d258452e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond] 6 [mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 3 ["#<lambda 0xbc9d2589d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 3 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9d23a8d2e4484>" funcall] 4 [or let org-noter--doc-file-property let "#<lambda 0xbc9d2526d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let] 6 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d230f52e4484>" funcall let progn if] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d230f52e4484>" funcall] 4 [org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 10 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de091d2e4484>" funcall let] 5 [let "#<lambda -0x919171f4f79bc7a>" funcall catch let let* org-element-map or let* progn if org-noter--get-properties-end if let cond let*] 4 [eq and if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101ff12ad9211042>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc] 3 [not cond org-element-contents not cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12adbcbf842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc] 7 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9de1bdd2e4484>" funcall let progn] 5 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de1bdd2e4484>" funcall let progn] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0xbc9de1bdd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de1bdd2e4484>" funcall let progn if cond] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x101ff12ada7b0842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond] 6 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de2eed2e4484>" funcall let progn if] 4 [and let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 16 [not and cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d20d452e4484>" funcall let progn] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9d20d452e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d216152e4484>" funcall] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d208b52e4484>" funcall let progn if cond] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de7ccd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9de7ccd2e4484>" funcall] 4 [let cond let cond let "#<lambda 0xbc9de7ccd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12aeb556042>" funcall let progn if] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de5c1d2e4484>" funcall let progn] 3 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de490d2e4484>" funcall] 3 ["#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch let let* org-element-map let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let progn progn] 2 [org-not-nil if let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 4 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0xbc9de4c852e4484>" funcall let progn] 2 ["#<compiled -0x17ea01a4118c70d7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x5eb827ea1a5b523>" tq-process-buffer tq-filter "#<compiled -0x7cc9add54c5b5bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function] 2 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de7bed2e4484>" funcall] 6 [let "#<lambda 0xbc9de7bed2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0xbc9de7bed2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de7bed2e4484>"] 4 [save-excursion let* progn org-before-first-heading-p if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12add221842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond] 7 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de733d2e4484>" funcall let] 5 [cond let cond let cond let "#<lambda 0xbc9de269d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [progn frame-live-p and if progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer] 3 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de392d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [org-noter--compare-locations and if cond let "#<lambda 0x101ff12adb525842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de3bfd2e4484>" funcall] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de33052e4484>" funcall let progn] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9de33052e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de33052e4484>" funcall let progn if cond] 4 [cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch let] 4 [not cond org-get-limited-outline-regexp let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de315d2e4484>" funcall let progn] 5 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de55a52e4484>" funcall let progn if] 4 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 8 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0xbc9de56bd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 7 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9de56bd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12aeaae6042>" funcall let progn] 4 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 8 [symbolp cond org-element-type let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch] 4 [let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9dc26c52e4484>" funcall] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9dc26c52e4484>" funcall let progn] 8 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9dce37d2e4484>"] 5 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9dce37d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 4 [if let org-noter--get-doc-window if let org-noter--doc-approx-location let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12ae9c4eaba>" funcall let progn if cond] 40 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9dce37d2e4484>" funcall let] 4 [cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall catch let] 2 [cond let "#<lambda 0xbc9dc26c52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9dc26c52e4484>" funcall let progn if cond let] 4 [outline-back-to-heading condition-case org-back-to-heading let* progn save-excursion if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de56bd2e4484>" funcall] 4 [cdr car let* make-org-noter--view-info let progn progn if let progn if org-noter--get-view-info let progn progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map] 4 [progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch] 4 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 4 [or let org-noter--doc-file-property let "#<lambda 0x101ff12adb9e72ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let] 4 [and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 8 [vector setq if progn cond let cond let cond let "#<lambda 0xbc9de315d2e4484>" funcall let progn if cond] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12adb080aba>" funcall let progn if] 20 ["#<lambda 0xbc9de33052e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let] 4 [org-noter--compare-locations and if cond let "#<lambda 0x101ff12adb5f52ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond] 4 [setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9de3bfd2e4484>" funcall let progn if] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de392d2e4484>" funcall let progn if cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de392d2e4484>" funcall] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12add4cb2ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>"] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de269d2e4484>" funcall let] 4 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9de3a4d2e4484>" funcall let progn if cond] 4 [remove-overlays org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 16 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de733d2e4484>" funcall let progn if cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let progn if] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de7bed2e4484>" funcall] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12aeb6d72ba>" funcall let progn] 19 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9de49d52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de4c852e4484>" funcall let] 4 [not cond org-element-type let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de490d2e4484>" funcall let progn] 3 [save-restriction save-excursion org-outline-level funcall 1- let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12adc5aaaba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let] 3 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101ff12adc5aaaba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond] 4 [setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9de5c1d2e4484>" funcall let progn if] 4 [cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9de5c1d2e4484>" funcall let progn if cond let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de7ccd2e4484>" funcall let progn] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de7ccd2e4484>" funcall let progn if cond let] 4 [org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 11 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de03bd2e4484>" funcall] 4 [function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter] 3 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12ad34ca2ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>"] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de0b6d2e4484>" funcall let progn if] 4 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0xbc9de0b6d2e4484>" funcall let progn] 4 [let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>"] 2 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12ad2fcf2ba>" funcall let progn if cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d2045d2e4484>" funcall let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d2038d2e4484>" funcall let progn] 4 [let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 27 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d208b52e4484>" funcall let progn] 4 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 9 [if let org-noter--parse-location-property let "#<lambda 0x101ff12ad2ce3aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d20d452e4484>" funcall] 4 [and if cond let "#<lambda 0x101ff12ad2675aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let] 6 [cons progn if org-noter-pdf--approx-location-cons car vector progn if org-noter-pdf--get-current-view run-hook-with-args-until-success or progn unwind-protect save-current-buffer let let] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12ada116aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond] 3 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c55f0a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de2eed2e4484>" funcall let progn if cond] 4 [> and if let org-noter--parse-location-property let "#<lambda 0xbc9de2eed2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12ada5c72ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 3 [let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12ada5c72ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de1bdd2e4484>"] 4 [org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 4 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12ad9d002ba>" funcall let progn if cond let] 13 [let "#<lambda 0x101ff12ad9d002ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9de17352e4484>" funcall let progn if] 4 [plist-get if org-element-property or let org-noter--doc-file-property let "#<lambda 0xbc9de13ad2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101ff12ada963aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 3 [if org-element-property < if let progn if cond let cond let "#<lambda 0xbc9de091d2e4484>" funcall let progn if] 4 [or let progn progn if let org-noter--get-notes-window let progn progn if let org-noter-sync-prev-page-or-chapter let while let] 2 [if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [and let if let* cond let org--hide-wrapper-toggle org-hide-drawer-toggle progn if let "#<lambda 0x13e3eb0>" funcall if let* if] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d23a8d2e4484>"] 4 [progn cond let cond let cond let "#<lambda 0xbc9d2472d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d2472d2e4484>" funcall] 4 [progn if cond let cond let "#<lambda 0xbc9d2589d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch let let* org-element-map let progn] 4 [derived-mode-p not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 4 [progn cond let cond let cond let "#<lambda 0xbc9d22c252e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d21fd52e4484>" funcall let progn if] 4 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12ad4e09aba>" funcall let progn if] 10 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0xbc9d2247d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [not cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch] 4 [if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x101ff12ad4c532ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xbc9d260a52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12acca422ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>"] 6 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d265552e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [vector setq if progn cond let cond let cond let "#<lambda 0xbc9d2ac2d2e4484>" funcall let progn if cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d27a3d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [let org-noter--doc-file-property let "#<lambda 0x101ff12b7ca76aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>"] 4 [or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d278ed2e4484>" funcall let progn] 4 [org-get-limited-outline-regexp let* progn cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d24ddd2e4484>"] 4 [cond org-element-contents not cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall catch] 6 [or let org-noter--doc-file-property let "#<lambda 0x101ff12b644e52ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let] 4 [cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall catch let let* org-element-map let let progn progn] 3 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0xbc9d257cd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall catch let let*] 4 [cond org-element-contents mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall catch] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12944109aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff1295c4faaba>"] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df14e52e4484>"] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff1295c083aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 2 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9df729d2e4484>" funcall let progn if] 4 [not cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall catch] 6 [if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch let] 4 [if let org-noter--parse-location-property let "#<lambda 0xbc9df1d0d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let] 4 [setq if while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [memq and progn or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--get-doc-window internal--before-with-selected-window let] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df08952e4484>" funcall let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9df0dc52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let] 3 [redisplay--update-region-highlight run-hook-with-args redisplay--pre-redisplay-functions redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn] 3 [save-excursion let* save-excursion if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12f76d80aba>" funcall let] 7 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df44b52e4484>"] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9df44b52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9df44b52e4484>" funcall let progn if cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df42fd2e4484>" funcall let] 5 [let "#<lambda 0xbc9dec2152e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [or let org-noter--doc-file-property let "#<lambda 0x101ff12f751332ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let] 7 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df41452e4484>" funcall let] 7 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12f77a0eaba>" funcall let progn if] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df53252e4484>" funcall] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9df53252e4484>" funcall let progn if] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0xbc9df53252e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [not cond org-element-type let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9df48d52e4484>" funcall let progn if cond] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12f7176e2ba>" funcall let progn if cond] 6 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de9b5d2e4484>" funcall] 4 [not cond org-get-limited-outline-regexp let* progn cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if] 8 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12f7fbecaba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 6 [cond org-element-contents mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>"] 2 [org-element-property setq if let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect save-current-buffer let] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de904d2e4484>" funcall let] 5 ["#<lambda 0x101ff12f72b192ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let] 2 [cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while] 2 [pdf-info--normalize-file-or-buffer pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 4 [if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond] 6 [org-element-property or let org-noter--doc-file-property let "#<lambda 0xbc9deecad2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond] 3 [symbolp cond org-element-type let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [org-end-of-subtree save-excursion let* save-excursion if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f7af2c2ba>" funcall] 3 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37a763>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 5 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0xbc9de69552e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [cond let cond let "#<lambda 0xbc9de64fd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let] 2 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x101ff12f7a021aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de654d2e4484>" funcall] 4 [if org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12f7a05b2ba>" funcall let] 3 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9dead252e4484>" funcall let] 4 [symbolp cond org-element-type let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall catch] 7 [insert-file-contents-literally pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x5eb827ea1a5b523>" tq-process-buffer tq-filter "#<compiled -0x7cc9add54c5b5bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 2 [org-noter--parse-location-property let "#<lambda 0x101ff12f7ee152ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9cf22f52e4484>" funcall let] 4 [let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall] 4 [not and cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall] 6 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9cf15152e4484>" funcall let progn if cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12f789442ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>"] 6 [vector setq if progn cond let cond let cond let "#<lambda 0xbc9cf0e452e4484>" funcall let progn if cond] 4 [progn frame-live-p and if progn if org-noter--valid-session if let progn unwind-protect save-current-buffer let progn if org-noter--set-notes-scroll] 8 [setq cond let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let] 2 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12f7877eaba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>"] 4 [org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if let progn] 4 [save-excursion org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let] 4 [or let org-noter--doc-file-property let "#<lambda 0x101ff12f4aec7aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let] 3 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x101ff12f794302ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond] 6 [while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9c9067d2e4484>" funcall let progn if cond] 6 [while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion] 8 [or let org-noter--doc-file-property let "#<lambda 0xbc9c90f652e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let] 4 [let cond let "#<lambda 0xbc9cf04cd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>"] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9cf736d2e4484>" funcall let] 4 [progn if cond let "#<lambda 0x101ff12f4b84f2ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 1 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let] 4 [if let org-noter--parse-location-property let "#<lambda 0x101ff12f4c78caba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let] 2 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12f4c78caba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>"] 4 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0xbc9cf31852e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [let "#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn] 4 [plist-get if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101ff12f4cf81aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>"] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9cf397d2e4484>" funcall] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map] 4 [plist-get if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101ff12f4de732ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9cf211d2e4484>" funcall let progn if cond] 4 [and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12f403892ba>" funcall let progn if] 6 [org-noter--doc-file-property let "#<lambda 0xbc9c94f5d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 7 [outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let] 4 [or let org-noter--doc-file-property let "#<lambda 0x101ff12f434dfaba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let] 6 [progn if let org-noter--parse-location-property let "#<lambda 0x101ff12f4336b2ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond] 4 [condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 1 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f474dc2ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f460f12ba>" funcall let] 6 [or let progn progn if let org-noter--get-notes-window if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page] 4 [progn org-noter--view-info-regions or let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f45713aba>" funcall let progn] 4 [org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9c91a5d2e4484>" funcall let progn if cond] 2 [eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x9ce41ab1fd48514>" funcall let progn if] 3 [if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 ["#<lambda -0xc518e9acd0d7aec>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let] 4 [Automatic\ GC] 925)) (25843 53461 42085 461000) nil]
