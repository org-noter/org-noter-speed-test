
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 1392 [let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 158 [let org-noter--parse-location-property let "#<lambda 0x3959ad08591f394>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 33 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 28 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 596 [setq progn while let org-remove-font-lock-display-properties progn unwind-protect let* org-unfontify-region font-lock-unfontify-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x1568fecae98c2843>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function] 3 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2346 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 26 [progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 95 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13783316f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 56 [let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 42 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13783310bd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [or set-buffer save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction] 14 [and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 92 [pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 3 [cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 40 [symbolp cond org-element-type let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [null save-excursion let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 103 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 24 [and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 46 [mapcar "#<compiled 0xf5e4e1d372cc528>" mapcar pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x16bf159dd922f63>" tq-process-buffer tq-filter "#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c368b63>"] 6 [let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 82 [progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 11 [org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 32 [and save-excursion org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 30 [save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 8 [save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 44 [user-error or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 733 [org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch let save-restriction] 36 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 56 [cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [save-current-buffer not if progn if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if] 8 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c3693a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 26 [cond let "#<lambda 0x1378335ec544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [progn unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 109 [or cdr let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 100 [and cond let cond let cond let "#<lambda 0x1378335b9544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [and if save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 313 [save-excursion let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 76 [if org-fold-folded-p not or and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading outline-flag-subtree outline-hide-subtree if] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c36f723>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 5 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 49 [let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall] 4 [outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry progn if while] 8 [and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 12 [save-excursion org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 16 [while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 72 [not or cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 420 [save-excursion let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 63 [org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 34 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 20 [and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 9 [or let org-noter--doc-file-property let "#<lambda 0x137833a9b544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree] 100 [pdf-info-query pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c3701a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 6 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x137833ac4544ed04>" funcall] 4 [org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 4 [let cond let "#<lambda 0x137833ac4544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn] 8 [org-element--cache-active-p and if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if] 4 [cond let "#<lambda 0x137833d41544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 8 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 9 [catch or org--property-get-separator let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 12 [let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 48 [if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 29 [if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 18 [progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 144 [let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 56 [and save-excursion org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 76 [mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 4 [not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 20 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond] 4 [if org-activate-tags font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x1568faab28676d43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect] 4 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 24 [org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 40 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 20 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137833fd0544ed04>"] 4 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x16bc84d7d922f63>" tq-process-buffer tq-filter "#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 20 [or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 99 [save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 58 [org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 40 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13783390e544ed04>" funcall let progn if cond] 6 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 23 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b17bdc740e>"] 2 [cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction] 132 [let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 20 [let or progn if let org-noter--parse-location-property let "#<lambda 0x1378339ab544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect] 8 [if if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 82 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1378339fcd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378339fcd44ed04>" funcall let progn if cond] 4 [let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 14 [if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 18 [cons progn if org-noter-pdf--approx-location-cons car vector progn if org-noter-pdf--get-current-view run-hook-with-args-until-success or progn unwind-protect save-current-buffer let let] 4 [plist-get if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x137833811544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 12 [while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 24 ["#<lambda 0x137835f2ed44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [if cond let cond let "#<lambda 0x137835f67544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x137835f67544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 44 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37f263>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 4 ["#<lambda 0x137833f08544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [= or and not and if if let org-element-at-point and let org-up-heading-safe while save-excursion progn if] 4 ["#<compiled -0x1a4da26af4e9e30d>" pdf-view-image-size pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 3 [let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 62 [let cond let cond let "#<lambda 0x137835905d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x137835905d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [1- if save-restriction save-excursion org-outline-level funcall max format setq if while let* save-excursion if org-fold-show-children progn] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b17faffc0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 6 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37eee3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 5 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137833bbad44ed04>" funcall let progn if cond] 4 [if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch] 73 [and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 20 [if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 48 [let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 27 [let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region] 8 [or progn if let org-noter--parse-location-property let "#<lambda 0x101914b17ca1a40e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 2 [setq if progn cond let cond let cond let "#<lambda 0x137833b0c544ed04>" funcall let progn if cond let] 4 [org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 53 [set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 8 [or and save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let*] 4 [font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156eff49693f8b43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer let if] 8 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x137833899544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 16 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function seq-find org-cite-get-processor let org-cite-processor-has-capability-p and or let* org-cite-activate font-lock-fontify-keywords-region font-lock-default-fontify-region] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 2 [funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 12 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101914b1b0048c0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378339edd44ed04>" funcall let progn if cond] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x137835d7b544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [cond org-element-contents not cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 11 [re-search-backward or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 44 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1b1feb40e>" funcall let progn] 8 [pdf-info-process-assert-running pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37c3e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 4 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x137835ed7544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 10 [vector setq if progn cond let cond let cond let "#<lambda 0x137835eb3d44ed04>" funcall let progn if cond] 4 [save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage let if or org-back-to-heading] 4 ["#<compiled -0x1c8c673bcbf2badf>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x16bc84d7d922f63>" tq-process-buffer tq-filter "#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 5 [progn condition-case if if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion] 22 [org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let] 6 [buffer-live-p and if progn if org-noter--valid-session if let org-noter--get-current-view org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835fb8d44ed04>" funcall let] 5 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 8 [eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 10 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b17f74440e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 7 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37bfa3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 3 [let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let] 40 [save-excursion org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 29 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let let*] 7 [cond let cond let "#<lambda 0x137835b69544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 23 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x137835c4bd44ed04>" funcall let progn if] 4 [and cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let "#<lambda 0x137835c70544ed04>" funcall] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1ac188c0e>" funcall let progn if] 10 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion] 24 [if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if] 4 [while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 39 [not if progn if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 8 [cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835bb1544ed04>" funcall let progn] 4 [setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 8 [org-back-to-heading if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1b6b4840e>" funcall let progn if cond let] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x137835842544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch] 21 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1378359ad544ed04>"] 4 [progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 [or if let org-noter--parse-location-property let "#<lambda 0x101914b1b555440e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 2 [derived-mode-p not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 8 [null save-excursion let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 124 [let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 35 [if while catch let org-footnote-next-reference-or-definition let org-activate-footnote-links font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x1568f93e49a7a543>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay] 4 [apply timer-event-handler accept-process-output pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1378358a4d44ed04>" funcall] 4 [org-back-to-heading let* progn save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x137835829d44ed04>" funcall] 4 [save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 12 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 8 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x13783579f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0x13783579f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780d38cd44ed04>" funcall let progn if] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility] 12 [org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 39 [org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 8 [save-current-buffer org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 17 [org-element--cache-active-p and if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b256dc0e>"] 10 [setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 8 [and if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 8 [pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 1 [if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children] 8 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 18 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn] 5 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780deb7d44ed04>" funcall] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 16 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 14 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780dd49544ed04>" funcall let] 4 [org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 4 [let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 18 [if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 12 [save-current-buffer org-element--cache-active-p and if let org-element-at-point org-element-lineage let if or org-back-to-heading let* progn save-excursion if org-fold-show-children] 4 [org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 23 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn] 6 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780de1a544ed04>" funcall] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 16 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let*] 4 [mapconcat pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 4 [if let org-noter--parse-location-property let "#<lambda 0x13780d200d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [cdr member if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if] 12 [and if let org-noter--parse-location-property let "#<lambda 0x13780debdd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1bbc37c0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 4 [org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1bb839c0e>" funcall let] 6 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d83cd44ed04>"] 4 [cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let] 4 [or set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 8 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 24 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b40d840e>" funcall let progn if cond] 10 [let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 59 [org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children] 4 [or set-buffer save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 12 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780d948544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 4 [symbolp cond org-element-type let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 6 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1b9d80c0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780dec5d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [save-current-buffer not if progn if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [org-noter--get-current-view org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 4 [unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 35 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 7 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780dac4d44ed04>" funcall] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780da49d44ed04>" funcall let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780da49d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x13780dae6d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 23 [or set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion] 11 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 2 [tq-enqueue pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 4 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c54c6e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 1 [let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let let* org-element-map] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ecbb544ed04>" funcall] 4 [or let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ef12544ed04>" funcall let progn if] 4 [org-element-property < if let progn if cond let cond let "#<lambda 0x13780ef12544ed04>" funcall let progn if cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ef12544ed04>" funcall let progn if cond] 4 [save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 20 [progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer] 3 [or or set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let] 4 [if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x13780ee58544ed04>" funcall let progn if cond let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ee58544ed04>" funcall let progn] 4 [cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780ee58544ed04>" funcall let progn if cond let] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101914b1a0a9940e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 7 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780dd0ad44ed04>" funcall let progn if cond] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b16038240e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [if let* org-cite-activate font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ec175b71a9643>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1bd27c40e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780eb6e544ed04>" funcall let] 8 [org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let] 14 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x13780ebcb544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [pdf-info--normalize-file-or-buffer pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c5469e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 2 [let org-noter--parse-location-property let "#<lambda 0x13780ea71544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [let org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 8 [or set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let] 4 [save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [image-mode-window-put image-set-window-vscroll image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 8 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1bb30ec0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [and cond let cond let cond let "#<lambda 0x13780e803d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e803d44ed04>" funcall let] 4 [if org-element-property < if let progn if cond let cond let "#<lambda 0x13780eb88d44ed04>" funcall let progn if] 4 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 12 [set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 12 [or or set-buffer save-current-buffer org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction] 3 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e9dad44ed04>" funcall let progn if] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780e9dad44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 ["#<compiled -0x17ea01e7223c98d7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x16bc84d7d922f63>" tq-process-buffer tq-filter "#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 11 [let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 4 ["#<lambda 0x13780e823544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x13780e823544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e96c544ed04>" funcall let] 4 [and not and or org-back-to-heading save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [cond org-element-type let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let] 4 [eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 7 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 28 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [not cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 4 [save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 20 [save-current-buffer org-element--cache-active-p and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 8 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e644544ed04>" funcall] 4 [or let org-noter--doc-file-property let "#<lambda 0x101914b1a5a4cc0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 7 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e051d44ed04>" funcall let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e051d44ed04>" funcall let progn if] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e051d44ed04>" funcall] 4 [if setq let org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion] 4 ["#<compiled 0x16bf159dd922f63>" tq-process-buffer tq-filter "#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c55f963>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 4 [progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if] 8 [not if progn if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 8 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 10 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e0b8544ed04>" funcall let progn] 4 [let catch let* org-element-map let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect save-current-buffer] 4 [and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 4 [pdf-info-query--parse-response "#<compiled 0x16bc84d7d922f63>" tq-process-buffer tq-filter "#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 9 [save-excursion save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage let] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1a638fc0e>" funcall let progn if] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e0ead44ed04>" funcall let progn if] 4 [while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 3 [and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 12 [and save-excursion org-at-heading-p and or org-back-to-heading if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e079d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 ["#<lambda 0x13780e35a544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [and cond let cond let cond let "#<lambda 0x13780e35a544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e35a544ed04>" funcall let] 4 [org-element-type memq not and while let org-element-lineage let if let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b1a8f6b40e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 2 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1a8f6b40e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [derived-mode-p not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 18 [or if let org-noter--parse-location-property let "#<lambda 0x101914b1a6b4640e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 ["#<compiled 0x16bc84d7d922f63>" tq-process-buffer tq-filter "#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 2 [let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 16 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e350544ed04>" funcall let progn if cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e350544ed04>" funcall let] 4 [setq if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1abb9940e>" funcall let progn if cond] 11 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1abb9940e>" funcall let progn] 4 [let "#<lambda 0x13780e3a5544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [cond let "#<lambda 0x13780e3a5544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [cond org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 8 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if] 4 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c558a23>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 7 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e5c2d44ed04>" funcall let progn if cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e52b544ed04>" funcall let progn if cond] 4 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 8 [progn cond let cond let cond let "#<lambda 0x13780e574544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [or let org-noter--doc-file-property let "#<lambda 0x13780e574544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 14 [if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780eae2544ed04>" funcall let] 4 [if if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 8 [if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let] 2 [org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [if progn cond let cond let cond let "#<lambda 0x13780ea23d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1ab36e40e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e688544ed04>" funcall let progn if cond] 4 [if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [cond let "#<lambda 0x13780e116544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function seq-find org-cite-get-processor let] 4 [and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1af5d740e>" funcall let progn if] 7 [or if let org-noter--parse-location-property let "#<lambda 0x101914b1af5d740e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1af5d740e>" funcall let progn if] 8 ["#<lambda 0x13780e78c544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e78c544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [while catch org-activate-links--text-properties if org-activate-links font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156eb30d202ee843>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect] 4 [or progn let progn progn if let org-noter--doc-goto-location if let progn progn if let org-noter-sync-next-page-or-chapter let] 4 ["#<lambda 0x13780e7a6d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e47f544ed04>"] 4 [cond let "#<lambda 0x13780e47f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let*] 4 [set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e450d44ed04>" funcall let] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x13780e450d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e450d44ed04>" funcall let] 4 [progn cond let cond let cond let "#<lambda 0x13780e450d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1a1cc140e>" funcall let] 6 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e4d5544ed04>" funcall] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e4d5544ed04>"] 4 [progn if org-element--cache-sync if if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780f312d44ed04>" funcall let] 4 [cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 4 [= and or cond let* org-noter--parse-root org-element-property goto-char save-excursion if progn progn unwind-protect save-current-buffer let if] 4 [or if let org-element--cache-verify-element and if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion] 4 [let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x13780f061544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780f061544ed04>" funcall let] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x13780f033d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 5 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x13780f033d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1a06e83a6>" funcall let progn] 12 [if org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1a06e83a6>" funcall let] 4 [let cond let "#<lambda 0x13780f061544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [list setq progn cond let cond let cond let "#<lambda 0x13780f061544ed04>" funcall let progn if cond let] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780f061544ed04>" funcall let progn] 4 [save-current-buffer progn if org-element--cache-sync if if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading let*] 4 [if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 4 [or set-buffer save-current-buffer org-element--cache-active-p and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 16 [let let* org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x13780e4d5544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e4d5544ed04>" funcall] 4 [let if let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e450d44ed04>" funcall let progn] 4 [if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 8 [or set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 15 ["#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall] 2 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101914b1af1ae3a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 12 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e7a6d44ed04>"] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while] 2 [let cond let "#<lambda 0x13780e78c544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map] 4 [pdf-view-image-size pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 3 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1ae491ba6>" funcall let progn if cond] 56 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1ae491ba6>" funcall let progn if] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1ae491ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e116544ed04>" funcall] 4 [org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 16 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e98d544ed04>" funcall let progn] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780e98d544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1abf7eba6>" funcall let progn if] 27 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ea23d44ed04>"] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780ea23d44ed04>" funcall let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780eaaed44ed04>" funcall let progn if cond] 4 [not and while let org-element-lineage let if let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while] 4 [featurep and if save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 3 ["#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let let* org-element-map let] 4 [and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x13780e52b544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e52b544ed04>"] 4 [while let org-element-lineage let if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond let* progn if] 4 [cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 4 [let* org-noter--parse-root org-element-contents if let progn progn if let progn if org-noter--get-view-info let progn progn if] 4 [and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 11 [if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e3a5544ed04>" funcall let progn if cond] 4 ["#<lambda 0x101914b1a6afbba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let] 4 [org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 10 [and cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch] 4 [progn cond let cond let cond let "#<lambda 0x13780e30f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e30f544ed04>"] 4 [if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch let] 3 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e35a544ed04>" funcall let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1a65efba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [eq cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e3f7d44ed04>" funcall let progn] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780e3f7d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [save-excursion save-excursion let let org-fold-core-get-folding-spec if org-fold-folded-p not or and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold] 4 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1a690f3a6>" funcall let progn if] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e0ead44ed04>" funcall] 4 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 8 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780e15d544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e0b8544ed04>" funcall let progn if cond] 4 [set-buffer save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 4 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e1f7544ed04>" funcall let progn if cond] 4 [list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading] 8 [progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1a5aadba6>" funcall let progn if cond let] 4 [< if let progn if cond let cond let "#<lambda 0x13780e051d44ed04>" funcall let progn if cond let] 4 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0x13780e051d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1a56e0ba6>" funcall let progn if cond let] 19 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780e644544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [and cond let cond let cond let "#<lambda 0x13780e644544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b1a528f3a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond] 4 [cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if let progn if org-noter--get-view-info let progn] 4 [if let org-noter--parse-location-property let "#<lambda 0x13780e61b544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1a30d9ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 7 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780ee8dd44ed04>" funcall let] 4 [or or set-buffer save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let] 7 [and if let org-noter--parse-location-property let "#<lambda 0x101914b1acd24ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ee80544ed04>" funcall] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ee80544ed04>" funcall let progn] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ef6a544ed04>" funcall let progn if] 4 [cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780ef6a544ed04>" funcall let progn if cond let] 4 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0x13780ef6a544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [function org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if let] 4 [if if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 4 [progn if let org-noter--parse-location-property let "#<lambda 0x13780e823544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [org-element-type let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let] 3 [cond org-element-contents mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if let progn if org-noter--get-view-info] 4 [and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if] 4 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1bb3603a6>" funcall let] 4 [mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e803d44ed04>"] 4 [org-element--cache-active-p if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d802544ed04>" funcall let progn] 4 [aset let* progn let progn progn if let progn if org-noter--get-view-info let progn progn if let] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 4 [eq not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1bbb293a6>" funcall] 4 [or progn aref progn progn org-element--cache-root let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let] 4 [and not and or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility] 4 [cond org-element-type let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 3 [save-excursion org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let] 4 [buffer-list kill-this-buffer-enabled-p redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 4 [not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1ba1e3ba6>" funcall let] 7 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ed8bd44ed04>" funcall let] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ed8bd44ed04>" funcall let progn if cond] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780db7c544ed04>" funcall let progn if cond] 8 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let] 8 [let cond let "#<lambda 0x13780dd0ad44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 8 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780efbd544ed04>" funcall let] 8 [cdr let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 4 [or set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ee58544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 8 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 4 [let "#<lambda 0x101914b1a7e0eba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780ef17544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 ["#<lambda 0x101914b1a720dba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let] 7 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ef12544ed04>" funcall] 4 [let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let] 4 [and not and or org-back-to-heading if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ec1e544ed04>" funcall] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ec1e544ed04>"] 4 [if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 12 [cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch let let*] 4 [org-element-contents not cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d995544ed04>" funcall] 4 [and if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 8 [or org--property-get-separator let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d9fbd44ed04>" funcall] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780dae6d44ed04>"] 4 [and or org-back-to-heading save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780da49d44ed04>" funcall] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780da49d44ed04>" funcall let progn if cond let] 4 [org-noter--doc-file-property let "#<lambda 0x101914b1bdfac3a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780dac4d44ed04>"] 4 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 16 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let] 20 [if org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780dec5d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [or cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 10 [cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let] 3 [eq not if if if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780df22544ed04>" funcall let progn] 5 [if save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 7 [let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion] 7 [funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>"] 4 [cond let "#<lambda 0x101914b1bb8afba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [and cond let cond let cond let "#<lambda 0x13780d83cd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 3 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780d83cd44ed04>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d83cd44ed04>" funcall let progn] 4 [if save-excursion org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 6 [not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101914b1b48d53a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 7 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b48d53a6>"] 4 [if org-fold-core--check-spec progn if let org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780d200d44ed04>" funcall let progn if cond] 4 [set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 4 [or and save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1bf66e3a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 1 [not and if if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 4 [remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b2ef73a6>" funcall let progn if] 8 [let cond let "#<lambda 0x13780deb7d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [cond org-element-contents not cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>"] 2 [if let org-noter--parse-location-property let "#<lambda 0x13780ddaad44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780dc15d44ed04>"] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780dc15d44ed04>" funcall let progn if cond let] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b24a83a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc] 3 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b24a83a6>" funcall let] 3 [function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ddd8d44ed04>" funcall let] 4 [save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 4 [not cond org-element-type let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780dcb2544ed04>" funcall let] 4 [not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 17 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b20593a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d38cd44ed04>" funcall let] 4 [if org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1b7a123a6>" funcall] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835829d44ed04>" funcall let progn if] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835829d44ed04>" funcall let progn] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1b6808ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 2 [or let org-noter--doc-file-property let "#<lambda 0x101914b1b6808ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function] 1 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [or set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion] 12 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1378358f6544ed04>" funcall] 5 [or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch let] 8 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b50d4ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond] 4 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [or let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 4 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1b65beba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>"] 4 [unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if let] 4 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1ac40fba6>" funcall let progn if cond] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835a54544ed04>" funcall let] 5 [let progn progn if let org-noter--get-notes-window if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if] 4 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [if let progn if cond let cond let "#<lambda 0x137835cddd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 3 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835cddd44ed04>" funcall let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835c70544ed04>" funcall let progn] 5 [org-element--cache-verify-element and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 4 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 14 [if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 4 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 4 [not cond org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 5 ["#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37bfa3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 2 [let "#<lambda 0x137835b66544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835f98544ed04>" funcall let progn if cond] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let*] 4 [if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 5 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835eb3d44ed04>" funcall let] 4 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x137835eb3d44ed04>" funcall let progn if cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x137835eb3d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [progn let progn progn if let org-noter--get-notes-window if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835ed7544ed04>" funcall let progn if cond let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835d7b544ed04>" funcall let progn if] 4 [org-element-property vector setq if progn cond let cond let cond let "#<lambda 0x137835d7b544ed04>" funcall let progn if] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378339edd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if] 4 [or progn let progn progn if let org-noter--doc-goto-location if let progn progn if let org-noter-sync-prev-page-or-chapter let] 4 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b17d2cb3a6>" funcall let progn if] 4 [let cond let "#<lambda 0x137833899544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 5 ["#<lambda 0x101914b17ccce3a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let] 6 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b17ccce3a6>" funcall let progn] 8 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond] 1 [progn org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x137833bbad44ed04>" funcall let progn] 6 [cond org-element-type eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 4 [eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 5 [1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835f67544ed04>"] 4 [org-noter--doc-file-property let "#<lambda 0x137835f2ed44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1790c0ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x137833811544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 2 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch] 4 [set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction] 4 [if let org-noter--parse-location-property let "#<lambda 0x101914b17bababa6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378339ab544ed04>" funcall let progn if cond] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b17b6223a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137833f25544ed04>" funcall let progn if] 4 [save-restriction save-excursion org-outline-level funcall max format setq if while let* save-excursion if org-fold-show-children progn if while] 4 [and if org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 12 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x137833fd0544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 4 [pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 2 [cond let "#<lambda 0x137832414d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [setq org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 8 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137833d13d44ed04>" funcall let progn if cond] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x137833d3ed44ed04>" funcall] 4 [cons vector setq if progn cond let cond let cond let "#<lambda 0x137833d3ed44ed04>" funcall let progn if] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137833d3ed44ed04>" funcall let progn if cond] 4 ["#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall] 4 [cond let* while if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if] 4 [and not and or org-back-to-heading let* progn save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [mapcar "#<compiled 0x3267b47f835e5a0>" mapcar pdf-util-scale "#<compiled 0x44512bcfab1d87f>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c3701a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 2 [let cond let cond let "#<lambda 0x137833ac4544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [or setq org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 4 [progn if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 8 [or let progn progn if let org-noter--get-notes-window let progn progn if let org-noter-sync-prev-page-or-chapter let while let] 4 [run-hook-with-args-until-success or progn if let org-noter--parse-location-property let "#<lambda 0x13783320dd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion] 4 [set-buffer save-current-buffer org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13783325f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 5 [or and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 3 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b3209a33a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378333ea544ed04>" funcall let progn if] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch let] 4 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 1 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let* progn if org-noter--get-properties-end] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b322b8cba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x137833681d44ed04>" funcall let] 1 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map or let*] 4 [and cond org-element-type eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b32129f3a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b322231ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x13783316f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [or setq org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 4 [cond let "#<lambda -0xeb2020d9de0c6c>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion] 4 [let progn eval let* org-babel-execute:elisp funcall save-current-buffer let setq progn let* cond let* progn if let*] 1 [Automatic\ GC] 1570)) (25844 7283 506703 552000) nil]
