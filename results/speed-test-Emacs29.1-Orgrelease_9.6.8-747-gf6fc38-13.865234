
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([plist-get or let cond let* let* aset while let if let let progn if org-element-create let*] 4 [let* let* aset while let if let let progn if org-element-create let let save-excursion org-element-property-drawer-parser cond] 4 [and not if while let let progn if org-element-create let* save-excursion org-element-headline-parser cond setq let save-excursion] 4 [cond let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond let*] 4 [not cond org-element-type let* let* aset while let if let let progn if org-element-create let* save-excursion] 4 [let* aset while let if let let progn if org-element-create let* save-excursion org-element-section-parser cond setq let] 4 [while let org-element--deferred-resolve car org-element--deferred-resolve-force throw catch catch org-element--deferred-resolve-force-rec funcall let cond setq if while let] 4 [funcall let while let progn if cond cond let "#<lambda -0x4d7baed1651ca08>" funcall let while let if cond] 4 [let* if let* let let org-element--property if funcall let while let progn if cond cond let] 4 [< while let progn if let save-excursion org-element--get-node-properties nconc setcar save-restriction save-excursion save-current-buffer org-element--headline-deferred apply org-element--deferred-resolve-once] 4 [if let* let let org-element--property string= and org-element--headline-footnote-section-p apply org-element--deferred-resolve-once setq progn while let org-element--deferred-resolve car] 4 [looking-at-p if progn progn if let let* save-restriction save-excursion save-current-buffer org-element--headline-deferred apply org-element--deferred-resolve-once setq progn while] 4 [let let org-element--property org-element-property-2 apply org-element--deferred-resolve-once setq progn while let org-element--deferred-resolve car org-element--deferred-resolve-force throw catch catch] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 8 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 707 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2533 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 22 [let cond let cond let "#<lambda 0x8158eedf0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 116 [frame-edges window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x1019953555b803be>" funcall prog1 catch let progn if] 1 [not cond org-get-limited-outline-regexp concat re-search-forward if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 12 [mapc cond cond let "#<lambda 0x3b6624ee398b05c>" funcall catch let let* progn if org-element-ast-map let* progn if org-element-map] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let "#<lambda 0x811ce4728de8cd4>" funcall] 3 [org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 4 [cond org-element-type let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 7 [progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 12 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 19 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 28 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* progn if] 2 [cond let "#<lambda 0x811cfd930de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let] 3 [1- if save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion] 8 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 36 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn] 2 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree] 107 [while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 124 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 10 [let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p] 12 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811ce35a0de8cd4>" funcall prog1 catch] 2 [org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 8 [let "#<lambda 0x811ce30f0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>"] 6 [org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 20 [org-element-type let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let] 2 [org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 20 [or progn if let org-noter--parse-location-property let "#<lambda 0x811ce2100de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 47 [progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if] 2 [cond let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if] 8 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq] 4 [eq if org-noter-nov--get-current-view run-hook-with-args-until-success or progn unwind-protect save-current-buffer let let progn progn if let org-noter--get-current-view org-noter--get-view-info] 2 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion] 8 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 8 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 45 [if save-current-buffer progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point] 4 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 2 [cconv-make-interpreted-closure function org-element-lineage-map if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond let* progn if if] 4 [cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if] 10 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if] 4 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form] 17 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10199534a75a7bbe>" funcall] 3 [or set-buffer save-current-buffer progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 5 [catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn if] 8 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure] 13 [mode-line-eol-desc eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 3 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cd84e8de8cd4>" funcall prog1] 7 [and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn] 4 [or cond let* while if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 8 [org-element-lineage-map if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion] 4 [let* if let* < if let progn if cond let cond let "#<lambda 0x811cd8698de8cd4>" funcall prog1 catch] 7 [and not and or org-back-to-heading let* progn save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [cond org-element-type let* and let* let* < if let progn if cond let cond let "#<lambda 0x811ce67a8de8cd4>"] 7 [save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn] 8 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn] 7 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree] 12 [let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall] 4 [org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811ce6d80de8cd4>" funcall prog1 catch] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x811ce68d0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 6 [save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 16 ["#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch let let* progn if] 6 [cond let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cea7b0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 8 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 13 [not and if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function] 3 [save-current-buffer progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage] 12 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let] 7 [org-element--cache-verify-element and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let*] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [if let* org-element-begin = or and not and if if let save-restriction save-excursion save-excursion let if] 4 [cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch let] 8 [if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 46 ["#<lambda 0x811ce97d0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 8 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cd9fb8de8cd4>" funcall] 7 [let* and let* < if let progn if cond let cond let "#<lambda 0x811cd95c0de8cd4>" funcall prog1 catch] 6 [setq progn progn if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 7 [save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cf3400de8cd4>" funcall] 7 [org-element-type let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch let let*] 3 [let* and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let] 3 [org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199535588f1bbe>" funcall prog1] 3 [> and if let org-noter--parse-location-property let "#<lambda 0x811cf3010de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [if let* if let* and if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 11 [cond org-element-type let "#<lambda 0x13e2e2b9712eb63>" funcall catch let let* progn if org-element-ast-map let* progn if org-element-map let] 3 [or if let org-noter--parse-location-property let "#<lambda 0x811cf4b08de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function] 10 [save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if] 12 [let* progn if org-element-ast-map let* progn if org-element-map or let* progn if org-noter--get-properties-end if let cond] 4 [org-noter--relative-position-to-view let cond let "#<lambda 0x8158f3e88de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0x8158f5020de8cd4>" funcall prog1 catch let progn if cond let] 4 [or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [not cond org-get-limited-outline-regexp let* progn save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [org-element-contents mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall] 3 [symbolp cond org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x8158f5b48de8cd4>" funcall] 4 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 11 [let* if let* vector setq if progn cond let cond let cond let "#<lambda 0x8158f5998de8cd4>" funcall prog1] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn] 6 [save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 23 [let org-noter--parse-location-property let "#<lambda 0x811cf3e78de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond] 4 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let*] 16 [let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 32 [cond let "#<lambda 0x811cf2dd0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let] 6 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form] 5 [and not and or org-back-to-heading save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 4 [let* progn if org-element-ast-map let* progn if org-element-map let progn progn if let progn if org-noter--get-view-info] 5 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while] 4 [let* and let* < if let progn if cond let cond let "#<lambda 0x8158f2ec8de8cd4>" funcall prog1 catch] 3 [let* if let* org-element-begin = and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction] 4 [save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 40 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cf9128de8cd4>" funcall prog1 catch] 5 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x811cf99f8de8cd4>" funcall prog1 catch let progn if cond] 4 [funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 3 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c54b1e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 5 [cond org-element-type let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch let] 6 [symbolp cond org-element-type let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch] 2 [if save-excursion org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x12b25be3e5f2863>" tq-process-buffer tq-filter "#<compiled -0x732d3b7cb1ecdbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 8 [if let* let* < if let progn if cond let cond let "#<lambda 0x811ce5d40de8cd4>" funcall prog1 catch] 2 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 12 ["#<compiled -0x17ea0180f3d9b6d7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x12b25be3e5f2863>" tq-process-buffer tq-filter "#<compiled -0x732d3b7cb1ecdbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 16 [cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch let let*] 4 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c54f923>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 16 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cfef30de8cd4>"] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cfe108de8cd4>" funcall prog1] 3 [org-element-type let* and let* < if let progn if cond let cond let "#<lambda 0x811cfe108de8cd4>" funcall prog1] 4 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 20 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cfe6d8de8cd4>" funcall prog1] 6 [org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 44 [org-noter--doc-file-property let "#<lambda 0x811cf8cb8de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let] 8 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cf8390de8cd4>" funcall prog1] 8 [prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 8 [cond org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cf90e0de8cd4>" funcall prog1] 4 [if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 16 [kill-buffer "#<compiled -0x1c88ceba8ff968df>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x12b25be3e5f2863>" tq-process-buffer tq-filter "#<compiled -0x732d3b7cb1ecdbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page] 12 [or progn if let org-noter--parse-location-property let "#<lambda 0x811cff3b0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 2 [if let cond let* and let* < if let progn if cond let cond let "#<lambda 0x811cfaa20de8cd4>"] 5 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 12 [if let* if let* vector setq if progn cond let cond let cond let "#<lambda 0x811cfaf70de8cd4>" funcall] 3 [let* let org-fold-region if save-excursion org-fold-heading let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 16 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534b618ebbe>" funcall prog1 catch let progn if cond] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199534d2959bbe>" funcall prog1 catch let progn if] 3 [cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let] 3 [let* org-element-begin let* while if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 3 [+ floor - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cfbe80de8cd4>"] 5 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x10199534b5b073be>" funcall prog1 catch let progn if cond] 3 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cf48c8de8cd4>" funcall prog1 catch let progn if cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc4be0de8cd4>" funcall prog1 catch] 8 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry progn if while] 4 [pdf-cache--data-get pdf-cache-number-of-pages number-to-string progn condition-case ignore-errors or eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn] 3 [if let* if let* vector setq if progn cond let cond let cond let "#<lambda 0x811cc78b0de8cd4>" funcall] 9 [if save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 28 [org-element-type let* and let* let* < if let progn if cond let cond let "#<lambda 0x811cc4f50de8cd4>" funcall] 5 [org-element-type let* and let* org-element-end or let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq] 4 [pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 2 [derived-mode-p if org-noter--doc-file-property let "#<lambda 0x811cc2b20de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 4 [cond org-element-type let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x811cc2b20de8cd4>"] 4 [progn cond let cond let cond let "#<lambda 0x811cc2b20de8cd4>" funcall prog1 catch let progn if cond let] 4 [cond save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn] 4 [pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc2d38de8cd4>"] 5 [let* progn save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cc2048de8cd4>" funcall] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc3c10de8cd4>" funcall] 8 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 4 [let cond let "#<lambda 0x811cc35a8de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond] 5 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children cond] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10199534bf177bbe>" funcall prog1 catch let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 6 [if let* vector setq if progn cond let cond let cond let "#<lambda 0x811cc3130de8cd4>" funcall prog1 catch] 4 [org-element-type let* and let* let* < if let progn if cond let cond let "#<lambda 0x811cc3f80de8cd4>" funcall] 7 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading let* progn] 4 [or if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch] 2 [cond let* and let* let* < if let progn if cond let cond let "#<lambda 0x811cc6da0de8cd4>" funcall] 3 ["#<lambda 0x10199534b807ebbe>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc64c0de8cd4>" funcall prog1] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 6 [save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let] 4 ["#<compiled -0x732d3b7cb1ecdbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 9 [org-element-type let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x811ccb1b0de8cd4>" funcall] 4 [remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 20 [vector setq if progn cond let cond let cond let "#<lambda 0x811ccbd58de8cd4>" funcall prog1 catch let progn] 4 [let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if] 4 [org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cc7170de8cd4>" funcall prog1 catch let progn if cond] 4 [mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch] 4 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534bdaf9bbe>" funcall prog1 catch let progn if cond let] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 10 [let "#<lambda 0x811cc7d10de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [let* and let* < if let progn if cond let cond let "#<lambda 0x811cc8ea8de8cd4>" funcall prog1 catch] 9 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree] 8 [cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 2 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cc9278de8cd4>" funcall] 4 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x10199534d34ce3be>" funcall prog1 catch let progn if cond] 3 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn] 1 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 8 [let* progn if org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if] 5 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x811ccaea0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [progn if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 4 [or if let org-noter--parse-location-property let "#<lambda 0x10199534d1adbbbe>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 2 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 195 [org-element-type let* and let* let* < if let progn if cond let cond let "#<lambda 0x811ccabf0de8cd4>" funcall] 4 [save-current-buffer org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if] 12 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading let* save-excursion if org-fold-show-children cond let* progn if] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cca290de8cd4>" funcall] 4 [org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 4 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if if] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cdf528de8cd4>" funcall prog1] 4 [and if let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [cond let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x811cdfeb0de8cd4>" funcall] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cdfa00de8cd4>"] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 13 [if let* if let* vector setq if progn cond let cond let cond let "#<lambda 0x811cc1d20de8cd4>" funcall] 4 [list setq progn cond let cond let cond let "#<lambda 0x811cc1ce8de8cd4>" funcall prog1 catch let progn if] 4 [setq if progn cond let cond let cond let "#<lambda 0x811cc1b38de8cd4>" funcall prog1 catch let progn if] 4 [or if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let] 4 [list setq progn cond let cond let cond let "#<lambda 0x811cc1140de8cd4>" funcall prog1 catch let progn if] 4 [timer--activate timer-activate-when-idle run-with-idle-timer vector setq progn if if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc1e10de8cd4>" funcall prog1 catch] 3 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x811cc1e10de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let org-noter-sync-next-page-or-chapter] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x10199534fb2acbbe>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cd2e60de8cd4>" funcall prog1 catch let progn] 4 [or if let org-noter--parse-location-property let "#<lambda 0x10199534fcf17bbe>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 2 [if let* vector setq if progn cond let cond let cond let "#<lambda 0x811cd2b30de8cd4>" funcall prog1 catch] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cd2580de8cd4>"] 4 [let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cd2580de8cd4>" funcall prog1 catch let progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x811cd20d0de8cd4>" funcall prog1] 4 [or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199534fe73d3be>" funcall prog1 catch let progn] 3 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 8 [org-element-type let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x811cdef68de8cd4>" funcall] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 3 [eq cond let progn if cond let cond let "#<lambda 0x811cdeef0de8cd4>" funcall prog1 catch let progn if] 4 [progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let*] 4 [and progn if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534fd8073be>" funcall prog1 catch let progn] 3 [if org-noter--doc-file-property let "#<lambda 0x811cde5c8de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [let* let* < if let progn if cond let cond let "#<lambda 0x811cde790de8cd4>" funcall prog1 catch let] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x10199534fae093be>" funcall prog1 catch let progn if cond let] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 ["#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall] 4 [not cond org-element-type let* and let* < if let progn if cond let cond let "#<lambda 0x811cc5450de8cd4>"] 4 [not cond org-element-type let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch] 3 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811d41238de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 12 [derived-mode-p if org-noter--doc-file-property let "#<lambda 0x10199534fefb0c16>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond] 3 [and let* vector setq if progn cond let cond let cond let "#<lambda 0x811cc5450de8cd4>" funcall prog1 catch] 4 ["#<lambda 0x811cc5450de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [and if cond let "#<lambda 0x10199534faca9c16>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond] 2 [let cond let "#<lambda 0x811cc5e28de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond] 4 [eq cond org-noter--relative-position-to-view let cond let "#<lambda 0x811cde790de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 6 [or if let org-noter--parse-location-property let "#<lambda 0x811cde5c8de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [if cond let cond let "#<lambda 0x811cdeef0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cdef68de8cd4>" funcall prog1 catch] 4 [cond org-element-type let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>" funcall catch let] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cd20d0de8cd4>" funcall] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199534fd26cc16>" funcall prog1 catch let progn if] 6 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 11 [if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534fc364416>" funcall prog1 catch let progn] 2 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cd2b30de8cd4>" funcall] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10199534fb0db416>" funcall prog1 catch let progn] 4 [if let cond let* and let* vector setq if progn cond let cond let cond let] 4 [and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading outline-flag-subtree outline-hide-subtree if save-excursion if progn progn] 4 [let "#<lambda 0x10199534fcffe416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>"] 3 [numberp if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cc1140de8cd4>" funcall prog1 catch let] 7 [list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading] 8 [car eq if let cond let* and let* < if let progn if cond let cond] 4 [progn cond let cond let cond let "#<lambda 0x811cc1ce8de8cd4>" funcall prog1 catch let progn if cond let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc1d20de8cd4>" funcall prog1] 8 [org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199534f1d24c16>" funcall prog1 catch] 4 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cdfa00de8cd4>" funcall prog1 catch let progn if cond] 4 [let org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [org-noter--note-after-tipping-point and setq cond let cond let "#<lambda 0x811cdfeb0de8cd4>" funcall prog1 catch let progn if cond let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let] 6 ["#<lambda 0x811cdf528de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199534f084e416>" funcall prog1] 3 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cca290de8cd4>" funcall] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x10199534d2805416>" funcall prog1 catch let progn if cond] 8 [let org-element--cache-verify-element and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion] 4 [if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811ccabf0de8cd4>" funcall prog1 catch let progn] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if] 2 [if let* if let* < if let progn if cond let cond let "#<lambda 0x811ccaea0de8cd4>" funcall prog1] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let*] 4 [progn if cond let "#<lambda 0x10199534d3ee9416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc9278de8cd4>"] 4 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10199534b260fc16>" funcall prog1 catch let progn if] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc8ea8de8cd4>" funcall] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x10199534bb3e8c16>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>"] 2 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cc7240de8cd4>" funcall prog1 catch] 4 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading if] 8 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 6 [if let* vector setq if progn cond let cond let cond let "#<lambda 0x811cc7170de8cd4>" funcall prog1 catch] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10199534bbdd7416>" funcall prog1 catch let] 13 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children] 8 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199534b9b1a416>" funcall prog1 catch] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc8900de8cd4>" funcall prog1] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 6 [if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811ccb1b0de8cd4>" funcall prog1 catch let progn] 4 [prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc6118de8cd4>" funcall prog1] 4 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cc64c0de8cd4>" funcall prog1 catch let progn if cond] 4 [and let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534b9151416>" funcall prog1 catch let progn] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cc3130de8cd4>" funcall] 4 [consp and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let] 4 [or let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 4 [function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while let] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc3c10de8cd4>" funcall prog1] 3 [if let* if let* org-element-contents-end let cond let while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc2048de8cd4>"] 4 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 16 [mode-line-default-help-echo redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 7 [if org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0x811cc2d38de8cd4>" funcall prog1 catch let progn if cond] 4 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 12 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534b423ec16>" funcall prog1 catch let progn if cond] 5 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc2b20de8cd4>" funcall prog1 catch] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cc4f50de8cd4>"] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10199534b4109416>" funcall prog1 catch] 5 [let* while if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if] 4 [window-edges window-inside-pixel-edges pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 4 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cc4be0de8cd4>" funcall prog1 catch let progn if cond] 6 [org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children] 4 [and progn if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534b5396416>" funcall prog1 catch let progn] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 6 [if org-noter--doc-file-property let "#<lambda 0x811cfbe80de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 ["#<compiled 0x12b3bf2be5f2863>" tq-process-buffer tq-filter "#<compiled -0x732d3b7cb1ecdbb>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c540ea3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 6 [if org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0x811cfa310de8cd4>" funcall prog1 catch let progn if cond] 4 [let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>" funcall] 2 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cf6040de8cd4>" funcall] 4 [funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond] 2 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cfaf70de8cd4>" funcall] 4 [not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199534b68f7416>" funcall prog1 catch let progn if cond] 3 [org-element-type let* and let* let* < if let progn if cond let cond let "#<lambda 0x811cfaa20de8cd4>" funcall] 4 [if let* if let* let* < if let progn if cond let cond let "#<lambda 0x811cff3b0de8cd4>" funcall] 7 [let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cf90e0de8cd4>"] 4 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 2 [cconv-fv cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cf8cb8de8cd4>" funcall] 4 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if save-excursion] 9 [or if let org-noter--parse-location-property let "#<lambda 0x10199534b0809c16>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc] 3 [cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cfe6d8de8cd4>" funcall prog1 catch let progn if] 4 [numberp if cond org-noter--compare-locations and if cond let "#<lambda 0x10199534b3594c16>" funcall prog1 catch let progn if cond] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cfe108de8cd4>"] 3 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 4 [or if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc] 2 [org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0x811cfef30de8cd4>" funcall prog1 catch let progn if cond let] 3 [if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 8 [throw cond let while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction] 4 [car eq if let cond let* and let* vector setq if progn cond let cond let] 6 [and if cond let "#<lambda 0x10199534b324bc16>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond] 4 [if let* if let* org-element-end let while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if] 4 [progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>" funcall catch] 3 [pdf-cache-get-image pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 6 [or org-back-to-heading let* progn save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-lineage-map if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond let* progn] 4 [cond org-element-type memq not and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x8158f2618de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 9 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x8158f2ec8de8cd4>" funcall prog1 catch let progn if cond] 9 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x8158f2aa0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 5 [and let* < if let progn if cond let cond let "#<lambda 0x811cf2fd8de8cd4>" funcall prog1 catch let] 7 [org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [and and let* let let org-element--property org-element-parent setq while let org-element-lineage let* org-up-heading-safe while save-excursion progn] 4 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1019953544829416>" funcall prog1 catch let] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cf2dd0de8cd4>" funcall prog1 catch] 2 [progn progn if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if] 6 [cond let cond let "#<lambda 0x811cf3e78de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cf22a8de8cd4>" funcall prog1] 3 [org-noter--compare-locations and if cond let "#<lambda 0x1019953545c1dc16>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc] 3 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8158f5998de8cd4>"] 3 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if] 3 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x8158f3038de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8158f3e88de8cd4>" funcall prog1] 7 [let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond let "#<lambda 0x13e2e2b9712eb63>"] 7 [save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 4 [not cond org-element-type let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>" funcall catch let let* progn if org-element-ast-map] 2 [progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if] 6 [and cond let cond let cond let "#<lambda 0x811cf4530de8cd4>" funcall prog1 catch let progn if cond let] 3 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion] 4 [symbolp cond org-element-contents mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x811cf4060de8cd4>" funcall prog1] 3 [if let* progn if org-element-ast-map let* progn if org-element-map save-excursion org-noter--show-note-entry let while let cond let*] 4 [keymap-canonicalize redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>" funcall catch let] 2 [let org-element--cache-verify-element and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading if] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cf5f20de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 9 [if org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199535441f8416>" funcall] 2 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cf3b50de8cd4>" funcall] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 8 [window-at-side-p mode-line-default-help-echo redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 4 ["#<compiled 0x1b7789821214607f>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c379da3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 2 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cf3400de8cd4>" funcall] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cf3400de8cd4>" funcall prog1 catch] 4 [save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x811cd9018de8cd4>" funcall] 7 [if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 8 [let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>"] 2 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading let*] 4 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let* save-excursion] 4 [let* and let* < if let progn if cond let cond let "#<lambda 0x811ce97d0de8cd4>" funcall prog1 catch] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811ce9960de8cd4>" funcall prog1 catch] 4 [org-element-parent setq while let org-element-lineage let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811ce8d48de8cd4>" funcall prog1 catch let progn if cond] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534bdfb5416>" funcall] 4 [let cond let cond let "#<lambda 0x811ce9440de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 6 [and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10199534bc236c16>" funcall prog1 catch let] 2 [if let progn if cond let cond let "#<lambda 0x811ce8a38de8cd4>" funcall prog1 catch let progn if cond] 3 [and or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>" funcall catch] 6 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0x811ceac50de8cd4>" funcall prog1 catch let progn if cond let] 2 [let* org-element-end let while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction] 4 ["#<lambda 0x10199534bfa42416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc] 6 [> and if let org-noter--parse-location-property let "#<lambda 0x10199534a452e416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>"] 3 [symbolp cond org-element-type let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 2 [member if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction] 4 [pdf-info-query--parse-response "#<compiled 0x12b25be3e5f2863>" tq-process-buffer tq-filter "#<compiled -0x732d3b7cb1ecdbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 7 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811ce68d0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c370ba3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 2 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 4 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811ce0378de8cd4>" funcall prog1 catch let progn if cond let] 6 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534a5ab3416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>"] 2 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x811ce67a8de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 3 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map let let] 2 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x811cd8698de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 4 [and if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 4 [not cond org-element-type let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc] 3 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn] 1 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x811cd84e8de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 9 [and if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534a7eba416>" funcall prog1 catch let progn if] 3 ["#<lambda 0x811ce7150de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond let "#<lambda 0x13e2e2b9712eb63>" mapc] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x10199534a7f34c16>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>"] 3 [cond org-element-type let* if let* setq cond save-excursion let let org-fold-core-get-folding-spec if org-fold-folded-p not or and] 9 [and not and or org-back-to-heading if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811ceffc0de8cd4>" funcall] 8 [mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let "#<lambda 0xb2e3003d712eb63>" funcall catch] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x811ceec68de8cd4>" funcall prog1 catch] 3 ["#<lambda 0x1019953556707416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc] 2 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv] 3 [let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn if] 4 [and let* org-element-begin < or let if let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x811ce2100de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>"] 9 [eq if let cond let* and let* and if let* save-current-buffer org-element--cache-find progn if if setq] 4 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 8 [if org-noter--doc-file-property let "#<lambda 0x811ce3918de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond] 3 [org-element-type let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond cond let "#<lambda 0xb2e3003d712eb63>" mapc cond let] 3 [let cond let "#<lambda 0x811ce30f0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond cond] 3 [if let org-noter--parse-location-property let "#<lambda 0x811ce35a0de8cd4>" funcall prog1 catch let progn if cond let "#<lambda 0x13e2e2b9712eb63>" mapc cond] 4 [cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map let let progn] 3 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x811cfd780de8cd4>" funcall] 9 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x1019953557784416>" funcall prog1 catch let progn if cond let "#<lambda 0xb2e3003d712eb63>"] 2 [if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if] 4 [org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101995355733b416>" funcall prog1] 2 [cond org-element-type let* and let* org-element-end <= and while let cond let* save-restriction save-excursion save-current-buffer catch] 4 [apply pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 5 [let* and let* org-element-begin goto-char "#<lambda 0xbf40ac43ba910>" funcall setq progn if while catch let org-element-lineage-map if or] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let progn if] 6 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading let* save-excursion if org-fold-show-children cond let* progn if] 4 [save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 4 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 9 [Automatic\ GC] 971)) (25847 64146 876907 745000) nil]
