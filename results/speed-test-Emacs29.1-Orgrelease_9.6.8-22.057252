
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([while let save-restriction save-excursion save-excursion let if catch let* save-restriction save-excursion org-element-org-data-parser let save-excursion org-element-parse-buffer org-element-contents] 1 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let cond let progn if org-element-copy let*] 4 [and while let if org-element--collect-affiliated-keywords let cond setq let save-excursion if let* org-element--current-element org-element-copy let* if] 4 [cond org-element-contents not cond cond let "#<lambda 0x7d59d6173706197>" funcall catch let let* org-element-map let let cond let] 4 [cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let cond let progn if org-element-copy let* if] 8 [let* progn cond setq let save-excursion if let* org-element--current-element org-element-copy let* if while let save-excursion org-element--parse-elements] 4 [cconv-make-interpreted-closure function org-element-map let let cond let progn if org-element-copy let* if while let save-excursion org-element--parse-elements] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [if let* save-excursion org-element-section-parser cond setq let save-excursion if let* org-element--current-element org-element-copy let* if while let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 8 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let] 4 [let save-excursion org-element-property-drawer-parser cond setq let save-excursion if let* org-element--current-element org-element-copy let* if while let save-excursion] 4 [upcase concat let* while let progn if save-excursion org-element--get-node-properties let* save-excursion org-element-headline-parser cond setq let save-excursion] 4 [org-get-limited-outline-regexp let* progn cond setq let save-excursion if let* org-element--current-element org-element-copy let* if while let save-excursion] 4 [let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond let* if] 4 [nconc list let let* save-excursion org-element-headline-parser cond setq let save-excursion if let* org-element--current-element org-element-copy let* if] 4 [let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion] 4 [if if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 86 [null save-excursion let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 107 [let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 73 [let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer] 4 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 596 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2419 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 4 [progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 175 [progn unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 87 [and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 120 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 40 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 19 [cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 39 [and if save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 331 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 16 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 4 [null save-excursion let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 135 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 68 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map save-excursion] 4 [let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 129 [not cond org-element-type eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 4 [while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 112 [user-error or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 770 [save-excursion let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 116 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e213650fc9ac>" funcall let progn if cond] 4 [org-element-property let* while if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if] 4 [unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 52 [org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 71 [if let org-element--cache-verify-element and if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e2311d0fc9ac>" funcall let] 7 [or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch let] 24 [set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block] 16 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree] 100 [cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction] 91 [org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 22 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e20d4d0fc9ac>" funcall let] 4 [while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 42 [org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 76 [save-excursion org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 43 [or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 31 [let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let* org-element-map] 4 [derived-mode-p not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 12 [org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 8 [save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 7 ["#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall] 4 [if save-restriction save-excursion org-outline-level funcall max format setq if while let* save-excursion if org-fold-show-children progn if] 8 [or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 86 [save-current-buffer org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 8 [org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer] 8 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let*] 4 [or let org-noter--doc-file-property let "#<lambda 0x1244e2059d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e2059d0fc9ac>" funcall let progn if] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e2059d0fc9ac>" funcall let progn if cond] 4 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 19 [or cdr let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 81 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 40 [let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect save-current-buffer let if let progn] 4 [if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 14 [let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 4 [save-excursion let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 86 [and save-excursion org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 78 [or set-buffer save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 8 [progn condition-case if if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion] 59 [org-element--cache-active-p and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 8 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e253750fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 48 [not or cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 394 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion] 12 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 20 [save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 53 [or set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 4 [org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let] 55 [cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a45c12372e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 6 [let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 84 [if unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 3 [let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 74 [org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 38 [let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 65 [not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if] 4 [org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 20 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e4f4350fc9ac>" funcall let] 4 [if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch] 30 [progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 89 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4e4fd0fc9ac>" funcall let progn if cond let] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 19 [org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if] 4 [if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 8 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e400d50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 2 [cdr let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 4 [org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 20 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure] 6 [re-search-backward or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 64 [funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>"] 4 [progn cond let cond let cond let "#<lambda 0x1244e405250fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let* org-element-map let progn progn] 4 [let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 40 [if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 39 [org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 26 [let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 16 [if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e40b4d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 8 [while let dotimes let while let dotimes let measure-time setq let progn eval let* org-babel-execute:elisp funcall] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 4 [let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 50 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 12 [let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion] 33 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244e7a4f50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7a4f50fc9ac>" funcall let progn if] 4 [org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 4 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 897 [org-element--cache-active-p and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 22 [org-element-type let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 25 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 14 [if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 17 [let "#<lambda 0x1244e7dbfd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map or let* progn if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7abdd0fc9ac>" funcall let progn] 4 [and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 12 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7abdd0fc9ac>" funcall let progn if] 4 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 46 [progn or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--doc-approx-location let progn progn if] 2 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a45137ef2e>" funcall let progn if] 4 [or if let org-noter--parse-location-property let "#<lambda 0x1244e79d050fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [let cond let "#<lambda 0x1244e79d050fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map or] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7978d0fc9ac>" funcall let progn] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7978d0fc9ac>" funcall let progn if cond] 5 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if] 4 [cond let* org-noter--parse-root org-element-contents if let progn progn if let progn if org-noter--get-view-info let progn progn] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e795750fc9ac>" funcall let progn] 4 [if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let] 4 [org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 23 [if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 2 [catch or org--property-get-separator let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 16 [let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7b7850fc9ac>" funcall let progn if cond] 4 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 28 [progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch] 4 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 29 [let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let] 20 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e78efd0fc9ac>" funcall let progn] 4 [setq if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 12 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a45424172e>" funcall let progn if cond let] 6 [if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 4 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 28 [org-element--cache-active-p and if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1e4a31f63997a963>" tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c3788e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page] 4 [save-current-buffer org-element--cache-active-p and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a45024572e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e48ced0fc9ac>"] 4 [save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage let if or org-back-to-heading] 8 [if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 40 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 8 [or let org-noter--doc-file-property let "#<lambda 0x1244e4a6b50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244e490e50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e490e50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e48d5d0fc9ac>" funcall] 8 [cond let while let let* save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5c0c87f2e>" funcall let progn if cond] 17 [not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e713350fc9ac>" funcall let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e713350fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 8 [let* org-noter--doc-get-page-slice let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 8 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 2 [symbolp cond org-element-type let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244e7c72d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [not cond org-get-limited-outline-regexp let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7cf750fc9ac>"] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7cf750fc9ac>" funcall] 4 [cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let*] 4 [and not and or org-back-to-heading if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if] 4 [let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 28 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e7c0250fc9ac>" funcall let] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 16 [org-element--cache-active-p if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 8 [list setq progn cond let cond let cond let "#<lambda 0x1244e7f2c50fc9ac>" funcall let progn if cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7f2c50fc9ac>" funcall let progn if cond] 4 [if org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a5c0be472e>" funcall] 2 [derived-mode-p not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 4 [if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if] 8 [run-hook-with-args redisplay--pre-redisplay-functions redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 3 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a4454e0f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 3 [and if org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 12 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7ffe50fc9ac>" funcall let progn if cond] 4 [if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 3 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 61 [and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children cond] 4 [org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e7e5f50fc9ac>"] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x1244e7e5f50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [or and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while let dotimes let measure-time setq] 4 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e723a50fc9ac>" funcall] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e723a50fc9ac>" funcall let progn] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion] 8 [save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 37 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility] 12 [mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let* org-element-map let let] 4 ["#<compiled 0x1e4a3198b997a963>" tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 3 [condition-case if if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 6 [org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 4 [not and while let org-element-lineage let if let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 4 ["#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let* org-element-map let] 4 [org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 28 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eaa62d0fc9ac>" funcall let progn] 4 [let org-noter--doc-file-property let "#<lambda 0x1244eaa62d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [and save-excursion org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 23 [memq and progn or progn let progn progn if let org-noter--get-notes-window let progn progn if let] 4 [set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 4 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 14 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244eaa1250fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [and if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244eaa1250fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 22 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea631d0fc9ac>"] 4 [or set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion] 8 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 8 [cond org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x1244ea6ee50fc9ac>" funcall let progn if cond let] 4 [and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 30 [and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea6ee50fc9ac>" funcall let progn if] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 12 [and if if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 4 [let cond let "#<lambda 0x1244eab2550fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [not cond org-get-limited-outline-regexp concat re-search-forward if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 8 [pdf-cache--data-get pdf-cache-number-of-pages number-to-string progn condition-case ignore-errors or eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn] 7 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a44e576f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 2 [or let org-noter--doc-file-property let "#<lambda 0x1244eab0850fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [- 1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer] 4 [image-mode-window-put image-set-window-vscroll image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let] 3 [set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 8 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb176d0fc9ac>" funcall] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb176d0fc9ac>" funcall let] 8 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb176d0fc9ac>"] 4 [if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 8 [vector setq if progn cond let cond let cond let "#<lambda 0x1244eb539d0fc9ac>" funcall let progn if cond] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb539d0fc9ac>" funcall let progn] 4 [cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [let "#<lambda 0x101bd3a44f2c672e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let] 2 [and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch] 8 [org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244eb7fdd0fc9ac>"] 4 [org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch let save-restriction] 42 [cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let] 5 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb138d0fc9ac>" funcall let progn] 4 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb138d0fc9ac>" funcall] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb123d0fc9ac>" funcall let progn if] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea70150fc9ac>" funcall let] 4 [if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 16 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244ea70150fc9ac>" funcall] 4 [let "#<lambda 0x1244ea70150fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 24 [org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 49 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244eb7c4d0fc9ac>" funcall let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a44631ef2e>" funcall let progn if] 8 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244eb63850fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 4 [or and save-excursion org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion] 6 [setq org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 4 [org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 22 [and if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 18 [org-knuth-hash mod if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children] 5 [or progn if let org-noter--parse-location-property let "#<lambda 0x1244e4c06d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e4c06d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 50 [if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 16 [cond let cond let cond let "#<lambda 0x1244e4fafd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [setq org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4202d0fc9ac>" funcall let progn] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4202d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [cond let "#<lambda 0x101bd3a4531f6f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 3 ["#<compiled -0x17ea01a13e235fd7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1e4a3198b997a963>" tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 9 [while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e42b3d0fc9ac>" funcall let progn] 4 [if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 16 ["#<lambda 0x101bd3a452b31f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4d91d0fc9ac>" funcall let progn] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244e4b54d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [let cond let "#<lambda 0x1244e4b54d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [or set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion] 8 [let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 17 [symbolp cond org-element-type let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4cc0d0fc9ac>" funcall let] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4cc0d0fc9ac>" funcall] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a5ce98cf2e>" funcall let progn] 3 [cond org-element-type let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4daa50fc9ac>" funcall] 4 [progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 8 [org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 20 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5cc64f72e>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4b8cd0fc9ac>" funcall let progn] 4 [let "#<lambda 0x1244e4b8cd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [if if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 8 [progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea95dd0fc9ac>" funcall let progn if cond] 4 [cond org-element-contents mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>"] 4 [symbolp cond org-element-type let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let* org-element-map let let] 3 [not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eaf98d0fc9ac>" funcall let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eaf98d0fc9ac>" funcall let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101bd3a5d4db872e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 3 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a5d4db872e>" funcall let progn if cond let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eaf83d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea9e150fc9ac>" funcall let progn] 8 ["#<lambda 0x1244ea9e150fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [if let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 17 [save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 8 [org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 20 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea9be50fc9ac>" funcall let progn if cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea89ad0fc9ac>" funcall let] 4 [or let org-noter--doc-file-property let "#<lambda 0x101bd3a5d5e0e72e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea865d0fc9ac>"] 4 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244ea865d0fc9ac>" funcall] 4 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 4 [function setq let let* org-element-map or let* progn if org-noter--get-properties-end if let cond let* progn progn] 8 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 4 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244ea830d0fc9ac>" funcall let progn if cond] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e6866d0fc9ac>" funcall let progn] 4 [progn if cond let cond let "#<lambda 0x1244e6866d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [not if progn if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e6b09d0fc9ac>" funcall let progn if] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point org-element-lineage let if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond] 4 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c5441e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 8 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a0d547972e>" funcall let progn] 3 [pdf-info--normalize-file-or-buffer pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 4 [save-excursion org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 15 [save-current-buffer progn if org-element--cache-sync if if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading if] 8 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a0d52a5f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [cond let progn if cond let cond let "#<lambda 0x1244e6a8d50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [or if let org-noter--parse-location-property let "#<lambda 0x101bd3a0d464ef2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e6aa050fc9ac>" funcall let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e6a08d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e6a08d0fc9ac>" funcall let progn] 4 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 17 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e6a13d0fc9ac>"] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244e66aed0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c544c63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 1 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e66f1d0fc9ac>" funcall let progn if] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e66f1d0fc9ac>" funcall let progn] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e66f1d0fc9ac>" funcall] 4 [featurep and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 8 [or set-buffer save-current-buffer org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e6667d0fc9ac>" funcall] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children cond let* progn if] 4 [pdf-info-query--escape mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb46550fc9ac>" funcall let progn if cond] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 24 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb46550fc9ac>"] 4 [eq cond let progn if cond let cond let "#<lambda 0x1244eb4b5d0fc9ac>" funcall let progn if cond let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb4b5d0fc9ac>" funcall let progn] 4 [let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [pdf-history-push pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 8 [eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 14 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility] 12 [or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5cc02072e>" funcall let progn] 6 [and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 11 [save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 23 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eac6950fc9ac>" funcall let progn] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244eac6950fc9ac>" funcall] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a5d55cc72e>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 6 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5ce926f2e>"] 2 ["#<compiled -0xacbb0bc9b011650>" filtered-frame-list frames-on-display-list "#<subr F616e6f6e796d6f75732d6c616d626461_anonymous_lambda_2>" internal--before-save-selected-window pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 1 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eac5050fc9ac>" funcall let] 4 [if let progn if cond let cond let "#<lambda 0x1244eac5050fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [if org-element-property < if let progn if cond let cond let "#<lambda 0x1244eac5050fc9ac>" funcall let progn if] 4 [let "#<lambda 0x101bd3a5d5381586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [cdr car let* make-org-noter--view-info let progn progn if let progn if org-noter--get-view-info let progn progn if] 4 [progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244eac6950fc9ac>" funcall let progn if cond] 4 [and cond let cond let cond let "#<lambda 0x1244eac6950fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 8 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5cc33ad86>" funcall let progn if] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244eb54bd0fc9ac>" funcall] 4 [let progn if cond let cond let "#<lambda 0x1244eb54bd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 22 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 12 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb46550fc9ac>" funcall] 3 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb46550fc9ac>"] 4 [pdf-view-image-size pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 10 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e6667d0fc9ac>" funcall let] 3 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry progn if while] 8 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a5cf405586>" funcall let progn if cond] 4 [and if let org-noter--parse-location-property let "#<lambda 0x1244e6a34d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [let "#<lambda 0x1244e6a34d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [- image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5c936ad86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 2 [cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch let] 4 [or and if if setq let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 14 [progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [cconv--analyze-function cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function] 4 [save-current-buffer org-element--cache-active-p if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility] 4 ["#<lambda 0x1244e6a08d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e6a08d0fc9ac>" funcall let progn if cond] 4 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a0d4a06d86>"] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e6aa050fc9ac>" funcall let progn if] 4 [cond org-element-type memq not and while let org-element-lineage let* if let org-up-heading-safe while save-excursion progn if] 4 [let cond let "#<lambda 0x1244e6a8d50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e6a8d50fc9ac>" funcall let progn if] 4 [org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch let let* org-element-map] 2 [if org-element-property < if let progn if cond let cond let "#<lambda 0x1244e6aa2d0fc9ac>" funcall let progn if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e6aa2d0fc9ac>" funcall let progn] 4 [let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region] 8 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a0d513d586>" funcall let progn if cond] 39 [org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [funcall catch let let* org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes] 2 [and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 8 [org-element--cache-active-p and if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e681950fc9ac>" funcall] 4 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a0d4ac0d86>" funcall let progn if] 4 [let progn if cond let cond let "#<lambda 0x1244e6866d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 4 [org-element--cache-active-p if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if] 4 [or let org-noter--doc-file-property let "#<lambda 0x101bd3a0d49c1586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 2 [not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 4 [not and cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall] 4 [not if progn if let org-element-at-point let org-before-first-heading-p if org-fold-show-children cond let* progn if if org-show-set-visibility] 4 [or let org-noter--doc-file-property let "#<lambda 0x1244ea96c50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea96c50fc9ac>" funcall let] 4 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 7 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a5d4e5a586>" funcall let progn if cond let] 6 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5d4c94586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 6 [unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if let] 7 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 ["#<lambda 0x1244ea95dd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea95dd0fc9ac>" funcall] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea95dd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [memq and cond let* while if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 7 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5cc653d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond] 4 [setq if progn cond let cond let cond let "#<lambda 0x1244e4ba650fc9ac>" funcall let progn if cond let] 4 [function setq let let* org-element-map let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a5cc8c4d86>" funcall let progn if cond] 11 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5cc8c4d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4b8cd0fc9ac>" funcall let] 3 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4bd9d0fc9ac>" funcall let progn if cond] 4 [org-element-type eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 8 [setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 4 [and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 13 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e4c6ad0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion] 4 [if if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 9 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a45e86bd86>" funcall let progn if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4b54d0fc9ac>" funcall let progn] 4 [mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let* org-element-map let progn] 4 [org-element--cache-active-p and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [let "#<lambda 0x1244e4d91d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a452b8fd86>" funcall let progn if] 17 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a452b8fd86>" funcall] 8 [macroexp-macroexpand macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x1244e4d1150fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [or cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 4 [progn cond let cond let cond let "#<lambda 0x1244e42b3d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e42b3d0fc9ac>" funcall] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a4530ced86>" funcall let progn if cond let] 4 [and if cond let "#<lambda 0x101bd3a4530ced86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e420050fc9ac>"] 4 [not cond format let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [if cond let "#<lambda 0x101bd3a45263b586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>"] 3 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244e4202d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion] 4 [ignore-errors or eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 3 [cond let "#<lambda 0x1244e4f69d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4f69d0fc9ac>" funcall] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e4f69d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [or let org-noter--doc-file-property let "#<lambda 0x1244e4f69d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 8 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb6bf50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 8 [cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb6bf50fc9ac>" funcall let progn if] 4 [progn if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 4 [cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb63850fc9ac>" funcall let progn if cond] 4 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a44b413586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb7c4d0fc9ac>" funcall let] 4 [progn if org-element--cache-sync if if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min] 4 [org-element-contents not cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall] 4 [org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244ea70150fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244ea70150fc9ac>" funcall let] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a446017d86>" funcall let progn if] 4 [cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb123d0fc9ac>" funcall let progn if] 4 [and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading outline-flag-subtree outline-hide-subtree if save-excursion if progn progn] 4 [save-current-buffer not if progn if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [< if let progn if cond let cond let "#<lambda 0x1244eb7fdd0fc9ac>" funcall let progn if cond let] 4 [or let org-noter--doc-file-property let "#<lambda 0x101bd3a449933d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 3 [not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 4 [or set-buffer save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction] 12 [or let org-noter--doc-file-property let "#<lambda 0x101bd3a44bb39d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a44bb39d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond] 4 [let cond let cond let "#<lambda 0x1244eb176d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [or let org-noter--doc-file-property let "#<lambda 0x101bd3a44aa88d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244ea88bd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea88bd0fc9ac>" funcall let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea88bd0fc9ac>" funcall let progn if] 4 [function setq let let* org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn] 4 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c54cda3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 6 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let] 2 [or if let org-noter--parse-location-property let "#<lambda 0x1244eaa8b50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a44f7fa586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond] 2 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244ea631d0fc9ac>" funcall let progn if cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea631d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a448788d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1e4a3198b997a963>" tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eaa62d0fc9ac>" funcall let] 4 [if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if save-excursion if progn] 4 [while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer] 4 [cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let] 2 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244ea40fd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [progn aref progn progn org-element--cache-root let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p] 4 [symbolp cond org-element-type let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [or let org-noter--doc-file-property let "#<lambda 0x101bd3a44fca9d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 2 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea78350fc9ac>" funcall] 4 [and cond org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea78350fc9ac>" funcall let] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a44eeaad86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 7 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea49450fc9ac>" funcall] 4 [let "#<lambda 0x101bd3a44efcf586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea7d950fc9ac>"] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea7d950fc9ac>" funcall let progn if] 4 [or let org-noter--doc-file-property let "#<lambda 0x1244ea7d950fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction] 4 [cond let cond let "#<lambda 0x1244ea7d950fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [if save-restriction save-excursion org-outline-level funcall let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a44e1bc586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 4 [pdf-info-query--parse-response "#<compiled 0x1e4a3198b997a963>" tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 3 [let "#<lambda 0x1244e7e5f50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 2 [setq cond let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let] 6 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a444a7e586>" funcall let progn] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7edad0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [or if let org-noter--parse-location-property let "#<lambda 0x1244e7edad0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7ffe50fc9ac>" funcall let progn] 2 [pdf-info-query--parse-response "#<compiled 0x1e4a31f63997a963>" tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c549163>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 2 [and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a5c09a2586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 3 [if let org-noter--parse-location-property let "#<lambda 0x101bd3a5c09a2586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 4 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 8 [cond let cond let "#<lambda 0x1244e7c0250fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a5c1041586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 1 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7cf750fc9ac>" funcall let progn] 4 [eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 4 [org-element-contents mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall] 4 [if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 3 [let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e713350fc9ac>" funcall let progn] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 12 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e48d5d0fc9ac>" funcall let progn if cond] 4 [org-element--cache-active-p if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e490e50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e490e50fc9ac>"] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a451d5a586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [org-noter--get-location-left let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e49d1d0fc9ac>" funcall let progn] 2 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch let] 4 [cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let] 2 [eq and cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7273d0fc9ac>"] 4 [org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if] 4 [or setq org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 4 [cond let "#<lambda 0x1244e787cd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [symbolp cond org-element-type eq if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a4616ffd86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7bd0d0fc9ac>" funcall let] 6 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a461f26586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let "#<lambda 0x1244e7b7850fc9ac>" funcall let progn if] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7b7850fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a460293d86>" funcall let] 8 [or set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a460293d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn] 2 [if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [or or set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion] 4 [let org-noter--doc-file-property let "#<lambda 0x1244e7978d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e79d050fc9ac>" funcall let progn if] 5 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a457d5bd86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 2 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7dbfd0fc9ac>"] 5 [or or set-buffer save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let] 4 [cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch let let*] 4 [cond let cond let cond let "#<lambda 0x1244e434a50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 3 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e434a50fc9ac>"] 4 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 4 [cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [let cond let cond let "#<lambda 0x1244e40b4d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 5 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e40b4d0fc9ac>" funcall let progn if cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map save-excursion] 4 [progn progn let* org-knuth-hash mod if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point and] 4 [if org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a452bf7d86>" funcall] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e43f150fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a45b351586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [eq if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 4 [eq and if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let*] 4 [run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 4 [and if progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let] 4 [and if cond let "#<lambda 0x101bd3a45b0e4d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 4 [cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if] 2 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4e4fd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [cond let "#<lambda 0x1244e4f4350fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [cond let progn if cond let "#<lambda 0xdb5049c8b75e149>" mapc cond let "#<lambda 0xdb5049c8b75e149>" funcall catch let let* org-element-map] 4 [not cond org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 5 [org-element--cache-active-p if let org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a45db58d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 6 [mapcar "#<compiled 0x4b21a21a2aaa5a0>" mapcar pdf-util-scale "#<compiled -0x6a7084438d47f81>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c375ae3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 2 [if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion] 4 [cond let cond let "#<lambda 0x1244e3cb0d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 6 [cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch let let* org-element-map let let progn progn] 2 [if let org-noter--get-current-view org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244e3c3550fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e3c3550fc9ac>"] 4 [progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a45cc23d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 6 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if] 4 [and let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [or set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let] 6 [cond org-element-type eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 6 [let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e253750fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [org-knuth-hash mod if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if if] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn] 1 [if let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e209fd0fc9ac>" funcall let progn if cond] 6 [save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 4 [or let org-noter--doc-file-property let "#<lambda 0x101bd3a45469d586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e200cd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond let] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e200cd0fc9ac>" funcall let progn if cond] 8 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 4 [org-element--cache-active-p and if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [or and save-excursion org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 4 [if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if] 4 [eq not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e2387d0fc9ac>" funcall] 4 [cond org-element-contents not cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>"] 4 [let* progn let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e20d4d0fc9ac>" funcall let] 5 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244e20d4d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [org-noter--relative-position-to-view let cond let "#<lambda 0x1244e20d4d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn] 4 [org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 4 [let cond let "#<lambda 0x1244e2311d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a46250fd86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e2cf250fc9ac>" funcall] 1 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e27f950fc9ac>"] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a46304fd86>" funcall let progn] 2 [cond let org-noter--note-after-tipping-point and setq cond let cond let "#<lambda 0x1244e22b850fc9ac>" funcall let progn if cond let] 5 [org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a46eb39586>"] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x273964a8dbc223c>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 3 [eq not if if if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while] 4 [let progn eval let* org-babel-execute:elisp funcall save-current-buffer let setq progn let* cond let* progn if let*] 2 [Automatic\ GC] 1540)) (25844 6279 205614 309000) nil]
