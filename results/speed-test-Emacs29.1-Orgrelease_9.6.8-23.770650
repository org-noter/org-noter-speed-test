
[profiler-profile "28.1" cpu #s(hash-table size 1095 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 1476 [not cond let while let let catch let* org-element-map let progn progn if let progn if] 4 [progn unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 88 [let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 80 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x273964a8dbc223c>" funcall] 4 [let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 76 [and org-remove-flyspell-overlays-in progn if org-fontify-drawers font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e8ce4c12d7c43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let*] 4 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 487 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2133 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 33 [mapconcat pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c3755e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 3 [cond let cond let "#<lambda 0x1244e2245d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [and save-excursion org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 60 [user-error or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 776 [and save-excursion org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 23 [or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 111 [let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region] 4 ["#<compiled 0x17f991c9c3ecc529>" mapcar pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1e4a3175d997a963>" tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c3740a3>" mapcar] 5 [and if save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 348 [let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let* org-element-map] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 16 [not or cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 396 [null save-excursion let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 95 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e27f950fc9ac>" funcall let progn if cond] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a463b7f72e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 2 [progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 130 [cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [null save-excursion let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 105 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e213650fc9ac>" funcall let progn if cond] 4 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree] 104 [while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 51 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e2cf250fc9ac>" funcall let] 4 [let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 20 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 12 [org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch let save-restriction] 48 [org-outline-level funcall max format setq if while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [pdf-info--normalize-file-or-buffer pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 2 [progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 105 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e20d4d0fc9ac>"] 4 [progn if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while save-excursion progn] 4 [let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion] 26 [if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 24 [not cond org-get-limited-outline-regexp concat re-search-forward if save-excursion org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 8 [cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction] 101 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let* progn if org-noter--get-properties-end] 4 [let while let dotimes let while let dotimes let measure-time setq let progn eval let* org-babel-execute:elisp] 2 [let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 143 [let cond let cond let "#<lambda 0x1244e2715d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let] 23 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let* progn] 4 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 23 [save-excursion let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 73 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 12 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e2059d0fc9ac>"] 4 [while if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion] 4 [progn if org-fontify-drawers font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x1568fe1015601843>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a45450772e>" funcall let progn if cond] 9 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 54 ["#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let* org-element-map let] 4 [org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 79 [save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 8 [cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if let progn if org-noter--get-view-info let progn] 7 [progn if unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 18 [or cdr let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 63 [let "#<lambda 0x1244e259d50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 49 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children cond let* progn if] 4 [cconv-make-interpreted-closure function seq-find org-cite-get-processor let org-cite-processor-has-capability-p and or let* org-cite-activate font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x1568fdbe3cd13343>" jit-lock--run-functions jit-lock-fontify-now] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 3 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e25b050fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [eq if let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 3 [function seq-find org-cite-get-processor let org-cite-processor-has-capability-p and or let* org-cite-activate font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x1568fce0a832e143>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function] 12 [or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 20 [let org-noter--doc-file-property let "#<lambda 0x1244e253750fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 72 [let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 10 [pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c3779a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e3c7b50fc9ac>"] 4 [let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 20 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let] 8 [org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 64 [let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 72 [or set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 4 [cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 3 [org-element--cache-active-p if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let*] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e3cb0d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e3cb0d0fc9ac>" funcall let progn if cond let] 4 [org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 16 [pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 22 [save-excursion let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 76 [symbolp cond org-element-contents mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 80 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 67 ["#<compiled -0x1c8cd764cb7c2edf>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1e4a3198b997a963>" tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 7 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map] 4 [cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 54 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e42e6d0fc9ac>"] 4 [org-outline-level funcall let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 12 [eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 18 [and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 25 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4e89d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [or setq org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cond org-element-type eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 11 ["#<compiled -0x17ea019dd0c534d7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1e4a3198b997a963>" tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 8 [or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 8 [let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 18 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4e4fd0fc9ac>" funcall let progn] 4 [progn condition-case if if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion] 32 [org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let] 30 [save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 15 [let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [window-pixel-edges window-at-side-p mode-line-default-help-echo redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 3 [pdf-info--normalize-file-or-buffer pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 8 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e400d50fc9ac>" funcall let] 4 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 8 [cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let*] 4 [let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 28 [let org-noter--parse-location-property let "#<lambda 0x1244e4e6dd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 8 [or if let org-noter--parse-location-property let "#<lambda 0x101bd3a45d3e372e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 6 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37f263>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 9 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 8 [org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 22 [let "#<lambda 0x1244e405250fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [if if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 87 [save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 12 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244e43f150fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [cond let cond let "#<lambda 0x1244e43f150fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [let "#<lambda 0x1244e43f150fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [if org-element-property < or let if let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion] 4 [mapcar "#<compiled 0x4b21a21a2aaa5a0>" mapcar pdf-util-scale "#<compiled -0x6a7084438d47f81>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c37ec63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 3 [org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 53 [or let org-noter--doc-file-property let "#<lambda 0x1244e40b4d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 10 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244e40b4d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while] 2 [cond org-element-contents mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>"] 4 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 42 [tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c373463>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 3 [save-excursion org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 44 [not cond format let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 58 [eq and if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 45 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a4564ba72e>" funcall let] 2 [or progn if let org-noter--parse-location-property let "#<lambda 0x1244e7d79d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 40 [mapconcat pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7dbfd0fc9ac>" funcall let] 4 [while let progn let* make-org-noter--view-info let progn progn if let progn if org-noter--get-view-info let progn progn] 4 [if org-element-property goto-char progn if if let* if let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map] 8 [org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 32 [and if cond let "#<lambda 0x101bd3a4511a372e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 2 [pdf-info-query pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c37ca23>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 7 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e7978d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 7 [org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 59 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244e795750fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 8 [unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 39 [save-current-buffer org-element--cache-active-p and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 8 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37bfa3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 14 [< if let progn if cond let cond let "#<lambda 0x1244e4abed0fc9ac>" funcall let progn if cond let] 4 [re-search-backward or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 38 [org-knuth-hash mod if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4ad7d0fc9ac>" funcall let] 4 [not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 4 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function] 3 [while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 39 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7b7850fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch let] 5 [if if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 8 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 12 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a44dfecf2e>" funcall] 3 [let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 16 [let cond let "#<lambda 0x1244e7d9a50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x101bd3a44d43772e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e787cd0fc9ac>" funcall let progn] 4 [if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch] 69 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 36 [org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 8 [let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 15 [and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 12 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244e7273d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [org-element--cache-active-p if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 ["#<compiled 0x1e4a3175d997a963>" tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c378123>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 5 [if org-activate-tags font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ef0d6e7805743>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a4517f7f2e>"] 11 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c348723>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 2 [cond let cond let "#<lambda 0x1244e490e50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 4 [if cond let cond let "#<lambda 0x1244e48d5d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion] 4 [if org-activate-tags font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e91e6b3b19943>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 7 ["#<lambda 0x101bd3a5c0c87f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [catch or org--property-get-separator let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 12 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7c72d0fc9ac>"] 4 [let "#<lambda 0x1244e7c72d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 65 [window-edges window-inside-pixel-edges pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 6 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [progn cond let cond let cond let "#<lambda 0x1244e7c7050fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [let org-element--cache-verify-element and if let org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7cf750fc9ac>"] 4 [if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 22 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion] 8 [progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e7c0250fc9ac>" funcall let progn if cond] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a4443e9f2e>" funcall let] 6 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let] 8 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5c05caf2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 6 [let progn progn if let org-noter--doc-goto-location if let progn progn if let org-noter-sync-next-page-or-chapter let while let] 4 [or set-buffer save-current-buffer org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion] 17 [symbolp cond org-element-type let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch] 4 [pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 8 [derived-mode-p pdf-util-pdf-buffer-p pdf-util-assert-pdf-buffer pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c549163>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 1 [eq and cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall] 4 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 11 [or set-buffer save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction] 20 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 12 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244e7edad0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 19 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e7e5f50fc9ac>"] 4 [org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if] 5 [progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244ea7d950fc9ac>" funcall let progn if cond] 4 [setq if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [function seq-find org-cite-get-processor let and or let* org-cite-activate font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e9327a26c2843>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end] 4 [derived-mode-p not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 14 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea49450fc9ac>" funcall let progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [org-noter--compare-locations and if cond let "#<lambda 0x101bd3a44ff87f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [or set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion] 8 [set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction] 4 [not if progn if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 8 [if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 16 [progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch] 4 [or let org-noter--doc-file-property let "#<lambda 0x1244eaa62d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [cond org-element-type let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eaa1250fc9ac>" funcall] 4 [cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a440a7a72e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244ea631d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 12 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 16 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eaa8b50fc9ac>" funcall let progn if] 4 [save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 28 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a44f758f2e>" funcall let progn if] 8 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea6ee50fc9ac>" funcall let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea6ee50fc9ac>" funcall let progn if cond] 4 [while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 8 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion] 12 [eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 11 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eab0850fc9ac>" funcall let progn if cond] 4 [not cond org-element-type eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 4 [save-excursion org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 22 [setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 4 [org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 12 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 8 [if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion] 4 [if let org-noter-sync-next-page-or-chapter let while let dotimes let while let dotimes let measure-time setq let progn] 2 [save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 31 [org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 22 [save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 12 [and if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch] 8 [goto-char save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb192d0fc9ac>" funcall let progn if cond] 4 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 3 [if progn cond let cond let cond let "#<lambda 0x1244eb138d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 12 [pdf-cache--data-get pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c540ea3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 1 [if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x1244eb123d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb123d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea70150fc9ac>"] 4 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 12 [or and save-current-buffer org-element--cache-active-p and if let org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion] 4 [progn or progn or let* progn progn if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a44631ef2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb63850fc9ac>" funcall] 4 ["#<lambda 0x1244eb63850fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [cond let cond let cond let "#<lambda 0x1244eb63850fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [or let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 12 [set-buffer save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb6bf50fc9ac>" funcall let progn if cond] 4 [org-get-valid-level let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ef912351b3743>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if] 4 [while catch org-activate-links--text-properties if org-activate-links font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ea5223d2b9343>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect] 4 [and if org-activate-dates font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ee812ca093443>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a44750a72e>" funcall let progn if] 3 [not cond org-element-type let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [or let org-noter--doc-file-property let "#<lambda 0x1244e4f69d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4fafd0fc9ac>"] 4 [org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 32 [org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 12 [derived-mode-p not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 16 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e420050fc9ac>" funcall let progn if cond let] 4 [progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 8 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1e4a3198b997a963>" tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 3 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond] 4 [or or set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond] 8 [let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let] 4 [if save-excursion org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x101bd3a452b31f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4d1150fc9ac>" funcall let progn] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4d91d0fc9ac>" funcall let] 4 [let "#<lambda 0x1244e4d91d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 4 [set-buffer save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion] 11 [featurep and if save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4b54d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [or set-buffer save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4c6ad0fc9ac>" funcall let progn] 8 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e4cc0d0fc9ac>" funcall] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4cc0d0fc9ac>" funcall let] 4 [and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 21 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e4bd9d0fc9ac>" funcall] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4bd9d0fc9ac>" funcall let] 4 [or and save-excursion org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 8 [progn if org-element--cache-sync if if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading let* progn] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4b8cd0fc9ac>" funcall] 4 [if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 13 ["#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 4 [and if org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 8 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4ba650fc9ac>"] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e4ba650fc9ac>" funcall] 4 [and cond cond let "#<lambda 0xdb5a2765cf54149>" funcall catch let let* org-element-map or let* progn if org-noter--get-properties-end if] 4 [and cond org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea95dd0fc9ac>" funcall let] 4 [image-mode-window-get pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 4 [cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 3 [cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244eaf98d0fc9ac>" funcall let progn if cond let] 4 [progn progn let* org-knuth-hash mod if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let] 5 [org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 14 [and cond let cond let cond let "#<lambda 0x1244eaf83d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244eaf83d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 10 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let] 4 ["#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let* org-element-map save-excursion org-noter--show-note-entry let while let cond] 4 [org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let] 10 [save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 24 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea9e150fc9ac>" funcall let] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea9e150fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a5d49d2f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [symbolp cond org-element-type let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a0d5da0f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [or org--property-get-separator let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea9be50fc9ac>" funcall let progn if] 4 [org-noter--relative-position-to-view let cond let "#<lambda 0x1244ea9be50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5d5f3972e>" funcall let progn if] 3 ["#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall] 4 [and if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244ea89ad0fc9ac>" funcall] 4 [set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea865d0fc9ac>"] 4 [and if if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 8 [symbolp cond org-element-type let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let* org-element-map let progn] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244ea830d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [condition-case if if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 7 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea830d0fc9ac>" funcall let progn] 4 [save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage let if] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea87bd0fc9ac>" funcall let progn if cond] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea87bd0fc9ac>" funcall let progn] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e6866d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [or progn progn if let org-noter--get-doc-window if let org-noter--doc-approx-location let progn progn if let org-noter-sync-next-page-or-chapter let] 3 [save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 4 [or or set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry progn if while] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a0d41fa72e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 7 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e6b09d0fc9ac>" funcall] 4 [not cond org-element-contents mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [let org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e6b5cd0fc9ac>" funcall] 4 [and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 8 [if org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 6 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 40 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244e6aa2d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while] 4 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a0d52a5f2e>" funcall let progn if cond] 2 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a0d52a5f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c55c7e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let*] 8 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a0d4e1b72e>" funcall let progn if cond] 3 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e6a08d0fc9ac>" funcall let progn if] 4 [org-element-property vector setq if progn cond let cond let cond let "#<lambda 0x1244e6a13d0fc9ac>" funcall let progn if] 4 [org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 10 [mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c544823>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 5 [save-current-buffer org-element--cache-active-p if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn] 8 [let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall] 4 [let "#<lambda 0x1244e66f1d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e66f1d0fc9ac>"] 4 [eq cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244e66f1d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [< if let progn if cond let cond let "#<lambda 0x1244e6a34d0fc9ac>" funcall let progn if cond let] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e6667d0fc9ac>"] 4 [let "#<lambda 0x101bd3a5ced55f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 2 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb46550fc9ac>" funcall let progn if] 8 [not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 12 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244eb4b5d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [not cond org-get-limited-outline-regexp let* progn save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 8 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb4cf50fc9ac>" funcall] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb4cf50fc9ac>" funcall let progn] 4 [org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer] 4 [if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 4 [not and cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall] 4 [progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244eac6950fc9ac>" funcall let progn if cond] 4 [or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ead3fd0fc9ac>" funcall let progn] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244ead3fd0fc9ac>" funcall] 4 [org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 24 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244eac5050fc9ac>" funcall let progn if cond] 4 [< if let progn if cond let cond let "#<lambda 0x1244eac5050fc9ac>" funcall let progn if cond let] 4 [if save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 7 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a5d5381586>" funcall let progn if] 27 [if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5d4e88586>" funcall let progn if cond] 35 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eac6950fc9ac>" funcall] 4 [let cond let "#<lambda 0x1244eac6950fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb54bd0fc9ac>" funcall let progn if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb54bd0fc9ac>" funcall let progn] 4 [and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading outline-flag-subtree outline-hide-subtree if save-excursion if progn progn] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a5cffa1586>" funcall let progn] 8 [max org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [or set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion] 15 [and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 8 [and if let cond let while let let* save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to] 4 [and if let org-noter--parse-location-property let "#<lambda 0x101bd3a5cec7b586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb46550fc9ac>" funcall let progn] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a5c903cd86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [or let org-noter--doc-file-property let "#<lambda 0x101bd3a5cf405586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>"] 3 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn] 4 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 9 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a0cd0efd86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e6a13d0fc9ac>" funcall let progn] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e6a13d0fc9ac>" funcall let progn if cond] 4 [org-noter--doc-file-property let "#<lambda 0x1244e6a08d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [and if cond let "#<lambda 0x101bd3a0d4a06d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 2 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e6aa050fc9ac>"] 4 [setq if progn cond let cond let cond let "#<lambda 0x1244e6a8d50fc9ac>" funcall let progn if cond let] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e6a8d50fc9ac>"] 4 [progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a0d54e0586>" funcall let progn if] 3 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a0d54e0586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e6aa2d0fc9ac>" funcall] 4 [or set-buffer save-current-buffer org-element--cache-active-p and let* save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e6b5cd0fc9ac>" funcall let progn] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e6b5cd0fc9ac>" funcall let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e6b09d0fc9ac>" funcall let progn] 4 [cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch let] 4 [let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch let let* org-element-map] 4 [or set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 12 [save-current-buffer progn if org-element--cache-sync if if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading if] 8 [cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let] 4 [and if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 17 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 2 [or let org-noter--doc-file-property let "#<lambda 0x1244ea87bd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [vector setq if progn cond let cond let cond let "#<lambda 0x1244ea87bd0fc9ac>" funcall let progn if cond] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a5d544dd86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea865d0fc9ac>" funcall] 8 [or let let* if org-fold-core--property-symbol-get-create put-text-property if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea89ad0fc9ac>" funcall let progn] 4 [let cond let "#<lambda 0x1244ea89ad0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [goto-char save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a0d5de4d86>" funcall let progn if cond] 4 [progn progn org-element--cache-root let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point and let org-up-heading-safe while] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea96c50fc9ac>" funcall let progn if cond] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 4 [progn or progn setq and or cond let* org-noter--parse-root org-element-contents let progn progn if let org-noter-sync-prev-page-or-chapter] 2 [or set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let] 13 [cond let cond let "#<lambda 0x1244eaf83d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eaf83d0fc9ac>" funcall] 4 [and not and or org-back-to-heading save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [or let org-noter--doc-file-property let "#<lambda 0x101bd3a5d42f9586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 4 [cond org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244eaf98d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea95dd0fc9ac>"] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if] 4 [or set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let] 9 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4ba650fc9ac>" funcall let progn] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a5cd81a586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a5cd81a586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 4 [progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e4bd9d0fc9ac>" funcall let progn if cond] 4 [progn or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--get-notes-window let progn progn if] 3 [setq org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5cea07d86>" funcall let progn if] 15 [or let org-noter--doc-file-property let "#<lambda 0x1244e4daa50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a45fb00d86>" funcall let progn if cond] 8 [let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a45fb00d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e4cc0d0fc9ac>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4cc0d0fc9ac>" funcall let] 4 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e4b54d0fc9ac>" funcall let] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244e4b54d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let*] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4d91d0fc9ac>" funcall let progn if] 4 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4d1150fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e42b3d0fc9ac>" funcall] 4 [let "#<lambda 0x101bd3a453569586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [vector setq if progn cond let cond let cond let "#<lambda 0x1244e428750fc9ac>" funcall let progn if cond] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x1244e428750fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e420050fc9ac>" funcall let] 4 [let cond let cond let "#<lambda 0x1244e420050fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4202d0fc9ac>" funcall let] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244e4fafd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [org-element--cache-active-p if let org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion] 4 [not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4f69d0fc9ac>" funcall let] 3 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let] 4 [prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 8 [org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a446125d86>" funcall let] 4 [org-fold-region if save-excursion org-fold-heading let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb7c4d0fc9ac>" funcall let progn if cond let] 4 [< or let if let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [image-display-size cdr let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 4 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a446017d86>" funcall let progn if] 8 [not cond org-element-contents not cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb123d0fc9ac>" funcall let progn] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb123d0fc9ac>" funcall let] 4 ["#<lambda 0x1244eb123d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [window-inside-pixel-edges pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a449259586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if] 3 [not cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch] 4 [save-current-buffer not if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading let* progn save-excursion if] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb7fdd0fc9ac>" funcall let progn if cond] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244eb539d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if] 4 [cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch let let* org-element-map let let progn] 4 [list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading] 4 [plist-get if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a44aa88d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea88bd0fc9ac>" funcall let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eab0850fc9ac>" funcall let] 4 [cond let "#<lambda 0x1244eab0850fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn] 4 [symbolp cond org-element-type let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a44f668586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 4 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244ea6ee50fc9ac>" funcall let progn if cond] 4 [save-excursion save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage let] 4 [eq and if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea631d0fc9ac>" funcall let progn] 4 [or let org-noter--doc-file-property let "#<lambda 0x101bd3a440f8f586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 2 [set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block] 8 [org-element--cache-active-p and if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a448788d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond let] 3 [cond let* org-noter--parse-root org-element-contents if let progn progn if let progn if org-noter--get-view-info let progn progn] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eaac8d0fc9ac>" funcall let] 4 [if if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map or let* progn if] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a449c93d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a44fca9d86>" funcall let progn if cond] 4 [cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let* org-element-map let progn progn] 1 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea78350fc9ac>"] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a44eeaad86>" funcall let progn] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea49450fc9ac>" funcall] 6 [save-current-buffer org-element--cache-active-p if let org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility] 4 [and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 8 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea7d950fc9ac>" funcall let] 6 [org-element--cache-active-p and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e7e5f50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7e5f50fc9ac>"] 4 [save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if let progn progn] 4 [if cond let "#<lambda 0x101bd3a444a7e586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>"] 2 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 12 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a4459fb586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7ffe50fc9ac>" funcall let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101bd3a5c0829d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 3 [let org-noter--parse-location-property let "#<lambda 0x101bd3a5c0829d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>"] 4 ["#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall] 4 ["#<lambda 0x101bd3a5c09a2586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7f2c50fc9ac>" funcall let] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7f2c50fc9ac>" funcall let progn if cond] 4 [save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create put-text-property if if if save-restriction save-excursion progn unwind-protect let*] 3 [window-current-scroll-bars window-edges window-inside-pixel-edges pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let] 4 [cond org-element-contents mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch let let* org-element-map] 2 [pdf-info-query--parse-response "#<compiled 0x1e4a31f63997a963>" tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c5486a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 2 [if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let] 4 [org-element-contents not cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall] 3 [cond org-element-contents not cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>"] 4 [progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if] 4 [let progn progn if let org-noter--get-notes-window let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes] 4 [cond let cond let "#<lambda 0x1244e7c7050fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [cond let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>"] 4 [and cond org-element-type eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 4 [let "#<lambda 0x1244e713350fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 3 [plist-get if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244e713350fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x1244e48d5d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 5 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244e48d5d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e490e50fc9ac>" funcall let progn] 4 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 8 [not cond org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 8 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a451d5a586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [org-element-property < if let progn if cond let cond let "#<lambda 0x1244e49d1d0fc9ac>" funcall let progn if cond] 4 [if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e48ced0fc9ac>" funcall] 3 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a4509d0d86>" funcall let progn if cond let] 6 [org-noter--doc-file-property let "#<lambda 0x101bd3a4509d0d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7273d0fc9ac>" funcall let] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7273d0fc9ac>" funcall let progn] 4 [or if let org-noter--parse-location-property let "#<lambda 0x1244e7273d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 8 [let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [or let org-noter--doc-file-property let "#<lambda 0x101bd3a44c355d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 6 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a44c355d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a44c6c6d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7d9a50fc9ac>" funcall let] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [or let org-noter--doc-file-property let "#<lambda 0x1244e7b7850fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 5 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x101bd3a460293d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond] 4 [if let org-noter--parse-location-property let "#<lambda 0x101bd3a460293d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 4 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4ad7d0fc9ac>" funcall] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4ad7d0fc9ac>" funcall let progn if cond] 4 [mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch] 4 [and let cond let cond let "#<lambda 0x1244e4abed0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 3 ["#<lambda 0x1244e4abed0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [let "#<lambda 0x101bd3a46733ad86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0x1244e795750fc9ac>" funcall let progn] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e795750fc9ac>" funcall let progn if cond] 4 [not cond org-get-limited-outline-regexp concat re-search-forward if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [set-buffer save-current-buffer org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a45125dd86>" funcall let progn if cond let] 4 [memq and progn or progn buffer-chars-modified-tick = and or cond let* org-noter--parse-root org-element-property goto-char save-excursion if] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry let] 4 [save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let org-noter-sync-prev-page-or-chapter let] 2 [internal--before-save-selected-window pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 2 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7abdd0fc9ac>" funcall let progn if] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7abdd0fc9ac>" funcall] 4 [- 1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer] 4 [org-element--cache-active-p and if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [let org-noter--parse-location-property let "#<lambda 0x101bd3a457f68586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>"] 4 [cond let* while if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a45679cd86>"] 4 [pdf-info-query--escape mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 4 [and not and or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility] 4 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a456d82d86>" funcall] 4 [progn progn if let org-noter--get-notes-window if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let] 4 [+ setcar let* progn if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7a4f50fc9ac>" funcall let progn if cond] 4 [catch let let* org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let] 4 [eq not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e43e7d0fc9ac>" funcall] 1 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244e43e7d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [if org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a45ebdb586>" funcall] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e40b4d0fc9ac>" funcall let progn if] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e437c50fc9ac>"] 4 [cdr let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [and if if setq let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e405250fc9ac>"] 2 [org-noter--parse-location-property let "#<lambda 0x1244e405250fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if] 4 [save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 4 [if org-element-property and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a45cc23d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4e4fd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 4 [if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 4 [org-noter--parse-location-property let "#<lambda 0x1244e4e4fd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [let cond let cond let "#<lambda 0x1244e4e4fd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [and not and or org-back-to-heading let* progn save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [pdf-view-sorted-hotspot-functions pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 2 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4f4350fc9ac>"] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4f4350fc9ac>" funcall let progn] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 4 [if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a45f26ad86>" funcall] 2 [cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch let let*] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4e89d0fc9ac>" funcall] 5 [or let org-noter--doc-file-property let "#<lambda 0x101bd3a45d907586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 4 [if let org-noter--parse-location-property let "#<lambda 0x101bd3a45d907586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a45aacdd86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e3cb0d0fc9ac>" funcall let progn] 4 [cond let "#<lambda 0x1244e3cb0d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [cond let cond let "#<lambda 0x1244e3cb0d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 ["#<lambda 0x1244e3c3550fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 2 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e3c3550fc9ac>" funcall let progn if] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 4 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a45bd77586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [let cond let "#<lambda 0x1244e25b050fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244e25b050fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [and save-excursion org-at-heading-p and or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if] 4 [or setq org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e259d50fc9ac>" funcall let progn if cond] 11 [save-current-buffer org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 4 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 4 [progn frame-live-p and if progn if org-noter--valid-session if let org-noter--get-current-view org-noter--get-view-info let progn progn if let] 3 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e200cd0fc9ac>"] 4 [if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e2059d0fc9ac>" funcall let progn if] 4 [or let org-noter--doc-file-property let "#<lambda 0x101bd3a454f87d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 2 [or or set-buffer save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e232a50fc9ac>" funcall let] 4 [if if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 4 [cond org-element-type let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let] 4 [let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 7 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244e2311d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [function cons vector setq if progn cond let cond let "#<lambda 0x1244e2cf250fc9ac>" funcall let progn if cond] 3 [org-element--cache-find progn if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let] 2 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244e213650fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 6 [if let "#<lambda 0x1244e27f950fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 3 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e27f950fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244e27f950fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn] 4 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a46304fd86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e22b850fc9ac>" funcall let progn if cond let] 3 [or let org-noter--doc-file-property let "#<lambda 0x101bd3a46eb39586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 4 [let progn eval let* org-babel-execute:elisp funcall save-current-buffer let setq progn let* cond let* progn if let*] 2 [Automatic\ GC] 1627)) (25844 6233 669375 953000) nil]
