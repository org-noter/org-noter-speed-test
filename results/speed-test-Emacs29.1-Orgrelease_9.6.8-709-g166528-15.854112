
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([and if let org-element--property org-element-parent setq while let org-element-lineage let if let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion] 4 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 624 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2406 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 11 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if] 8 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 23 [let cond let* and let* org-element-contents-end let cond let while let let* save-restriction save-excursion save-current-buffer catch] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form] 24 [cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>" funcall catch let let*] 2 [save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 40 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 12 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function] 8 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x13a9b2fc6a1732bc>" funcall prog1 catch let progn if cond let] 7 [if save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 24 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 26 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 3 [and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 60 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 13 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree] 80 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 13 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 44 [if append let* progn if org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let] 2 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 57 [org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 60 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if] 2 [cond org-element-type let* and let* org-element-end <= and while let cond let* save-restriction save-excursion save-current-buffer catch] 4 [progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>" funcall catch] 4 [save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 8 [setq progn cond let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 15 [org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 51 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x13a9b344621732bc>" funcall prog1 catch let progn if] 7 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 12 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function] 10 [progn progn let* org-knuth-hash mod if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to] 4 [progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if] 7 [not cond org-get-limited-outline-regexp let* progn save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 12 [cond let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>"] 6 [or if unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 9 [save-excursion let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 8 [cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x13a9b2e5ba1732bc>" funcall prog1 catch] 3 [if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if] 16 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b2e3da1732bc>" funcall prog1] 6 [while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 64 [pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 3 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b290121732bc>" funcall prog1 catch] 7 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c376a23>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 12 [let org-element--property org-element-parent setq while let org-element-lineage let if let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [or if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 3 [not cond org-get-limited-outline-regexp concat re-search-forward if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 8 [or if let org-noter--parse-location-property let "#<lambda 0x13a9b0bb521732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc] 4 [progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 ["#<compiled -0x17ea01e42430a2d7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1fd4387f87963de3>" tq-process-buffer tq-filter "#<compiled -0x7df6f918046ef3b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 38 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 977 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 14 [if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 8 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x13a9b0bd321732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc] 4 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9b0d5221732bc>" funcall prog1 catch] 4 [progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer] 3 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x13a9b0dfaa1732bc>" funcall] 3 [cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>" funcall catch let] 2 [jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer let if let progn progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 2 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let* save-excursion] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b0d6e21732bc>" funcall prog1 catch] 4 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion] 8 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 8 [org-element-contents mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>" funcall] 4 [symbolp cond org-element-type let* and let* and if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer] 4 [catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>"] 4 [if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 11 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading if org-back-to-heading-or-point-min] 4 [eq not if if if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading] 4 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x13a9b0ee521732bc>" funcall prog1 catch let progn if cond let] 4 [let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p] 8 [save-current-buffer org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if] 16 [mapconcat pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c37c163>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 5 [or if let org-noter--parse-location-property let "#<lambda 0x13a9b0340a1732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc] 4 [if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if] 16 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x13a9b02a221732bc>" funcall prog1 catch let] 4 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 28 [org-element-type let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>" funcall catch let let*] 4 [save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn] 8 ["#<compiled 0x1fd4387f87963de3>" tq-process-buffer tq-filter "#<compiled -0x7df6f918046ef3b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 1 [< if let progn if cond let cond let "#<lambda 0x13a9b0c3021732bc>" funcall prog1 catch let progn if] 4 [eq if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion] 4 [pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c37a5e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 5 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9b0c4d21732bc>" funcall] 4 [org-noter--get-notes-window let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while let dotimes let] 3 [and let* vector setq if progn cond let cond let cond let "#<lambda 0x13a9b0f58a1732bc>" funcall prog1 catch] 4 [if org-fontify-drawers font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e823774e4c343>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect] 4 [let "#<lambda 0x101b19601abcc9be>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>"] 3 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 16 [not and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map] 8 [let org-invisible-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer] 4 [after-insert-file-set-coding insert-file-contents-literally pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1fd4387f87963de3>" tq-process-buffer tq-filter "#<compiled -0x7df6f918046ef3b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page] 5 [if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>" funcall catch let let* progn if org-element-ast-map let*] 4 [and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form] 7 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children cond let*] 4 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c3788e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 10 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b3b4921732bc>" funcall prog1] 4 [not cond org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x13a9b3fc021732bc>" funcall] 4 [save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 12 [progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b196027f8d9be>" funcall prog1 catch let progn if] 2 [pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 4 [and save-excursion org-at-heading-p and or org-back-to-heading if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn] 4 [font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e8f6c9fb0bc43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if] 4 [and if org-activate-dates font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x1568f9ef44e0c443>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function seq-find org-cite-get-processor let] 4 [eq cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b196023fc01be>" funcall prog1 catch let progn] 2 [cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b382ba1732bc>" funcall prog1 catch let] 4 [pdf-info-query--parse-response "#<compiled 0x1fcd05c557963de3>" tq-process-buffer tq-filter "#<compiled -0x7df6f918046ef3b>" accept-process-output pdf-info-query pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c348723>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 5 [or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9b3faea1732bc>" funcall prog1 catch] 4 [setq progn progn if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [plist-get or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x13a9b3c4b21732bc>"] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [pdf-info--normalize-file-or-buffer pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 14 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 8 [if let* < if let progn if cond let cond let "#<lambda 0x13a9b086421732bc>" funcall prog1 catch let] 4 [cond let* while if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let] 8 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 30 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101b1960056041be>" funcall prog1 catch] 2 [and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading outline-flag-subtree outline-hide-subtree if save-excursion if progn progn] 8 [save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe] 8 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 20 [or if let org-noter--parse-location-property let "#<lambda 0x101b1960033df1be>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc] 2 [pdf-info-query--parse-response "#<compiled 0x1fcd05bdf7963de3>" tq-process-buffer tq-filter "#<compiled -0x7df6f918046ef3b>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c5486a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page] 2 [save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if] 8 [let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>" funcall] 4 [pdf-info--normalize-file-or-buffer pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c5482e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 2 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if] 4 [cond let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x13a9b3aa1a1732bc>" funcall] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 11 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x13a9b3a04a1732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc] 4 [cond org-element-type let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>" funcall catch let] 4 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let*] 4 [org-noter--parse-location-property let "#<lambda 0x101b1960064eb1be>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let] 2 [and if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x13a9b3afea1732bc>" funcall prog1 catch let progn if] 4 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let*] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101b196006d629be>" funcall prog1 catch let] 8 [mapcar pdf-view-sorted-hotspot-functions pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 1 [if let* let* < if let progn if cond let cond let "#<lambda 0x13a9b39cc21732bc>" funcall prog1 catch] 4 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 8 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9b3957a1732bc>" funcall] 4 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children] 4 [let progn if cond let cond let "#<lambda 0x13a9b0a52a1732bc>" funcall prog1 catch let progn if cond let] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn if] 4 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 14 [cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond] 7 [macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 2 [if let* if let* vector setq if progn cond let cond let cond let "#<lambda 0x13a9bee1ca1732bc>" funcall] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 14 [or if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>" funcall catch] 2 [outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let] 8 [save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage] 4 [cond org-element-type let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x13a9bedd421732bc>"] 4 [progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [while catch org-activate-links--text-properties if org-activate-links font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x1568f91ceccf5143>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let*] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9bed1221732bc>"] 4 [1- if save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if] 4 [pdf-info-query--escape mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 2 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101b196009ea01be>" funcall prog1 catch let progn if cond let] 3 [org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 13 [setq if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13a9bef4da1732bc>" funcall prog1 catch let progn if cond] 4 [pdf-info-query--parse-response "#<compiled 0x1fcd1b99c7963de3>" tq-process-buffer tq-filter "#<compiled -0x7df6f918046ef3b>" accept-process-output pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 3 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 4 [let cond let cond let "#<lambda 0x13a9bef48a1732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101b1960156439be>" funcall] 2 [and let* vector setq if progn cond let cond let cond let "#<lambda 0x13a9be99121732bc>" funcall prog1 catch] 4 [let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 60 [font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x1568f6f99e13e043>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer let if] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9be84821732bc>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9beb0f21732bc>" funcall prog1 catch] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map save-excursion] 4 ["#<lambda 0x101b1960168229be>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 7 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x13a9bef2321732bc>" funcall] 4 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 12 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 22 [if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if] 8 [1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while] 4 [and if cond let "#<lambda 0x101b1960085821be>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond] 2 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9be641a1732bc>" funcall prog1] 4 [prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 4 [car eq if let cond let* and let* vector setq if progn cond let cond let] 4 [org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 8 [org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect] 4 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while] 4 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c5422e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 7 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond] 4 [car eq if let cond let* and let* org-element-begin = or and not and if if] 4 [let org-remove-font-lock-display-properties progn unwind-protect let* org-unfontify-region font-lock-unfontify-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ef01817611143>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 4 [timer--activate timer-activate run-at-time run-with-timer jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b19600e0fe9be>" funcall prog1 catch] 11 [let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x13a9bf19821732bc>" funcall prog1] 4 [org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>" funcall catch] 4 [org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9bf310a1732bc>" funcall] 4 [if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 16 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101b19600d2ec1be>" funcall prog1 catch let progn if cond] 3 [save-current-buffer progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage] 16 [let "#<lambda 0x101b1960115c39be>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>"] 2 [not cond org-element-type let* and let* let* < if let progn if cond let cond let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9bf7b1a1732bc>" funcall prog1] 4 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x13a9bf75721732bc>" funcall prog1 catch let progn if cond let] 4 [pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 2 [pdf-view-sorted-hotspot-functions pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 1 [let org-element-lineage let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9bf1dc21732bc>" funcall prog1 catch let progn if] 4 [save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x13a9bf14a21732bc>" funcall] 4 [let "#<lambda 0x101b196781edf1be>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>"] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9bf722a1732bc>" funcall] 4 [if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 8 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function seq-find org-cite-get-processor let org-cite-processor-has-capability-p and or] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9bf5af21732bc>" funcall] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [progn cond let cond let cond let "#<lambda 0x13a9bf5c621732bc>" funcall prog1 catch let progn if cond let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [cdr car if let cond let* and let* vector setq if progn cond let cond let] 4 [progn if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9bec4321732bc>"] 4 [cond let "#<lambda 0x13a9bf58221732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let] 4 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x13a9bf65921732bc>" funcall prog1 catch let progn if cond] 4 [and cond let cond let cond let "#<lambda 0x13a9bece1a1732bc>" funcall prog1 catch let progn if cond let] 4 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c558163>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 6 [if let* vector setq if progn cond let cond let cond let "#<lambda 0x13a9bec44a1732bc>" funcall prog1 catch] 4 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1fd4387f87963de3>" tq-process-buffer tq-filter "#<compiled -0x7df6f918046ef3b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 6 [or progn if let org-noter--parse-location-property let "#<lambda 0x13a9becbea1732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>"] 4 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 4 [or if let org-noter--parse-location-property let "#<lambda 0x13a9bf48c21732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn] 10 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9bf45b21732bc>" funcall prog1 catch let progn] 4 [org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 8 [tq-process-buffer tq-filter "#<compiled -0x7df6f918046ef3b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 9 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 8 [let "#<lambda 0x101b19678a1739be>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>"] 3 [function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9bf38121732bc>" funcall] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101b1967860069be>" funcall prog1 catch let progn if cond] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 13 [and cond let cond let cond let "#<lambda 0x13a9b263821732bc>" funcall prog1 catch let progn if cond let] 4 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 2 [cond let* and let* < if let progn if cond let cond let "#<lambda 0x13a9b2609a1732bc>" funcall prog1] 4 [let* and let* and if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b219f21732bc>" funcall prog1] 4 [org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if save-excursion] 4 [let* let* < if let progn if cond let cond let "#<lambda 0x13a9b21f621732bc>" funcall prog1 catch let] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b221421732bc>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b221421732bc>" funcall prog1 catch] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b2225a1732bc>" funcall prog1 catch] 4 [mapconcat pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 6 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 4 [let* vector setq if progn cond let cond let cond let "#<lambda 0x13a9b22d221732bc>" funcall prog1 catch let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b226921732bc>" funcall prog1 catch] 4 [org-noter--compare-locations and if cond let "#<lambda 0x101b1967857169be>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc] 2 ["#<lambda 0x13a9b23e021732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101b1967838159be>" funcall prog1 catch let progn if] 2 [cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x13a9b233721732bc>" funcall prog1 catch] 4 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c55eba3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 3 [progn cond let cond let cond let "#<lambda 0x13a9b22ee21732bc>" funcall prog1 catch let progn if cond let] 4 [org-noter--parse-location-property let "#<lambda 0x13a9b239d21732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let] 4 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree] 8 [let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101b19678565e1be>" funcall prog1 catch let] 3 [let* if let* vector setq if progn cond let cond let cond let "#<lambda 0x13a9b258da1732bc>" funcall prog1] 4 [vector setq if progn cond let cond let cond let "#<lambda 0x13a9b256b21732bc>" funcall prog1 catch let progn] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* progn if] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let] 2 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9b2527a1732bc>" funcall prog1 catch] 4 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn] 8 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101b1960018db9be>" funcall prog1 catch let progn if] 2 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9b235121732bc>" funcall] 4 [if let* if let* let* < if let progn if cond let cond let "#<lambda 0x13a9b235121732bc>" funcall] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b246521732bc>"] 4 [and if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region progn unwind-protect let* org-unfontify-region font-lock-unfontify-region] 4 [and progn if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101b1960029711be>" funcall prog1 catch let progn] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b26c0a1732bc>" funcall prog1 catch] 2 [let* and let* let* < if let progn if cond let cond let "#<lambda 0x13a9b27b9a1732bc>" funcall prog1] 6 [save-excursion save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101b1967859b2e16>" funcall prog1 catch let progn] 5 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b2527a1732bc>"] 4 [save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if] 8 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b196785f61616>" funcall prog1 catch let progn if cond] 2 [setq if progn cond let cond let cond let "#<lambda 0x13a9b256b21732bc>" funcall prog1 catch let progn if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b239d21732bc>" funcall prog1 catch] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let*] 4 [let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while let dotimes let measure-time] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b22ee21732bc>" funcall prog1 catch] 4 [org-at-heading-p and or org-back-to-heading if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b233721732bc>"] 4 [save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let] 4 [let progn if cond let "#<lambda 0x192f48e39f91e330>" mapc cond cond let "#<lambda 0x192f48e39f91e330>" mapc cond let "#<lambda 0x192f48e39f91e330>" funcall] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b23e021732bc>" funcall prog1 catch] 4 [and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn] 4 [let "#<lambda 0x192f48e39f91e330>" mapc cond cond let "#<lambda 0x192f48e39f91e330>" mapc cond cond let "#<lambda 0x192f48e39f91e330>" mapc cond let "#<lambda 0x192f48e39f91e330>"] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b226921732bc>"] 4 [if let* if let* and if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101b19678aa3e616>" funcall prog1 catch let progn if cond let] 7 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 8 [cond let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x13a9b22d221732bc>" funcall] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b2270a1732bc>"] 4 [save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 8 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101b196784c9be16>" funcall prog1 catch let] 35 [let* < if let progn if cond let cond let "#<lambda 0x13a9b221421732bc>" funcall prog1 catch let progn] 4 [progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let*] 4 [and if cond let "#<lambda 0x101b196784d7ee16>" funcall prog1 catch let progn if cond let "#<lambda 0x192f48e39f91e330>" mapc cond] 3 [if let* if let* < if let progn if cond let cond let "#<lambda 0x13a9b21f621732bc>" funcall prog1] 4 [cond org-element-type let* and let* let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101b19678626a616>" funcall prog1 catch let progn if cond let "#<lambda 0x192f48e39f91e330>"] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b219f21732bc>" funcall] 4 [let cond let* and let* = or if if let* progn if org-noter--get-properties-end if let cond] 4 [let "#<lambda 0x13a9b2609a1732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>"] 4 [function setq let let* progn if org-element-ast-map let* progn if org-element-map let progn progn if let] 7 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 6 [or progn if let org-noter--parse-location-property let "#<lambda 0x13a9bf38121732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>"] 4 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if] 4 ["#<lambda 0x101b196780676616>" funcall prog1 catch let progn if cond let "#<lambda 0x192f48e39f91e330>" mapc cond cond let "#<lambda 0x192f48e39f91e330>" mapc] 2 [org-noter--parse-location-property let "#<lambda 0x13a9bf41a21732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101b196780fe9616>" funcall] 11 [setq if progn cond let cond let cond let "#<lambda 0x13a9bf45b21732bc>" funcall prog1 catch let progn if] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 11 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 11 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9becbea1732bc>"] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9bec44a1732bc>"] 4 [and not and or org-back-to-heading save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101b196780bcde16>" funcall prog1] 2 [let "#<lambda 0x192f48e39f91e330>" mapc cond cond let "#<lambda 0x192f48e39f91e330>" mapc cond let "#<lambda 0x192f48e39f91e330>" funcall catch let let* progn] 6 [progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9bf65921732bc>" funcall prog1 catch let progn] 4 [progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion] 4 [org-element-type let* and let* < if let progn if cond let cond let "#<lambda 0x13a9bf58221732bc>" funcall prog1] 6 [not cond format let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [vector setq if progn cond let cond let cond let "#<lambda 0x13a9bec4321732bc>" funcall prog1 catch let progn] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9bec4321732bc>" funcall prog1] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x101b196780ca4616>" funcall prog1 catch let progn if cond let "#<lambda 0x192f48e39f91e330>"] 2 [car eq if let cond let* and let* < if let progn if cond let cond] 6 [cond cond let "#<lambda 0x192f48e39f91e330>" mapc cond cond let "#<lambda 0x192f48e39f91e330>" mapc cond let "#<lambda 0x192f48e39f91e330>" funcall catch let] 2 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x13a9bf5c621732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>"] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x13a9bf5c621732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>"] 4 [if cond while let progn let* make-org-noter--view-info let progn progn if let progn if org-noter--get-view-info let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9bf722a1732bc>" funcall prog1 catch] 6 [let "#<lambda 0x101b196016e0b616>" funcall prog1 catch let progn if cond let "#<lambda 0x192f48e39f91e330>" mapc cond cond let "#<lambda 0x192f48e39f91e330>"] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9bf14a21732bc>" funcall] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 14 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x13a9bf1dc21732bc>" funcall] 4 [if let cond let* and let* vector setq if progn cond let cond let cond let] 4 [cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let] 2 [and let* vector setq if progn cond let cond let cond let "#<lambda 0x13a9bf75721732bc>" funcall prog1 catch] 4 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading if] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101b196011278616>" funcall prog1 catch let progn if] 8 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9bf7b1a1732bc>"] 4 [save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9bf3efa1732bc>" funcall prog1 catch let] 4 [cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101b19600d6f9616>" funcall prog1 catch] 3 [and cond let cond let cond let "#<lambda 0x13a9bf310a1732bc>" funcall prog1 catch let progn if cond let] 4 [cond org-element-type let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x13a9bf37421732bc>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9bf05521732bc>" funcall prog1 catch] 4 [pdf-view-image-type pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 6 [cond let cond let "#<lambda 0x13a9bf0ff21732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13a9beab7a1732bc>" funcall prog1 catch let progn if cond] 4 [- 1- if save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while] 8 [cdr let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [eq cond org-noter--relative-position-to-view let cond let "#<lambda 0x13a9bea18a1732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>"] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9be641a1732bc>" funcall prog1 catch] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [cond let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x13a9be8f921732bc>" funcall] 4 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion] 4 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map] 4 [cond org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101b196017a9ae16>" funcall prog1] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9be8e221732bc>" funcall prog1] 4 [if cond let "#<lambda 0x192f48e39f91e330>" mapc cond cond let "#<lambda 0x192f48e39f91e330>" mapc cond cond let "#<lambda 0x192f48e39f91e330>" mapc cond] 6 [progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9bef2321732bc>" funcall prog1 catch let progn] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [numberp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101b1960168c4616>" funcall prog1 catch let progn] 2 [cond org-element-contents mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>"] 4 [mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>" funcall catch let let* progn if org-element-ast-map] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9be84821732bc>" funcall prog1 catch] 3 [progn if cond let "#<lambda 0x192f48e39f91e330>" mapc cond cond let "#<lambda 0x192f48e39f91e330>" mapc cond let "#<lambda 0x192f48e39f91e330>" funcall catch] 6 [progn cond let cond let cond let "#<lambda 0x13a9be99121732bc>" funcall prog1 catch let progn if cond let] 4 [window-current-scroll-bars window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 8 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree] 4 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101b19600ff31616>" funcall prog1 catch let progn if cond] 5 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101b196009963e16>" funcall prog1 catch let progn if cond let "#<lambda 0x192f48e39f91e330>"] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9be94ea1732bc>" funcall] 4 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101b196009d0ee16>" funcall prog1 catch let progn if] 7 [cond org-element-type eq if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn] 4 [if append let* progn if org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9bedbaa1732bc>" funcall] 6 [or and save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 4 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101b19600a733616>" funcall prog1 catch let progn if cond let] 2 [let cond let "#<lambda 0x13a9bed1221732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond] 4 [or if cond let "#<lambda 0x192f48e39f91e330>" mapc cond cond let "#<lambda 0x192f48e39f91e330>" mapc cond cond let "#<lambda 0x192f48e39f91e330>" mapc] 6 [and if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion] 4 [let* vector setq if progn cond let cond let cond let "#<lambda 0x13a9beef521732bc>" funcall prog1 catch let] 4 [if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101b196005cba616>" funcall prog1 catch] 8 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 2 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9bee1ca1732bc>" funcall prog1 catch] 6 [eq if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9bf549a1732bc>" funcall prog1 catch] 4 [let progn progn if let org-noter--doc-goto-location if let progn progn if let org-noter-sync-prev-page-or-chapter let while let] 2 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 3 [save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq] 4 [let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b39cc21732bc>"] 2 [keymap-canonicalize redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [cond let cond let "#<lambda 0x13a9b3aed21732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b3a04a1732bc>" funcall prog1 catch] 3 [cond org-element-type eq not if if if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p] 4 [let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect save-current-buffer let if let progn] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13a9b08ffa1732bc>" funcall prog1 catch let progn if cond] 6 [remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while] 4 [cl-intersection or let* progn if org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let] 2 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b08a0a1732bc>" funcall prog1 catch] 4 [setq while let org-element-lineage let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9b086421732bc>" funcall prog1 catch let progn] 6 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b38a3a1732bc>" funcall prog1 catch] 4 [cconv--analyze-function cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function] 4 [or set-buffer save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9b3faea1732bc>" funcall prog1 catch let] 10 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let progn] 3 [memq and progn or progn frame-live-p and if progn if org-noter--valid-session if let org-noter--get-doc-window let progn] 6 [and let* vector setq if progn cond let cond let cond let "#<lambda 0x13a9b3f1721732bc>" funcall prog1 catch] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b3f1721732bc>" funcall prog1] 4 [assq-delete-all unrecord-window-buffer replace-buffer-in-windows kill-buffer "#<compiled -0x1c8aaf8139de1adf>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1fd4387f87963de3>" tq-process-buffer tq-filter "#<compiled -0x7df6f918046ef3b>" accept-process-output pdf-info-query apply pdf-info-renderpage] 3 [if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond] 3 [> cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let] 4 [org-noter--compare-locations and if cond let "#<lambda 0x101b1960277bb616>" funcall prog1 catch let progn if cond let "#<lambda 0x192f48e39f91e330>" mapc] 2 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b3b3421732bc>" funcall prog1] 8 [and and let* let let org-element--property org-element-parent setq while catch let org-element-lineage-map if or org-back-to-heading if] 4 [unless eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b0eb2a1732bc>" funcall] 8 [1- if save-restriction save-excursion org-outline-level funcall let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion] 8 [mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c37a763>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 11 [org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 7 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b0c4d21732bc>"] 2 [let and if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101b19602898be16>" funcall prog1 catch let progn] 2 [pdf-info-query--parse-response "#<compiled 0x1fd4387f87963de3>" tq-process-buffer tq-filter "#<compiled -0x7df6f918046ef3b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 5 [let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>" funcall catch let let* progn] 4 [if org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b19602dea6616>" funcall] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b02a221732bc>" funcall prog1] 4 [progn let* make-org-noter--view-info let progn progn if let progn if org-noter--get-view-info let progn progn if let] 4 [org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if if] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let*] 4 [org-element-type let* and let* org-element-begin goto-char progn if if let* org-up-heading-safe while save-excursion progn if org-show-set-visibility] 4 [let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x13a9e02e321732bc>" funcall prog1] 2 [car if let cond let* and let* let* < if let progn if cond let cond] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x13a9b09c2a1732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>"] 10 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13a9b0aa7a1732bc>" funcall prog1 catch let progn if cond] 3 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 10 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b091d21732bc>"] 8 [let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>"] 3 [let org-fold-region if save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 8 [cond org-noter--compare-locations and if cond let "#<lambda 0x101b19602d4c2e16>" funcall prog1 catch let progn if cond let "#<lambda 0x192f48e39f91e330>"] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13a9b0d5221732bc>"] 3 [unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure] 3 [or if let org-noter--parse-location-property let "#<lambda 0x13a9b0bd321732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc] 4 [org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b19601a8f4616>" funcall prog1] 7 [let "#<lambda 0x13a9b0da5a1732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>"] 4 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x13a9b0da5a1732bc>" funcall prog1 catch let progn if cond] 4 [catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree] 4 [integerp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x13a9b0b53a1732bc>" funcall prog1 catch let progn] 9 [> and if let org-noter--parse-location-property let "#<lambda 0x13a9b0b1f21732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>"] 4 [let cond let while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction] 4 [cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9b0cb821732bc>" funcall prog1 catch let progn if] 7 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let*] 2 [apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 2 [let "#<lambda 0x13a9b290121732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>"] 2 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map] 3 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if] 4 [cond let "#<lambda -0x180b25b9206e1cd0>" funcall catch let let* progn if org-element-ast-map let* progn if org-element-map save-excursion org-noter--show-note-entry] 4 [funcall prog1 catch let progn if cond let "#<lambda 0x192f48e39f91e330>" mapc cond cond let "#<lambda 0x192f48e39f91e330>" mapc cond] 2 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion] 4 [cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map or let* progn] 4 [let* progn if org-element-map or let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect] 4 [let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 8 [org-element-contents mapc cond cond let "#<lambda 0x192f48e39f91e330>" mapc cond cond let "#<lambda 0x192f48e39f91e330>" mapc cond let "#<lambda 0x192f48e39f91e330>" funcall] 6 [org-noter--parse-location-property let "#<lambda 0x13a9b2c60a1732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let] 3 [if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 6 [and let* org-element-begin <= and if let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [symbolp cond org-element-type let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>" funcall catch] 9 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101b19601d88b616>" funcall prog1 catch let progn if cond] 2 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x13a9b2b8b21732bc>" funcall prog1 catch let progn if] 3 ["#<lambda 0x101b19601d289e16>" funcall prog1 catch let progn if cond let "#<lambda 0x192f48e39f91e330>" mapc cond cond let "#<lambda 0x192f48e39f91e330>" mapc] 2 [and if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 8 [org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13a9b287d21732bc>" funcall prog1 catch let progn if cond] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let] 1 [symbolp cond org-element-type let* and let* org-element-begin let* while if let* save-current-buffer org-element--cache-find progn if if] 4 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading let*] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 5 [and not and or org-back-to-heading if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let*] 4 [if let org-element--cache-verify-element and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children] 4 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if if org-show-set-visibility] 4 ["#<lambda 0x13a9b2b29a1732bc>" funcall prog1 catch let progn if cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc] 8 ["#<lambda -0x180b25b9206e1cd0>" mapc cond cond let "#<lambda -0x180b25b9206e1cd0>" mapc cond let "#<lambda -0x180b25b9206e1cd0>" funcall catch let let* progn if] 9 [and let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda -0x9c3851b74216d4>" funcall prog1 catch let progn] 3 [setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [Automatic\ GC] 1119)) (25847 63495 713841 606000) nil]
