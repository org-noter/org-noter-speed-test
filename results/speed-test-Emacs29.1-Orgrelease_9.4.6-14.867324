
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([not cond org-get-limited-outline-regexp let* progn cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond] 5 [nconc list let let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements] 4 [org-end-of-subtree save-excursion min let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements] 4 [progn if save-excursion org-element--get-time-properties let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion] 4 [if save-excursion org-element--get-node-properties let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements] 4 [org-trim let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let*] 4 [org-at-heading-p let* progn cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let* if] 4 [and cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let* if while let] 4 [org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let* if while let] 4 [if while let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond let* if while] 4 [cond let or progn if let org-noter--parse-location-property let "#<lambda -0x758cd43ee142278>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 55 [while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 116 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2156 [user-error condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 404 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 460 [pdf-cache-get-image pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 1 [derived-mode-p not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 4 [outline-back-to-heading condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 28 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0871ccc914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 7 [save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 35 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101163292b55128e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc] 3 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871d09114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 120 [not or cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 368 [progn unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 45 [cond org-element-type let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let] 6 [outline-back-to-heading condition-case org-back-to-heading save-excursion org-flag-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 31 [cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 69 [outline-back-to-heading condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 25 [keymap-canonicalize redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 3 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa08704a1114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 7 [not cond org-element-contents not cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [progn org-before-first-heading-p if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [null save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 25 [cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871e1e114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 24 [cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f316b6a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 3 [let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let let* org-element-map] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871b22114e800>" funcall] 3 [or progn if let org-noter--parse-location-property let "#<lambda 0xa0871b22114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 28 [let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 43 [let org-noter--parse-location-property let "#<lambda 0xa0871b88114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [cond let cond let cond let "#<lambda 0xa08705a8914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 6 [if let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 10 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 24 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c371223>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 11 [condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 60 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0870502914e800>" funcall let progn] 6 [function setq let let* org-element-map let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect] 4 [outline-back-to-heading condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 51 [cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let progn progn if] 3 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 4 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 8 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 73 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 48 [not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101163292187428e>" funcall let] 2 [let if let* cond let org--hide-wrapper-toggle org-hide-drawer-toggle progn if let "#<lambda 0x13e3eb0>" funcall if let* if let*] 4 [cdr let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 8 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37e5a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 12 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xa0871786914e800>" funcall let progn if cond let] 4 [org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 19 [cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let] 3 [or cdr let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 76 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 22 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 3 [save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 16 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0871a4d914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871a4d914e800>" funcall let progn if cond] 4 [org-noter--parse-location-property let "#<lambda 0xa08716b4914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 26 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa08716ff914e800>" funcall] 4 [condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 51 [org-element-contents if let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler] 6 [cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 43 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 6 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871620114e800>" funcall let] 4 [remove-overlays org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 24 [save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 36 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 6 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08719a8114e800>" funcall] 4 [pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 7 [and let cond let org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while save-excursion progn if] 52 [if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 46 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xa087180b914e800>" funcall let progn if cond let] 4 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 32 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 8 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101163292e3fd28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 2 [cond let progn if cond let cond let "#<lambda 0xa0871865114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 7 [let cond let cond let "#<lambda 0xa0871862914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 6 [cond let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>"] 4 [if let "#<lambda 0xa087172b114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 6 [progn if progn if if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101163292037e28e>" funcall let progn if] 5 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0871730114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871fa3914e800>" funcall let progn if cond] 6 [save-restriction save-excursion org-outline-level funcall and let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [function overlay-put let progn if org-flag-region let* if let* cond let org--hide-wrapper-toggle org-hide-drawer-toggle progn if let] 8 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f3f86928e>" funcall let progn if cond] 35 [let cond let "#<lambda 0xa08772c9114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 12 [let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 31 [org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 4 [let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page] 4 [org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 14 [or if let org-noter--parse-location-property let "#<lambda 0xa08770be914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall catch let let* org-element-map let let] 3 [and let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 12 [org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa08771de114e800>"] 4 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0xa08771de114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0xa08710f6914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632f3cc88a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 3 [progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa08713eb914e800>" funcall let progn if cond] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08713eb914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>"] 4 [cond let "#<lambda 0xa087123d914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 6 [and if cond let "#<lambda 0x1011632f3fbefa8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let] 2 [cond let "#<lambda 0xa0871164914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871164914e800>" funcall let progn if cond] 4 [progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 78 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map or] 4 [pdf-info-query--escape mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 7 [or let org-noter--doc-file-property let "#<lambda 0x1011632f3d362a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08715c7114e800>" funcall let progn if cond] 13 [progn progn if let org-noter--get-doc-window select-window let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes] 4 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087153a914e800>" funcall] 3 [and if let org-noter--parse-location-property let "#<lambda 0xa087153a914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871565914e800>" funcall let progn] 5 [and redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>"] 6 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08776ac914e800>" funcall let progn if] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa08776ac914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [kill-this-buffer-enabled-p redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 6 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f39344a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 7 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0877746914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [not cond org-element-type let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [integerp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632f3a90e28e>" funcall let progn if cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877698114e800>" funcall let progn] 1 [and if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08778af114e800>" funcall] 2 [min cons let* progn if progn if progn cond let cond let "#<lambda 0xa08778f5114e800>" funcall let progn] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f37acea8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond] 2 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map] 3 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877b01914e800>" funcall let progn if] 7 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 4 [cond let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f374b8a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 2 [pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c54c2a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 3 [and cond let* org-noter--parse-root org-element-contents let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let] 2 [let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 15 [org-element-contents mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f350a728e>" funcall let] 4 ["#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 1 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877543114e800>" funcall] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877543114e800>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877543114e800>" funcall let] 4 [cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877543114e800>" funcall let progn if] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877543114e800>" funcall let progn if cond] 4 [let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 79 [cons vector setq if progn cond let cond let cond let "#<lambda 0xa087757f114e800>" funcall let progn if] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632f34b2028e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 2 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 17 [unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 11 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632f3484528e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 4 [progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877525114e800>" funcall let progn if cond] 1 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877525114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [progn if org-flag-region let* if let* cond let org--hide-wrapper-toggle org-hide-drawer-toggle progn if let "#<lambda 0x13e3eb0>" funcall if] 8 [progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn] 4 [org-noter--doc-file-property let "#<lambda 0xa087751c114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 7 [let org-noter--parse-location-property let "#<lambda 0xa087751c114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08769c4914e800>" funcall let] 3 [not cond org-element-type let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall catch] 7 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876911114e800>" funcall let] 4 ["#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let let* org-element-map let] 4 [image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 4 [org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 6 [tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa08777e3914e800>" funcall] 3 [eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 ["#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fa4a7728e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc] 3 [let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall] 6 [let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>"] 4 [cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall catch let] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877c92114e800>" funcall let progn if] 4 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 36 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877c38114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877c38114e800>" funcall let progn] 4 ["#<compiled -0x17ea019da3411ed7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x9c5db717f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 18 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877ecf114e800>" funcall let progn] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877ecf114e800>" funcall let] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let "#<lambda 0xa0877ecf114e800>" funcall] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0877fd2914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map or let* progn if] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa346a28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 7 [org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0877e0c114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [frame-live-p and if progn if org-noter--valid-session if let org-noter--get-doc-window if let org-noter--doc-approx-location let progn progn if] 3 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fa3647a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 4 [org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0876554914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 3 [org-element-property < if let progn if cond let cond let "#<lambda 0xa0876554914e800>" funcall let progn if cond] 4 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x9c5db717f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 9 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087656a114e800>" funcall let progn if cond] 4 [while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08764f7114e800>" funcall let progn if cond let] 6 [while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 20 [number-to-string eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087640d114e800>" funcall] 3 [let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 14 [- 1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer] 4 [save-excursion org-flag-heading let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876455914e800>" funcall let] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876455914e800>" funcall] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0xa0877aa2114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [let org-noter--doc-file-property let "#<lambda 0x1011632fa1fe128e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877a19114e800>" funcall let] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877609914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 6 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa038028e>" funcall let progn if cond] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877f16114e800>" funcall let] 4 [save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 4 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0xa0877f85114e800>" funcall let progn] 2 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 15 [cond org-element-contents not cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>"] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087796f914e800>"] 7 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087796f914e800>"] 4 [if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 2 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fae222a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08779d1914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [org-element-property < if let progn if cond let cond let "#<lambda 0xa0877d87114e800>" funcall let progn if cond] 4 [cond let org--hide-wrapper-toggle org-hide-drawer-toggle progn if let "#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion let*] 4 [cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877d7d114e800>" funcall let progn if] 3 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fad53a28e>" funcall] 4 [progn cond let cond let cond let "#<lambda 0xa0877de4114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08762d3114e800>" funcall let progn if cond let] 5 [cond let "#<lambda 0xa0876e6c914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876e6c914e800>" funcall let progn if cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876ef2114e800>" funcall let] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876ef2114e800>" funcall let progn] 4 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fabf3928e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 3 [pdf-info-process pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876229114e800>" funcall let progn] 4 [org-noter--doc-file-property let "#<lambda 0x1011632fab8cb28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876f6f114e800>"] 4 [not cond org-get-limited-outline-regexp let* progn if cond let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876ed8914e800>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876ed8914e800>" funcall let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 6 [cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876f35114e800>"] 3 [let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let*] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 11 [symbolp cond org-element-type let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc] 3 [setq if progn cond let cond let cond let "#<lambda 0xa0876cbb114e800>" funcall let progn if cond let] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632facb8128e>" funcall let progn if] 3 [goto-char save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876f81114e800>" funcall let progn if cond] 4 [mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch] 4 [cond let "#<lambda 0xa0876f81114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876ca0114e800>"] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn] 2 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa0870080914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fac2f028e>" funcall let progn] 2 [progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 15 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa08700be114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08700be114e800>" funcall let progn if cond] 4 [org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 11 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087002a914e800>" funcall let progn if] 7 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0870014114e800>"] 6 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876328114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876328114e800>" funcall] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa9f88a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 3 [pdf-view-image-size pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 2 [and if cond let "#<lambda 0x1011632fa9513026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let] 4 [org-noter--doc-file-property let "#<lambda 0x1011632f6e42a026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08763bc914e800>"] 4 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f6f864826>" funcall let progn if cond let] 6 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632f6f864826>" funcall let progn if cond let] 4 [if org-element-put-property if while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let] 4 [let "#<lambda 0x1011632fac233026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 7 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c55d2a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 4 [progn if cond let cond let "#<lambda 0xa087002a914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087002a914e800>" funcall let] 4 [let while let let catch let* org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while] 2 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fac7f5026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0870080914e800>" funcall let progn if cond] 8 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fada86826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0876ca0114e800>" funcall] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0876ca0114e800>" funcall let progn] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632faf23f026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876f81114e800>" funcall let progn] 4 [mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let let* org-element-map let let] 6 [org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876c0a114e800>" funcall] 4 [outline-flag-region outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 8 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876cbb114e800>" funcall] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0876fac114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876fac114e800>"] 4 [plist-get if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1011632fabae3826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0876f35114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 4 [< if let progn if cond let cond let "#<lambda 0xa0876f5b914e800>" funcall let progn if cond let] 4 [or let progn progn if let org-noter--get-notes-window if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876ed8914e800>" funcall] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876f6f114e800>" funcall let] 4 [progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch] 3 [if org-element-property < if let progn if cond let cond let "#<lambda 0xa0876229114e800>" funcall let progn if] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn] 4 [cond let progn if cond let cond let "#<lambda 0xa0876ef2114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632faaf35826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 7 [vector setq if progn cond let cond let cond let "#<lambda 0xa0876e6c914e800>" funcall let progn if cond] 4 [cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08762d3114e800>" funcall] 4 [if org-element-property < if let progn if cond let cond let "#<lambda 0xa08762d3114e800>" funcall let progn if] 4 [cconv-make-interpreted-closure function setq let let* org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let] 2 [and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 4 [org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 11 [if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632faec40826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while] 4 ["#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xa0877d87114e800>" funcall let progn if cond let] 4 [let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>"] 7 [if cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let let* org-element-map let progn progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087796f914e800>" funcall let progn if cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa087796f914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877924914e800>" funcall let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632fafaae026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 6 [progn = and or cond let* org-noter--parse-root org-element-contents if let progn progn if let progn if] 4 [or if let org-noter--parse-location-property let "#<lambda 0xa0877f85114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let let* org-element-map let progn progn] 7 [let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 8 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877f16114e800>" funcall let progn if cond] 4 [save-excursion org-outline-level funcall and let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877609914e800>" funcall let progn if cond let] 4 [let "#<lambda 0xa0877a19114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa1705826>" funcall let progn if] 7 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876455914e800>" funcall let progn if cond] 4 [or cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 4 [outline-back-to-heading condition-case org-back-to-heading-or-point-min save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [cond let while let let catch let* org-element-map let* progn if org-noter--get-properties-end if let cond let*] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876521114e800>"] 3 [> and if let org-noter--parse-location-property let "#<lambda 0xa0876521114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [cond let "#<lambda 0xa087656a114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877e0c114e800>" funcall let progn if cond let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877fd2914e800>" funcall let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0877fd2914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [cond org-element-contents not cond cond let "#<lambda -0x1078b88c44c0819f>" funcall catch let let* org-element-map or let* progn if] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0xa0877efb914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 6 [org-noter-pdf--get-current-view run-hook-with-args-until-success or progn unwind-protect save-current-buffer let let progn progn if let org-noter--get-current-view org-noter--get-view-info let progn] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632fa58ca026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877c38114e800>" funcall let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0877c38114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632fa55cf826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 2 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fa55cf826>" funcall let progn if] 9 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fa4efc826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 2 [mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08777da914e800>" funcall let progn] 4 [symbolp cond org-element-type let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632f32ab3826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [org-flag-region if save-excursion org-flag-heading let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 4 [cond let cond let "#<lambda 0xa08769c4914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 3 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa08769c4914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877525114e800>" funcall let progn] 4 [save-excursion if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08775b6114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f346b9826>" funcall let progn if cond] 26 [progn org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa087757f114e800>" funcall let progn] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa087757f114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877442114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [not cond format let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 8 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f3544a826>" funcall let progn if cond let] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877354114e800>" funcall] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08773f3914e800>" funcall let progn if cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 7 [cond let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877b01914e800>" funcall let progn if cond] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877b01914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [setq if while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 12 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877b5e914e800>" funcall let progn if cond] 4 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 4 [or let org-noter--doc-file-property let "#<lambda 0xa0877bca114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f3a3ca826>" funcall let progn if] 7 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08778af114e800>" funcall let] 5 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877698114e800>" funcall let progn if cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877698114e800>" funcall let] 4 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0877698114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f3aaaf826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 1 [let "#<lambda 0x1011632f39074826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 3 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877647914e800>"] 7 [if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f391e1026>"] 4 ["#<compiled 0x9c5db717f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08776ac914e800>" funcall let progn] 3 [pdf-info--normalize-file-or-buffer pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 7 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa0871565914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 3 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087153a914e800>" funcall let progn if] 3 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632f3db68026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 7 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa08715c7114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x1011632f3d0f5026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 7 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871191914e800>" funcall let progn if cond] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0871290114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [derived-mode-p and cond let org-end-of-subtree save-excursion let* save-excursion if org-show-children cond let* progn if if org-show-set-visibility] 4 [pdf-history-push pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087112f914e800>" funcall let progn if] 7 [cond let "#<lambda 0xa087112f914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f3fd1c826>" funcall let progn if cond let] 7 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087123d914e800>" funcall let progn if cond] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f3b553026>" funcall let progn] 6 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08712c2914e800>" funcall] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa08713eb914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [progn save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08710f6914e800>" funcall let progn] 4 [or goto-char save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08710f6914e800>" funcall let progn if] 4 [not and cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall] 4 [let* progn if cond let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>"] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 1 [org-element-type let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let let*] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08770be914e800>" funcall let progn if cond] 10 [let progn if org-noter--set-notes-scroll redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0xa087702a114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa087702a114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087709b114e800>" funcall let progn if cond] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let] 2 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f58032826>" funcall let progn if] 9 [funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>"] 3 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa087820f114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 7 [let "#<lambda 0xa087820f114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 5 [if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let let*] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x1011632921b00026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 2 [let "#<lambda 0x10116329203d9826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871730114e800>" funcall let progn if cond] 3 ["#<lambda 0xa0871730114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871862914e800>" funcall let] 2 [cond org-element-contents mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>"] 4 [and if let while let catch or setq cond let* progn progn unwind-protect save-current-buffer let if] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101163292e48d026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 2 [org-flag-region save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 8 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101163292d6a6826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 7 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871902114e800>" funcall let progn if cond] 4 [org-element-type let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect] 4 [function setq let let* org-element-map or let* progn if org-noter--get-properties-end if let cond let* progn progn] 4 [org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08713f5914e800>" funcall] 6 [or progn if let org-noter--parse-location-property let "#<lambda 0x1011632924d62826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 2 [goto-char condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 4 [and cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch] 6 [cond let cond let cond let "#<lambda 0xa0871a01114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08716ff914e800>" funcall let progn if cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 1 [max min let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 4 [org-element-contents not cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall] 6 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0871ab5114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 3 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1011632920269826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if let] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632920cae826>" funcall let progn] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08714d8114e800>" funcall let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x10116329204c7026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond] 2 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x10116329204c7026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [org-element-contents not cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall] 6 [not cond org-element-type let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871753114e800>" funcall let progn] 3 [and if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 2 [cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if let] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa08707fd114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0870750914e800>" funcall let progn if cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa087060e914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871b88114e800>" funcall let] 3 [and if let org-noter--parse-location-property let "#<lambda 0x1011632f31f17026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 1 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 2 [mapcar pdf-util-scale "#<compiled 0xade0723d9cb227e>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c36e623>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 3 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa0871ed5914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632928bc2826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 7 [pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x9c5db717f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0871e1e114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871e77114e800>" funcall let progn if cond] 6 [progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch] 5 [not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x10116329297e7826>" funcall let] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0xa08704a1114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632929dd4826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632928c1d826>" funcall let] 3 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa08701ed914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871dd9914e800>" funcall let progn] 4 [let org-noter--parse-location-property let "#<lambda 0xa0871dd9914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871d09114e800>" funcall let progn if cond] 5 [or let org-noter--doc-file-property let "#<lambda 0xa0871d09114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0871d09114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa0871ccc914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 3 [org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f1eac2026>" funcall let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 1 [let* org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if let] 4 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x129d1b9985c326ae>" funcall let progn if] 3 [Automatic\ GC] 1092)) (25844 5222 499665 650000) nil]
