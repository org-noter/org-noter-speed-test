
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([while let let catch let* org-element-map let let cond let progn if org-element-copy let* if while] 2 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let let] 4 [org-reduced-level let* save-excursion org-element-headline-parser cond setq let save-excursion if let* org-element--current-element org-element-copy let* if while let] 4 [let catch let* org-element-map let let cond let progn if org-element-copy let* if while let save-excursion] 4 [org-element-copy let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond let*] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [and save-excursion let* save-excursion org-element-headline-parser cond setq let save-excursion if let* org-element--current-element org-element-copy let* if while] 4 [if cond let "#<lambda -0x1741e706f6041c56>" funcall catch let let* org-element-map let let cond let progn if org-element-copy] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let cond] 4 [let "#<lambda -0x1741e706f6041c56>" funcall catch let let* org-element-map let let cond let progn if org-element-copy let* if] 4 [cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let cond let progn if org-element-copy let* if] 4 [if list nconc list let let* save-excursion org-element-headline-parser cond setq let save-excursion if let* org-element--current-element org-element-copy] 4 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 1247 [progn unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 81 [save-excursion let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 119 [null save-excursion let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 109 [org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 56 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 701 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2536 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 28 [let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall] 4 [user-error or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 818 [or cdr let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 102 [while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 80 [not or cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 416 [save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 27 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let] 8 [progn if org-noter-pdf--get-current-view run-hook-with-args-until-success or progn unwind-protect save-current-buffer let let progn progn if let org-noter--get-current-view org-noter--get-view-info] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let] 13 ["#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall] 4 [and if save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 338 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 12 [while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 62 [org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 35 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree] 100 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 161 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x137833681d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [save-current-buffer org-element--cache-active-p if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 8 [setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 12 [save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 24 [let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 77 [and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 28 [eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 20 [if save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 20 [cdr member if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if] 4 [org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let] 27 [progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 158 [unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 39 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378335b9544ed04>"] 4 [pdf-view-image-type pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 2 [save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 42 [if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 24 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378333ea544ed04>" funcall let progn if] 4 [org-element--cache-active-p and if let org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility] 4 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c36fc63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 3 [cond let cond let "#<lambda 0x13783325f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [re-search-backward or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 68 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if] 8 [let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 20 [org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 75 [and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading outline-flag-subtree outline-hide-subtree if save-excursion if progn progn] 8 [save-restriction save-excursion org-outline-level funcall max format setq if while let* save-excursion if org-fold-show-children progn if while] 4 [org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 40 [let while let let* save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let] 4 [let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 86 [let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 59 [if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if] 4 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 12 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 28 [cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction] 88 [or set-buffer save-current-buffer org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion] 27 [cond org-element-type let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 1 [and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 4 [not cond org-get-limited-outline-regexp let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [save-excursion org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 22 [or and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 8 [org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 48 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 44 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let] 2 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137832414d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 30 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let] 36 [progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage let if or org-back-to-heading if] 4 [let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 66 [or let org-noter--doc-file-property let "#<lambda 0x101914b17b41940e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 2 [if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let] 4 [let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 59 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 24 [let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region] 8 [if progn if org-noter--valid-session if let org-noter--doc-approx-location let progn progn if let org-noter-sync-next-page-or-chapter let while let] 3 [and save-excursion org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 33 [progn if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 2 [save-excursion let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 106 [and save-excursion org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 82 [null save-excursion let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 123 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 40 [org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 6 [eq not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137833811544ed04>" funcall] 4 [cond org-element-type let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let] 4 [if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 37 [let org-element-lineage let* if let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835f67544ed04>" funcall let progn] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835f67544ed04>" funcall let progn if cond let] 4 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 16 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 16 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137833f08544ed04>" funcall let progn if] 4 [and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 84 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 4 [let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 142 [org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 10 [let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 36 [and not and or org-back-to-heading if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let*] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x137833899544ed04>" funcall let] 4 [org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 48 [or progn if let org-noter--parse-location-property let "#<lambda 0x137833899544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1378338d0d44ed04>" funcall let progn] 3 [derived-mode-p not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 20 [org-element--cache-active-p if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [cdr let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 11 [let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page] 8 [if if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 87 [if org-noter--valid-session if let org-noter-sync-next-page-or-chapter let while let dotimes let while let dotimes let measure-time setq] 3 [org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 32 [and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835d7b544ed04>" funcall let progn if] 4 [if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch] 31 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 52 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry] 4 [or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 27 [run-hook-with-args-until-success or progn unwind-protect save-current-buffer let let org-noter--doc-approx-location let progn progn if let org-noter-sync-next-page-or-chapter let while] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835f98544ed04>" funcall let progn] 4 [let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 12 ["#<lambda 0x137835f98544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 8 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835fb8d44ed04>"] 4 [cons vector setq if progn cond let cond let cond let "#<lambda 0x137835b66544ed04>" funcall let progn if] 4 [let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion] 22 [cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let let*] 4 ["#<lambda 0x137835b69544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 123 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835c4bd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 16 [if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 46 [let org-element--cache-verify-element and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 26 [set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 4 [symbolp cond org-element-type let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 4 [run-hook-with-args redisplay--pre-redisplay-functions redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x137835a54544ed04>" funcall let] 4 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c3799e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 12 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 54 [or set-buffer save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction] 12 [org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 12 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 4 [derived-mode-p not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1378359ad544ed04>" funcall let progn] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378359ad544ed04>"] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1b555440e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 6 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x1378358f6544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1378358f6544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1378358f6544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 32 [window-edges window-pixel-edges window-at-side-p mode-line-default-help-echo redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1378359e3544ed04>"] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1b7089c0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 2 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1b7089c0e>" funcall let progn if cond let] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378358a4d44ed04>" funcall let progn if cond let] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [< if let progn if cond let cond let "#<lambda 0x137835829d44ed04>" funcall let progn if cond let] 4 [if let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch let save-restriction] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13783579f544ed04>" funcall let progn if] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d38cd44ed04>" funcall] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780d38cd44ed04>" funcall let progn if] 4 [save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 44 [org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 8 [progn condition-case if if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion] 56 [org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 30 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b256dc0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 7 [org-element-contents not cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall] 4 [let org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [cond org-element-contents not cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 4 [pdf-util-assert-pdf-buffer pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c5497a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 4 [save-excursion org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 18 [or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780dd49544ed04>" funcall let progn] 4 [vector setq if progn cond let cond let cond let "#<lambda 0x13780dd49544ed04>" funcall let progn if cond] 4 [let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 34 [or and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn if while] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1bf164c0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 3 [let "#<lambda 0x101914b1bf164c0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 20 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 4 [cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 55 [set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 11 [and not and or org-back-to-heading save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [numberp if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1bbc37c0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 6 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1bbc37c0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 ["#<lambda 0x13780d882d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780d882d44ed04>" funcall let progn if cond] 4 [let org-fold-region if save-excursion org-fold-heading let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion] 4 [progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 4 [org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 8 [let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion] 8 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780d83cd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [not cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 4 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1b40d840e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [or let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 4 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 14 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780d948544ed04>" funcall let progn if cond] 4 [let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 22 [org-element--cache-active-p and if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 8 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b9d80c0e>" funcall let] 8 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780dec5d44ed04>" funcall let progn if cond] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility] 8 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1bd24f40e>" funcall let progn] 6 [or let org-noter--doc-file-property let "#<lambda 0x13780db83544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [and if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 2 [or set-buffer save-current-buffer org-element--cache-active-p and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 8 [let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let let* org-element-map] 4 [let org-noter--doc-file-property let "#<lambda 0x101914b1bd7fcc0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 3 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0x13780da49d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 4 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1bd50bc0e>" funcall] 2 [setq if progn cond let cond let cond let "#<lambda 0x13780dae6d44ed04>" funcall let progn if cond let] 4 [or org--property-get-separator let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 8 ["#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 1 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond] 4 [mode-line-eol-desc eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1a4b6940e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [org-element-property vector setq if progn cond let cond let cond let "#<lambda 0x13780d995544ed04>" funcall let progn if] 4 [while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 16 [and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 8 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ec1e544ed04>"] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 13 [progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 8 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1a72d840e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [setq if progn cond let cond let cond let "#<lambda 0x13780ef12544ed04>" funcall let progn if cond let] 4 [org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if] 4 [or set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let] 4 ["#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch let let* org-element-map let] 4 [or let org-noter--doc-file-property let "#<lambda 0x13780ee58544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 16 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 12 [let org-fold-region if save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780efbd544ed04>" funcall let progn] 4 [and if let org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion] 4 [or or set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block] 4 [if org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 4 [vector setq if progn cond let cond let cond let "#<lambda 0x13780db7c544ed04>" funcall let progn if cond] 4 [list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading] 4 [let "#<lambda 0x101914b1ba116c0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x16bc84d7d922f63>" tq-process-buffer tq-filter "#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 25 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780ed8bd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [symbolp cond org-element-type let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 5 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 15 [eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 16 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d802544ed04>"] 4 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780d802544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1bb30ec0e>" funcall let progn] 2 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 16 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 9 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn] 4 [let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 41 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e86d544ed04>" funcall let] 4 [org-element--cache-active-p and if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 8 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if] 4 [plist-get if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101914b1b457740e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e823544ed04>" funcall let progn if cond] 4 [org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 24 [org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if] 4 [and if org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 16 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1ac6f040e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ef6a544ed04>" funcall] 4 [- 1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer] 4 [if let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780ee80544ed04>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ee8dd44ed04>" funcall let progn if cond] 4 [or let org-noter--doc-file-property let "#<lambda 0x101914b1a353f40e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 2 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1a353f40e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e61b544ed04>" funcall let] 4 [not if progn if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let] 8 [plist-get if org-element-property < or let if let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b1a51ba40e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 3 [cond let cond let cond let "#<lambda 0x13780e644544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [cond let "#<lambda 0x13780e644544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn] 4 [or set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let] 8 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e051d44ed04>"] 4 [let "#<lambda 0x13780e1f7544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [org-element-property vector setq if progn cond let cond let cond let "#<lambda 0x13780e0b8544ed04>" funcall let progn if] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x13780e0b8544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [progn if progn if if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 13 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e15d544ed04>" funcall let progn] 4 [and if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 4 [and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1a638fc0e>" funcall let progn if] 3 [and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 12 [cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 8 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e0ead44ed04>" funcall let progn if cond] 4 [if let org-noter--parse-location-property let "#<lambda 0x13780e3f7d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e079d44ed04>" funcall let progn] 4 [org-not-nil if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 7 [tq-process-buffer tq-filter "#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c559b23>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e35a544ed04>" funcall let progn] 4 [prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e350544ed04>" funcall let] 4 [let cond let cond let "#<lambda 0x13780e350544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [or set-buffer save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 4 [not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 4 [and if if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 4 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1ab96440e>" funcall] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e58e544ed04>" funcall let progn if cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e58e544ed04>" funcall let] 4 ["#<compiled -0x17ea0191407993d7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x16bc84d7d922f63>" tq-process-buffer tq-filter "#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 5 [funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 24 [save-current-buffer progn if org-element--cache-sync if if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading let*] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e574544ed04>" funcall let progn if cond let] 4 [save-current-buffer org-element--cache-active-p and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 4 [and if cond let "#<lambda 0x101914b1a8243c0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [if let progn if cond let cond let "#<lambda 0x13780eaaed44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [let if let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ea23d44ed04>"] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x13780ea23d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [progn let* org-knuth-hash mod if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1ab36e40e>" funcall let progn] 4 [apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 2 [org-noter--parse-location-property let "#<lambda 0x13780e688544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1ae0f140e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [eq cond let progn if cond let cond let "#<lambda 0x13780e98d544ed04>" funcall let progn if cond let] 4 [save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 4 [if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 ["#<compiled 0x16bc84d7d922f63>" tq-process-buffer tq-filter "#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 3 [and cond org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 4 [or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e116544ed04>" funcall let progn] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e116544ed04>" funcall let progn if cond let] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e6c3544ed04>" funcall let progn] 4 [and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 8 [if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let*] 12 [and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 2 [= and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children] 4 [progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 4 ["#<lambda 0x13780e47f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [and progn or progn frame-live-p and if progn if org-noter--valid-session if let org-noter--focus-notes-region if let progn] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if] 4 [and if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 16 [cons let* progn if cond let cond let cond let "#<lambda 0x13780e4d5544ed04>" funcall let progn if cond] 4 [save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn] 8 [let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>"] 5 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1a130fc0e>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 8 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1a04e540e>" funcall let progn if] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780f061544ed04>" funcall] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780f033d44ed04>" funcall] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780f033d44ed04>" funcall] 4 [org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1a06e83a6>" funcall let progn if cond] 15 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780f061544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 4 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 20 [and or cond let* org-noter--parse-root org-element-property goto-char save-excursion if progn progn unwind-protect save-current-buffer let if let] 4 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 4 [org-noter--compare-locations and if cond let "#<lambda 0x101914b1a1c0aba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1a1c0aba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [vector setq if progn cond let cond let cond let "#<lambda 0x13780e4d5544ed04>" funcall let progn if cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e4d5544ed04>" funcall let] 4 [or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch let] 3 [org-noter--parse-location-property let "#<lambda 0x101914b1afbc83a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e450d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x13780e450d44ed04>" funcall let progn if cond let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e450d44ed04>" funcall let] 4 [let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 4 [let progn if cond let cond let "#<lambda 0x13780e47f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 4 ["#<lambda 0x101914b1af1ae3a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let] 4 [let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while let dotimes let] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 4 [and cond let cond let cond let "#<lambda 0x13780e7a6d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch let] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 12 [or set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion] 8 [or let org-noter--doc-file-property let "#<lambda 0x13780e119544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e119544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [if unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1ae5f43a6>" funcall let progn if cond] 44 [org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1ae5f43a6>" funcall let progn] 8 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e78c544ed04>" funcall] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e78c544ed04>"] 4 [progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e116544ed04>" funcall let progn if cond] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1ae074ba6>" funcall let progn if] 24 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x13780e98d544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 3 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 8 [cond org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 3 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1a8275ba6>" funcall let progn if cond let] 18 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780eaaed44ed04>" funcall let progn] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780eaaed44ed04>"] 4 [= and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e574544ed04>" funcall] 4 [org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn] 8 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b1a93dfba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 2 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x13780e52b544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [cond org-element-type memq not and while let org-element-lineage let if let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1a9169ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [let cond let "#<lambda 0x13780e5c2d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [cond let "#<lambda 0x13780e5c2d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1ab8a4ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 6 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1ab8a4ba6>" funcall] 4 [remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e3a5544ed04>" funcall] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let] 3 [if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 14 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e350544ed04>" funcall let progn if cond let] 4 [save-current-buffer org-element--cache-active-p and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1a8c56ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond] 4 [cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch let] 4 [if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 14 [org-element-property < if let progn if cond let cond let "#<lambda 0x13780e35a544ed04>" funcall let progn if cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x13780e35a544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [or and save-current-buffer org-element--cache-active-p and if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion] 4 [set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 8 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 5 [image-mode-window-get pdf-view-current-page number-to-string eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 3 [symbolp cond org-element-type let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e3f7d44ed04>" funcall let progn] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e3f7d44ed04>" funcall let] 4 [cond let cond let "#<lambda 0x13780e3f7d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 ["#<lambda 0x13780e0ead44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 ["#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch let let* org-element-map let] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e15d544ed04>"] 4 [< if let progn if cond let cond let "#<lambda 0x13780e15d544ed04>" funcall let progn if cond let] 4 [or and save-excursion org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 4 [and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e0b8544ed04>" funcall let progn if cond] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e0b8544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>"] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e1f7544ed04>" funcall] 4 [if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn] 8 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1a5aadba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e051d44ed04>" funcall let progn if cond] 4 [not if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading let* progn save-excursion if org-fold-show-children] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b1a56e0ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780e644544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [numberp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b1a528f3a6>" funcall let progn if cond] 7 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1a528f3a6>" funcall let progn if] 12 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e61b544ed04>" funcall] 4 [eq and let cond let cond let "#<lambda 0x13780e61b544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b1a30d9ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond] 4 [if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 16 [if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 4 [cond let* while if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if] 4 [let "#<lambda 0x13780ef6a544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [or if let org-noter--parse-location-property let "#<lambda 0x13780ef6a544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 2 [let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780e96c544ed04>"] 4 [save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1b4bb7ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 2 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780e823544ed04>" funcall] 4 [save-current-buffer org-element--cache-active-p and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [or set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 2 [pdf-view-buffer-file-name pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c546023>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 4 [org-element-type let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x13780e9dad44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 ["#<lambda 0x13780e86d544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 4 [and cond let cond let cond let "#<lambda 0x13780e86d544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 8 [if let "#<lambda 0x13780eb88d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 10 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780d802544ed04>" funcall let progn] 4 [org-noter--doc-file-property let "#<lambda 0x13780d802544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780d802544ed04>"] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq] 3 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ea71544ed04>" funcall let progn] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ea71544ed04>" funcall let progn if cond] 4 [condition-case if if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 4 [if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b9ccfba6>"] 12 [let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 20 [save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780eb6e544ed04>" funcall] 4 [let cond let "#<lambda 0x13780eb6e544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780eb6e544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 8 [or let org-noter--doc-file-property let "#<lambda 0x13780ed60d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [not and cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ed60d44ed04>" funcall let progn] 4 [cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [org-element-property let* while if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780db7c544ed04>" funcall let progn] 4 [eq cond let progn if cond let cond let "#<lambda 0x13780db7c544ed04>" funcall let progn if cond let] 4 [or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780dd0ad44ed04>" funcall let progn] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780dd0ad44ed04>" funcall let progn] 4 [while if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780efbd544ed04>" funcall] 3 [set-buffer save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let progn] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ee58544ed04>" funcall let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ee58544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let] 3 [cond org-element-type let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall catch let] 4 [pdf-info-process-assert-running pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c543163>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ef17544ed04>" funcall let] 4 [let org-before-first-heading-p if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [let "#<lambda 0x13780ef12544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780ef12544ed04>" funcall] 4 [or if unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780ecbb544ed04>" funcall let progn] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101914b1a4f9fba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b1a4f9fba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780ec1e544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [cond let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1bba6bba6>" funcall let progn] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780d9fbd44ed04>" funcall let progn if] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d9fbd44ed04>" funcall let] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x13780d9fbd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1bb21eba6>" funcall let progn] 3 [if save-restriction save-excursion org-outline-level funcall let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion] 4 [or if let org-noter--parse-location-property let "#<lambda 0x101914b1bdfac3a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond] 7 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780dac4d44ed04>"] 4 [let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780db83544ed04>"] 4 [set-buffer save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 4 [set-buffer save-current-buffer org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 4 [vector setq if progn cond let cond let cond let "#<lambda 0x13780dec5d44ed04>" funcall let progn if cond] 4 [org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while] 8 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d948544ed04>" funcall let] 4 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 12 [setq if progn cond let cond let cond let "#<lambda 0x13780d83cd44ed04>" funcall let progn if cond let] 5 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780d83cd44ed04>" funcall let progn if cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d8afd44ed04>" funcall let progn] 6 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let progn progn if let] 3 [pdf-view-sorted-hotspot-functions pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780debdd44ed04>" funcall let progn if cond] 4 [org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0x13780d200d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 8 [org-element-type eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 3 [let cond let "#<lambda 0x13780dd39d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [setq org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 4 [let org-element--cache-verify-element and if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [not if progn if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 4 [if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if] 4 [window-current-scroll-bars window-edges window-inside-pixel-edges pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x101914b1b24a83a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x13780dcd3d44ed04>" funcall let progn] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780dcb2544ed04>" funcall let progn if cond] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x13780dcb2544ed04>" funcall let progn if] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1b20593a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 7 ["#<lambda -0xad8b9bf76fd01cb>" funcall catch let let* org-element-map let progn progn if let progn if org-noter--get-view-info let progn] 1 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13780d38cd44ed04>"] 4 [save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 8 [org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion] 4 [numberp if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1b7a123a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835829d44ed04>" funcall let progn] 4 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835829d44ed04>" funcall] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1378358a4d44ed04>" funcall let] 5 [plist-get if org-element-property let* while if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let] 4 [if progn if org-noter--valid-session if let org-noter--get-notes-window let progn progn if let org-noter-sync-prev-page-or-chapter let while let] 8 [let "#<lambda 0x1378358f6544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378358f6544ed04>" funcall let progn if cond] 4 [let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378359ad544ed04>" funcall let progn if cond let] 6 [and save-excursion org-at-heading-p and or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if] 4 [let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835bb1544ed04>"] 3 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x137835bb1544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0x137835bb1544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 3 [org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 4 [cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x137835a54544ed04>" funcall let progn if cond let] 5 [let or progn if let org-noter--parse-location-property let "#<lambda 0x137835a54544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [and setq cond let cond let "#<lambda 0x137835c70544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [org-back-to-heading save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1b37c33a6>" funcall let progn] 10 [or set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 9 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835c4bd44ed04>" funcall let progn if cond] 4 ["#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>" funcall] 4 [if org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b1b3dadba6>" funcall let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if] 1 [vector setq if progn cond let cond let cond let "#<lambda 0x137835b69544ed04>" funcall let progn if cond] 4 [goto-char save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b17ff913a6>" funcall let progn if cond] 4 [set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 6 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835fb8d44ed04>"] 5 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x137835fb8d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835f98544ed04>" funcall let] 4 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b7c963a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if] 1 [if if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 3 [or set-buffer save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 4 [cond org-element-contents not cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>"] 4 [mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 5 ["#<lambda 0x137835ee1544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let] 3 [not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137835ee1544ed04>" funcall let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x137835ee1544ed04>" funcall let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x137835ee1544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [let "#<lambda 0x137835d7b544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [and not and or org-back-to-heading if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if] 4 [let progn if org-noter--set-notes-scroll redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b1b0672ba6>" funcall let progn if] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x1378338d0d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [not cond org-element-type let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 4 [macroexp-macroexpand macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 6 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101914b17ce7d3a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [window-edges window-inside-pixel-edges pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter] 3 [let org-element-lineage let if let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b17b07b3a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101914b1790c0ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x137833811544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond] 2 [or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b17d90c3a6>" funcall let progn if cond] 7 [and cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond let "#<lambda -0xad8b9bf76fd01cb>" funcall catch] 4 [pdf-info-query--parse-response "#<compiled 0x16bc8aefd922f63>" tq-process-buffer tq-filter "#<compiled -0x7084a1d00eb597b>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37e723>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 1 [not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1378339ab544ed04>" funcall let] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x1378339ab544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [let cond let "#<lambda 0x1378339ab544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101914b17b6223a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc] 2 [let "#<lambda 0x101914b17b6223a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101914b17b6223a6>" funcall let] 4 [list setq progn cond let cond let cond let "#<lambda 0x13783390e544ed04>" funcall let progn if cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x13783390e544ed04>" funcall] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x13783390e544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [if progn if org-noter--valid-session if let org-noter--focus-notes-region if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page] 4 [cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let] 4 [or set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion] 4 [org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 7 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map] 5 [org-not-nil if let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 4 [org-element--cache-verify-element and if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x137832414d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 6 [plist-get if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x137832414d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x137833c18d44ed04>" funcall let progn if cond] 2 [mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 4 [org-noter--doc-file-property let "#<lambda 0x101914b14861e3a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children cond let* progn if] 4 [let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond let "#<lambda 0xaf0c156c902fe35>"] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x137833d41544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [save-current-buffer not if progn if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x137833ac4544ed04>" funcall let progn] 5 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x137833a9b544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 5 [outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let] 4 [not cond org-element-type eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 6 [let "#<lambda 0x13783320dd44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [let "#<lambda 0x13783325f544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 5 [not cond format let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [pdf-view-image-size pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [org-noter--parse-location-property let "#<lambda 0x1378333ea544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let "#<lambda -0xad8b9bf76fd01cb>" mapc] 4 [if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 4 [timer-set-idle-time run-with-idle-timer vector setq progn if if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 4 [cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc cond] 4 [pdf-cache--data-get pdf-cache-number-of-pages pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1378334a3544ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 4 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b3e0d71ba6>"] 4 [progn progn let* while if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p] 4 [or let org-noter--doc-file-property let "#<lambda 0x137833681d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>" mapc cond cond let] 4 [cdr let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b321e633a6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond] 6 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1378337a2d44ed04>" funcall let progn if cond let "#<lambda -0xad8b9bf76fd01cb>"] 4 [org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let] 4 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101914b322231ba6>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>"] 3 [org-element-property < if let progn if cond let cond let "#<lambda 0x13783316f544ed04>" funcall let progn if cond] 5 [if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 4 [let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101914b325bf13a6>" funcall let] 6 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if] 4 [org-noter--parse-location-property let "#<lambda 0x129451a3aef9b32e>" funcall let progn if cond let "#<lambda 0xaf0c156c902fe35>" mapc cond cond let "#<lambda 0xaf0c156c902fe35>" mapc] 4 [Automatic\ GC] 1629)) (25844 7351 3563 173000) nil]
