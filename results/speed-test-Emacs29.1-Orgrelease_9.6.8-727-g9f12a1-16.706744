
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda -0x446e9fd4068db54>" funcall] 2 [save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 16 [floor - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 8 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2439 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 92 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 627 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree] 74 [cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map let* progn if] 4 [cond org-element-type let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond let "#<lambda -0xcc59053ffa64dff>" funcall catch let] 2 [org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 52 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure] 6 [- 1- if save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while] 4 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c369a63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 17 [cond let* and let* org-element-end let while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if] 4 [let let org-noter--doc-approx-location let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while let] 3 [or and if let cond let while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if] 4 [and let* if cond save-excursion let let org-fold-core-get-folding-spec if org-fold-folded-p not or and save-excursion org-at-heading-p or] 4 [if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form] 20 [org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 8 [or progn = and or cond let* org-noter--parse-root org-element-contents let progn progn if let org-noter-sync-next-page-or-chapter let] 2 [let* and let* and if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case] 4 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 1267 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6adce1e7e7163c>" funcall] 4 [setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 19 [function setq let let* progn if org-element-ast-map let* progn if org-element-map let progn progn if let] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adce557e7163c>"] 4 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 37 [function setq let let* progn if org-element-ast-map let* progn if org-element-map save-excursion org-noter--show-note-entry let while let] 4 [pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c36e263>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 5 [cond let cond let "#<lambda 0xd6adcbc97e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond] 4 [let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 12 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form] 7 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 64 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 21 [let "#<lambda 0xd6adcb937e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>"] 4 [if save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 28 ["#<compiled -0x17ea01a219e85ed7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x6695de68ca8dde3>" tq-process-buffer tq-filter "#<compiled -0x7c6e89ec3451d7b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 16 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 8 [and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 119 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 2 [cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond let "#<lambda -0xcc59053ffa64dff>" funcall catch let let*] 4 [or if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond let "#<lambda -0xcc59053ffa64dff>" funcall catch] 4 [progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq] 8 [org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6adca3ffe7163c>" funcall prog1 catch] 4 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176a2eb54186>" funcall prog1 catch let progn if cond] 9 [save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 73 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 12 [if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 4 [org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6adeaf97e7163c>" funcall prog1 catch] 4 [keymap-canonicalize redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 17 [catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 23 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children cond] 4 [cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond let "#<lambda -0xcc59053ffa64dff>" funcall catch let] 4 [save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 32 [mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond let "#<lambda -0xcc59053ffa64dff>" funcall catch] 2 ["#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond let "#<lambda -0xcc59053ffa64dff>" funcall catch let let* progn if] 3 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn] 3 [pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c37eaa3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 1 [or if unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 8 [save-excursion save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point] 4 ["#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond let "#<lambda -0xcc59053ffa64dff>" funcall] 3 [cdr member if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if] 16 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101f176a20fe0186>" funcall prog1 catch] 5 [save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if let progn progn] 4 [and cond let cond let cond let "#<lambda 0xd6ade8fb7e7163c>" funcall prog1 catch let progn if cond let] 4 [org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 12 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6ade920fe7163c>" funcall prog1 catch let progn if cond let] 4 [intern org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6adf5e97e7163c>" funcall prog1 catch let progn if cond let] 4 [save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 8 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 19 [1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let] 14 [cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map save-excursion org-noter--show-note-entry let while] 8 [derived-mode-p if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq] 8 [cconv--analyze-function cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv] 4 [cond let* and let* org-element-end <= and while let cond let* save-restriction save-excursion save-current-buffer catch org-element--parse-to] 4 [and if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6adf7787e7163c>" funcall prog1 catch let progn if] 4 [and not and or org-back-to-heading save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6adf49dfe7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>"] 4 [memq not and if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if] 4 ["#<lambda 0xd6adf1127e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc] 4 [and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 8 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 28 [setq progn progn if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 8 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x6695de68ca8dde3>" tq-process-buffer tq-filter "#<compiled -0x7c6e89ec3451d7b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 20 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond] 4 [if let* if let* org-element-begin goto-char progn if let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [car eq if let cond let* and let* setq if let* progn if org-noter--get-properties-end if let] 4 [cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let] 4 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let*] 8 [if let* if let* let* < if let progn if cond let cond let "#<lambda 0xd6adf630fe7163c>" funcall] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 16 [while let org-fontify-inline-src-blocks-1 condition-case org-fontify-inline-src-blocks font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x1568fe5018647343>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let*] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 4 [let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 32 [cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if] 12 [org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children] 12 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6aded767e7163c>" funcall] 4 [cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info] 4 [or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [progn or let* progn progn if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let] 4 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn] 12 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [while catch org-activate-links--text-properties if org-activate-links font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156efda23953e043>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect] 8 [pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x6695de68ca8dde3>" tq-process-buffer tq-filter "#<compiled -0x7c6e89ec3451d7b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if] 2 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let progn] 4 [progn progn let* org-knuth-hash mod if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion] 4 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176a2ed14986>" funcall prog1 catch let progn if cond let] 4 [cond org-element-type let* and let* < if let progn if cond let cond let "#<lambda 0xd6adeeb4fe7163c>" funcall] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let] 4 [cond let cond let "#<lambda 0xd6adef957e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond] 4 [or if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc] 6 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading let* progn save-excursion] 4 [let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176bb8dab986>" funcall prog1 catch let] 9 [tq-process-buffer tq-filter "#<compiled -0x7c6e89ec3451d7b>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c5795e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 2 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xd6ad8ba9fe7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc] 4 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if save-excursion if progn] 18 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while save-excursion progn] 4 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 31 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 19 [save-current-buffer progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage] 8 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 27 [org-noter-sync-next-page-or-chapter let while let dotimes let while let dotimes let measure-time setq let progn eval let*] 2 [and let* vector setq if progn cond let cond let cond let "#<lambda 0xd6ad887dfe7163c>" funcall prog1 catch] 4 [jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let] 4 [font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ed43914b88043>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer let if] 8 [with-no-warnings if progn if or let cond let* if let* let let org-element--property or if let] 4 [eq if let cond let* and let* goto-char save-excursion org-noter--show-note-entry let while let cond let* progn] 4 ["#<lambda -0x1c86a4069aa55d7b>" funcall catch let let* progn if org-element-ast-map let* progn if org-element-map let* progn if org-noter--get-properties-end] 4 [symbolp cond org-element-type let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond let "#<lambda -0xcc59053ffa64dff>" funcall catch] 4 [if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 12 [let progn if cond let cond let "#<lambda 0xd6ad8b0e7e7163c>" funcall prog1 catch let progn if cond let] 4 [org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 8 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176bb0067986>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>"] 2 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6ad8ad5fe7163c>" funcall] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 31 [org-fontify-meta-lines-and-blocks-1 condition-case org-fontify-meta-lines-and-blocks font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ed5643bf5af43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn] 4 [cond let* progn progn if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn] 3 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adf243fe7163c>"] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 8 [pdf-cache--data-put pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 2 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if save-excursion if progn progn] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry progn if while] 12 [while catch org-activate-links--text-properties if org-activate-links font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156eddce61759343>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let*] 4 [pdf-info-query pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c54d563>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 2 [let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6adf3d67e7163c>" funcall prog1 catch let progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adf2887e7163c>" funcall] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [vector setq if progn cond let cond let cond let "#<lambda 0xd6adf318fe7163c>" funcall prog1 catch let progn] 4 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 8 ["#<compiled -0x156ee793a278ed43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer let if let progn] 4 [cond org-element-type let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond] 6 [cdr let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adf0b1fe7163c>" funcall] 4 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 14 [let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176bae271986>" funcall prog1 catch let progn if] 2 [macroexp-macroexpand macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 4 [org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 12 [pdf-view-image-size pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 18 [if let org-noter--parse-location-property let "#<lambda 0xd6adf14afe7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond] 4 [let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond let "#<lambda -0xcc59053ffa64dff>" funcall catch let let* progn] 4 [pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 1 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adf19f7e7163c>" funcall] 4 [while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xd6add6ca7e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn] 2 [symbolp cond org-element-type let* and let* < if let progn if cond let cond let "#<lambda 0xd6add6a97e7163c>"] 4 [save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while] 4 ["#<lambda -0xcc59053ffa64dff>" mapc cond let "#<lambda -0xcc59053ffa64dff>" funcall catch let let* progn if org-element-ast-map let* progn if org-element-map] 4 [+ floor - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xd6add49d7e7163c>" funcall] 4 [and let* let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion] 4 [and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading outline-flag-subtree outline-hide-subtree if save-excursion if progn progn] 8 [cond org-element-type let* and let* org-element-begin <= and if let* org-up-heading-safe while save-excursion progn if org-show-set-visibility] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [cond org-element-type let "#<lambda -0xcc59053ffa64dff>" funcall catch let let* progn if org-element-ast-map let* progn if org-element-map save-excursion] 4 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 2 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 32 [intern org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176bba298186>" funcall prog1 catch let progn if cond let] 3 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xd6add4f47e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond let] 6 [cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map let let progn] 2 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 4 [font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156eddef965fb843>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if] 8 ["#<lambda 0xd6added97e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc] 4 [let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if] 4 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 21 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 3 [let cond let "#<lambda 0xd6addde37e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond] 4 [let "#<lambda 0x101f176bd1aba186>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>"] 2 [cond let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if] 8 [symbolp cond org-element-type let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc] 3 [let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond let "#<lambda -0xcc59053ffa64dff>"] 4 [cond org-element-type let* and let* org-element-begin let* while if let* save-current-buffer org-element--cache-find progn if if setq] 4 [progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect save-current-buffer let if let progn progn] 4 [cond org-element-type let "#<lambda -0xcc59053ffa64dff>" funcall catch let let* progn if org-element-ast-map let* progn if org-element-map let] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6addfadfe7163c>" funcall prog1] 4 [cond let* and let* org-element-begin < or let if let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101f176bb8015186>" funcall prog1 catch let] 8 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6addf877e7163c>" funcall prog1] 4 [pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6addd4bfe7163c>" funcall prog1 catch] 4 [syntax-propertize-wholelines font-lock-extend-region-wholelines font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ed27b16a74043>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer] 4 [mapcar "#<compiled 0x3a4a238558fe5a0>" mapcar pdf-util-scale "#<compiled 0x20fde8529eca47f>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c546463>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 7 [if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6addae17e7163c>" funcall prog1 catch let progn] 4 [progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond let "#<lambda -0xcc59053ffa64dff>" funcall catch] 3 [save-current-buffer progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map] 8 [let or progn if let org-noter--parse-location-property let "#<lambda 0x101f176bba2ea186>" funcall prog1 catch let progn if cond let] 2 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c541363>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 8 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6addd9e7e7163c>" funcall] 4 [progn if let org-element--property org-element-parent setq while let org-element-lineage let if let org-before-first-heading-p if if org-show-set-visibility] 4 [cond org-element-type let* and let* vector setq if progn cond let cond let cond let "#<lambda 0xd6addd807e7163c>"] 4 [and if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let] 8 [mapconcat pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c540623>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6addd00fe7163c>" funcall] 4 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion] 8 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101f176bdb54f186>" funcall prog1 catch let progn if cond] 3 [setq if progn cond let cond let cond let "#<lambda 0xd6adb1497e7163c>" funcall prog1 catch let progn if] 4 [let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101f176bdb7c0186>" funcall prog1 catch let progn if] 2 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6adb0fc7e7163c>" funcall] 4 [mapconcat pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adb13cfe7163c>" funcall prog1] 4 [progn if let org-noter--parse-location-property let "#<lambda 0xd6adb1fd7e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc] 4 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 4 [progn if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176bdb85c186>" funcall prog1 catch let progn if] 3 [if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6add1987e7163c>" funcall prog1 catch let progn if cond] 4 [symbolp cond org-element-type eq if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree] 4 [if let* org-element-contents-end let cond let while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 7 [org-element-type let* and let* < if let progn if cond let cond let "#<lambda 0xd6adb2977e7163c>" funcall prog1] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adb2dbfe7163c>" funcall] 4 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion] 8 [consp and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101f176bd85be986>"] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xd6adb33efe7163c>" funcall prog1 catch let progn if cond] 4 [or let if let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility] 4 [if let org-noter--parse-location-property let "#<lambda 0x101f176bb5dd4986>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adb224fe7163c>" funcall prog1] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn] 2 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adb34e7e7163c>"] 4 [save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if] 12 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101f176bb5873186>" funcall prog1 catch let progn] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adb3a57e7163c>" funcall prog1 catch] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adb3f07e7163c>" funcall prog1] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176bd6f65186>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>"] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adb30f7e7163c>" funcall prog1 catch] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f176bd65b5986>" funcall prog1 catch let progn if cond] 5 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6add103fe7163c>" funcall prog1 catch] 4 [let* if let* org-element-begin = and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [car eq if let cond let* and let* vector setq if progn cond let cond let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6add0cc7e7163c>" funcall prog1 catch] 4 [function seq-find org-cite-get-processor let org-cite-processor-has-capability-p and or let* org-cite-activate font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e8f3ed5e6cb43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [cond let cond let "#<lambda 0xd6add0967e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond] 4 [and if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 7 [setq if progn cond let cond let cond let "#<lambda 0xd6add007fe7163c>" funcall prog1 catch let progn if] 4 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101f176bd68b2986>" funcall] 4 [if let* vector setq if progn cond let cond let cond let "#<lambda 0xd6add0f2fe7163c>" funcall prog1 catch] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f176bd518c186>" funcall prog1 catch] 2 [or let* progn if org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn] 4 [let* < if let progn if cond let cond let "#<lambda 0xd6add1c87e7163c>" funcall prog1 catch let progn] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6add1c87e7163c>" funcall] 4 [format let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [if let* if let* let* < if let progn if cond let cond let "#<lambda 0xd6add0277e7163c>" funcall] 4 [or let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 8 ["#<lambda 0x101f176bd6006186>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc] 2 [if let* if let* vector setq if progn cond let cond let cond let "#<lambda 0xd6add0417e7163c>" funcall] 4 [while if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point] 4 [cond let* and let* < if let progn if cond let cond let "#<lambda 0xd6add2647e7163c>" funcall prog1] 4 [symbolp cond org-element-type let* and let* org-element-begin let* while if let* save-current-buffer org-element--cache-find progn if if] 4 [let* org-get-level-face font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e891fbd948e43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let] 4 [let* let* < if let progn if cond let cond let "#<lambda 0xd6add37b7e7163c>" funcall prog1 catch let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function seq-find org-cite-get-processor let and] 4 [cdr car if let cond let* and let* let* < if let progn if cond let] 8 [if unwind-protect let* let org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xd6add2757e7163c>" funcall] 4 [save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 8 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176bd689f986>" funcall] 6 [if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176bc47fd186>" funcall prog1 catch let progn] 3 [or progn if let org-noter--parse-location-property let "#<lambda 0xd6add2df7e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6add2df7e7163c>" funcall prog1 catch] 4 [let cond let cond let "#<lambda 0xd6add2df7e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc] 4 [if save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion] 4 [number-to-string eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [let cond let cond let "#<lambda 0xd6adf813fe7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc] 4 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let*] 12 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6adf9737e7163c>" funcall prog1 catch let progn if cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xd6adf9737e7163c>" funcall prog1 catch let progn if cond] 4 [if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if] 4 [run-hook-with-args-until-success cond org-noter--relative-position-to-view let cond let "#<lambda 0xd6adf942fe7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>"] 9 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101f176bc5a3201e>" funcall prog1 catch let] 14 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adf9737e7163c>" funcall] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [and if cond let "#<lambda 0x101f176bc53d501e>" funcall prog1 catch let progn if cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond] 3 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101f176bc46d681e>" funcall prog1 catch let progn if cond let] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xd6add2df7e7163c>" funcall prog1 catch let progn if cond] 4 [and not and or org-back-to-heading save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6add2a5fe7163c>" funcall] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 7 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let] 4 [run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 7 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6add3effe7163c>" funcall prog1 catch let progn if cond let] 4 [let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while let dotimes let measure-time] 7 [let org-noter--parse-location-property let "#<lambda 0xd6add37b7e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond] 4 [cond org-element-type let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond let "#<lambda -0x4f2ab6effa64dff>" funcall catch let] 6 [let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 4 ["#<lambda 0x101f176bd730681e>" funcall prog1 catch let progn if cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc] 2 [org-noter--doc-file-property let "#<lambda 0xd6add0417e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 11 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101f176bd616381e>" funcall prog1 catch let progn if] 5 [and let* vector setq if progn cond let cond let cond let "#<lambda 0xd6add3427e7163c>" funcall prog1 catch] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x101f176bda24481e>" funcall prog1 catch let progn if cond let "#<lambda -0x4f2ab6effa64dff>"] 3 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xd6add0277e7163c>" funcall prog1 catch] 4 [org-element-type let* and let* org-element-begin < or let if let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond let "#<lambda -0x4f2ab6effa64dff>" funcall catch let let* progn] 2 [cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond let "#<lambda -0x4f2ab6effa64dff>" funcall catch let] 2 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 4 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f176bd5eb781e>" funcall prog1] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6add007fe7163c>"] 4 [let let org-element--property org-element-parent setq while let org-element-lineage let if let org-before-first-heading-p if org-fold-show-children cond let*] 4 [intern org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176bd30bd01e>" funcall prog1 catch let progn if cond let] 10 [eq if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xd6add1797e7163c>"] 4 [not cond org-get-limited-outline-regexp concat re-search-forward if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 12 [and if let org-noter--parse-location-property let "#<lambda 0x101f176bd655b81e>" funcall prog1 catch let progn if cond let "#<lambda -0x4f2ab6effa64dff>" mapc] 3 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6add103fe7163c>" funcall prog1 catch let progn if cond let] 4 [progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x101f176bd6d7481e>" funcall prog1 catch let progn if cond let "#<lambda -0x4f2ab6effa64dff>"] 2 [org-noter--compare-locations and cond let cond let cond let "#<lambda 0xd6add1ba7e7163c>" funcall prog1 catch let progn if cond] 4 [cond org-element-type let* and let* < if let progn if cond let cond let "#<lambda 0xd6adb30f7e7163c>" funcall] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x101f176bb5e2281e>" funcall prog1 catch let progn if cond let "#<lambda -0x4f2ab6effa64dff>"] 2 [and cond let cond let cond let "#<lambda 0xd6adb3a57e7163c>" funcall prog1 catch let progn if cond let] 4 [save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if] 4 [let org-noter--parse-location-property let "#<lambda 0x101f176bb443781e>" funcall prog1 catch let progn if cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond] 3 [cond let cond let "#<lambda 0xd6adb34e7e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6adb34e7e7163c>" funcall] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let] 3 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while] 8 [or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f176bb54df01e>" funcall prog1 catch let progn] 5 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adb2dbfe7163c>"] 4 [let "#<lambda 0x101f176bd9a7101e>" funcall prog1 catch let progn if cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>"] 7 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xd6adb2977e7163c>" funcall prog1 catch let progn if] 4 [mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond let "#<lambda -0x4f2ab6effa64dff>" funcall catch let let* progn if org-element-ast-map] 7 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond let] 3 [derived-mode-p if org-noter--doc-file-property let "#<lambda 0xd6adb1fd7e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond] 4 [save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 4 [symbolp cond org-element-type let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond let "#<lambda -0x4f2ab6effa64dff>" funcall catch] 3 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adb13cfe7163c>"] 4 [and cond let cond let cond let "#<lambda 0xd6adb0fc7e7163c>" funcall prog1 catch let progn if cond let] 4 [let* vector setq if progn cond let cond let cond let "#<lambda 0xd6adb1497e7163c>" funcall prog1 catch let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv] 8 [cond org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176bdba2b81e>" funcall prog1] 3 [let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6addd00fe7163c>" funcall prog1 catch let progn if] 4 [org-element-type eq if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let*] 4 [setq cond let progn if cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond let] 3 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xd6addd807e7163c>" funcall] 4 [symbolp cond org-element-type let* and let* org-element-end or let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case] 4 [mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond let "#<lambda -0x4f2ab6effa64dff>" funcall catch] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6addd9e7e7163c>"] 4 [let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region] 8 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn] 4 [cconv-make-interpreted-closure function org-element-lineage-map if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101f176bb878381e>" funcall prog1 catch let progn if] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6addfadfe7163c>" funcall] 6 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion] 4 [cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176bd173281e>" funcall prog1 catch] 2 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xd6addf52fe7163c>" funcall prog1 catch] 4 [eq if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101f176bb8b6c01e>" funcall prog1 catch let progn] 4 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c545fe3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 9 [let* and let* < if let progn if cond let cond let "#<lambda 0xd6addf367e7163c>" funcall prog1 catch] 4 [let* progn if org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6added97e7163c>"] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xd6added97e7163c>" funcall] 4 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6add575fe7163c>" funcall] 7 [let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond let "#<lambda -0x4f2ab6effa64dff>"] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6add31afe7163c>" funcall] 4 [let* and let* vector setq if progn cond let cond let cond let "#<lambda 0xd6add4f47e7163c>" funcall prog1] 6 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [cond org-element-type let* and let* let and if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176bb77fb81e>"] 3 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xd6add7f77e7163c>"] 3 [progn if let org-noter--parse-location-property let "#<lambda 0x101f176bbab8a01e>" funcall prog1 catch let progn if cond let "#<lambda -0x4f2ab6effa64dff>" mapc] 7 [org-noter--parse-location-property let "#<lambda 0xd6add4387e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let] 3 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 8 [or if let org-noter--parse-location-property let "#<lambda 0x101f176bba40a81e>" funcall prog1 catch let progn if cond let "#<lambda -0x4f2ab6effa64dff>" mapc] 3 [and let* < if let progn if cond let cond let "#<lambda 0xd6add49d7e7163c>" funcall prog1 catch let] 4 [cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond] 3 [cond let cond let "#<lambda 0xd6add4867e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond] 4 [cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond let "#<lambda -0xcc59053ffa64dff>" funcall catch let let* progn if org-element-ast-map let*] 4 [save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn] 4 [not cond org-element-contents mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond let] 6 [let or progn if let org-noter--parse-location-property let "#<lambda 0x101f176bb61ac81e>" funcall prog1 catch let progn if cond let] 2 [org-noter--compare-locations and cond let cond let cond let "#<lambda 0xd6adf19f7e7163c>" funcall prog1 catch let progn if cond] 4 [and if if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if] 4 [let progn if cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond let "#<lambda -0x4f2ab6effa64dff>" funcall] 2 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6adf14afe7163c>" funcall prog1 catch let progn if cond] 4 [if save-excursion org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adf014fe7163c>" funcall prog1 catch] 4 [or if let org-noter--parse-location-property let "#<lambda 0xd6adf014fe7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc] 4 [catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond let "#<lambda -0xcc59053ffa64dff>"] 4 [eq if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children cond let* progn] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adf318fe7163c>" funcall prog1 catch] 4 [progn if let org-noter--parse-location-property let "#<lambda 0xd6adf318fe7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc] 4 [cond let cond let "#<lambda 0xd6adf2887e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond] 4 [if cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond let "#<lambda -0x4f2ab6effa64dff>" funcall catch let] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let] 2 [let* < if let progn if cond let cond let "#<lambda 0xd6ad86037e7163c>" funcall prog1 catch let progn] 6 [org-element-type let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond let "#<lambda -0xcc59053ffa64dff>" funcall catch let let*] 3 [and not and or org-back-to-heading save-excursion org-fold-heading let* save-excursion if org-fold-show-children cond let* progn if if] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xd6adf243fe7163c>" funcall prog1 catch let progn if cond] 4 [or let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let] 4 [let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176bd2c8901e>" funcall prog1 catch let] 6 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6ad8ad0fe7163c>" funcall] 4 [org-element-type let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond let] 6 [car if let cond let* and let* vector setq if progn cond let cond let cond] 3 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c5493e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 8 ["#<lambda 0xd6ad8a64fe7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc] 4 [cond org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6ad8a4b7e7163c>" funcall prog1] 7 [memq if or if while catch let org-element-lineage-map if or org-back-to-heading let* progn save-excursion if org-fold-show-children] 4 [progn if cond let "#<lambda 0x101f176bd09fe81e>" funcall prog1 catch let progn if cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond] 4 [and cond let cond let cond let "#<lambda 0xd6ad8a9bfe7163c>" funcall prog1 catch let progn if cond let] 3 [funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6ad89c8fe7163c>" funcall prog1] 4 [let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let] 8 [let "#<lambda 0x101f176bd133b01e>" funcall prog1 catch let progn if cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>"] 3 [or if let org-noter--parse-location-property let "#<lambda 0xd6ad8962fe7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc] 4 [let org-element-lineage let if let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [not cond org-element-type let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc] 2 [org-element--cache-verify-element and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if save-excursion if progn] 9 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176a2aa1881e>" funcall prog1 catch let progn if cond] 4 [cond let cond let "#<lambda 0xd6adee11fe7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond] 3 ["#<lambda 0xd6adf6a17e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc] 6 [let "#<lambda 0x101f176a2a26001e>" funcall prog1 catch let progn if cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond let "#<lambda -0x4f2ab6effa64dff>"] 2 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176a2f6e481e>" funcall prog1 catch let progn if cond let "#<lambda -0x4f2ab6effa64dff>"] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adedc77e7163c>" funcall prog1] 3 [let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176a2a05981e>" funcall prog1] 2 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xd6adefa37e7163c>" funcall prog1 catch let progn if cond] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101f176a2b46581e>" funcall prog1 catch] 9 [if let cond let* and let* vector setq if progn cond let cond let cond let] 3 [not cond org-get-limited-outline-regexp let* progn save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [pdf-info--normalize-file-or-buffer pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 6 [or if let org-noter--parse-location-property let "#<lambda 0xd6adf630fe7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc] 4 [let* progn if cond let cond let cond let "#<lambda 0xd6adf630fe7163c>" funcall prog1 catch let progn if] 4 [car eq if let cond let* and let* and if let* save-current-buffer org-element--cache-find and let* save-restriction] 4 [let let* progn if org-element-ast-map let* progn if org-element-map let* progn if org-noter--get-properties-end if let cond] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f176a286b381e>" funcall prog1 catch let progn if] 8 [let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let] 10 [outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 6 [org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6adf1127e7163c>" funcall] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adf49dfe7163c>" funcall prog1] 3 [while let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [cond let cond let cond let "#<lambda 0xd6adf4c2fe7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>"] 8 [or let if let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [if org-noter--doc-file-property let "#<lambda 0x101f176a1937501e>" funcall prog1 catch let progn if cond let "#<lambda -0x4f2ab6effa64dff>" mapc cond cond] 4 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let] 2 [goto-char "#<lambda 0xbe2c0773680b0>" funcall setq progn if while catch let org-element-lineage-map if or org-back-to-heading let* progn save-excursion] 4 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f176a2241481e>" funcall prog1 catch let] 2 [let* if let* vector setq if progn cond let cond let cond let "#<lambda 0xd6ade925fe7163c>" funcall prog1] 3 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 4 [let* and let* vector setq if progn cond let cond let cond let "#<lambda 0xd6ade8fb7e7163c>" funcall prog1] 4 [progn if org-noter--valid-session cond let* org-noter--parse-root let* goto-char save-excursion if progn progn unwind-protect save-current-buffer let if] 7 [if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let] 5 [progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 [progn if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cond let "#<lambda 0xd6adea487e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let] 9 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 4 [org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f176a22b4301e>" funcall prog1] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adeb0d7e7163c>" funcall] 4 [outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let] 5 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn if] 4 [let org-noter--parse-location-property let "#<lambda 0xd6adead9fe7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond] 9 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xd6adeaf97e7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc] 5 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101f176a22cd801e>" funcall prog1 catch let progn if cond] 16 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xd6adc98f7e7163c>" funcall prog1 catch let progn if] 4 [if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176a2e74181e>" funcall prog1 catch let progn if cond] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adc9707e7163c>" funcall prog1 catch] 3 ["#<lambda 0xd6adca3ffe7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond let "#<lambda -0xcc59053ffa64dff>" mapc] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adc941fe7163c>" funcall prog1 catch] 4 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 [let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176a2ddae01e>" funcall prog1 catch let progn if] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adcd3dfe7163c>" funcall] 3 [if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children] 4 [let progn if org-noter--set-notes-scroll redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 3 [run-hook-with-args-until-success or progn unwind-protect save-current-buffer let let org-noter--doc-approx-location let progn progn if let org-noter-sync-prev-page-or-chapter let while] 2 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let*] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adcbc97e7163c>" funcall prog1] 3 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if save-excursion if] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f176a219ab81e>" funcall] 6 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c36e623>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xd6adce80fe7163c>" funcall prog1 catch] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xd6adce80fe7163c>" funcall prog1 catch let progn if cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn if] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xd6adcf047e7163c>" funcall prog1 catch let progn if cond] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0xd6adcc78fe7163c>" funcall] 3 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [let cond let "#<lambda 0xd6adce4cfe7163c>" funcall prog1 catch let progn if cond let "#<lambda -0xcc59053ffa64dff>" mapc cond cond] 3 [not cond org-get-limited-outline-regexp let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [let* and and let* let let org-element--property org-element-parent setq while let org-element-lineage let if let org-before-first-heading-p] 4 [intern org-element--property or if let org-noter--parse-location-property let "#<lambda -0x446e9fd4068db54>" funcall prog1 catch let progn if cond let] 8 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let] 4 [Automatic\ GC] 1140)) (25847 63608 856900 152000) nil]
