
[profiler-profile "28.1" cpu #s(hash-table size 487 test equal rehash-size 1.5 rehash-threshold 0.8125 data (["#<compiled 0x11d9fcd587f25a0>" mapcar pdf-util-scale "#<compiled -0x1bfd6203ea759d81>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c375323>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 3 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 1330 [save-excursion let let org-fold-core-get-folding-spec if org-fold-folded-p not or and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold apply] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let cond] 4 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 639 [and if org-activate-dates font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x1568fcdc3d3d9a43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn] 4 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2448 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 24 [pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c3755e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 8 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 93 [org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 56 [org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 8 [org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 36 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 48 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 8 [let let org-noter--doc-approx-location let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while let] 2 [save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 16 ["#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>" funcall] 3 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while save-excursion] 4 [pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c3693a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 13 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 ["#<compiled -0x7c7c7f3e9393a3b>" accept-process-output pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 2 [save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 19 ["#<compiled 0xe5ccbc8e4dc62a3>" tq-process-buffer tq-filter "#<compiled -0x7c7c7f3e9393a3b>" accept-process-output pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 5 ["#<compiled 0x835113ebe0fe>" format-decode insert-file-contents-literally pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0xe5cc81b34dc62a3>" tq-process-buffer tq-filter "#<compiled -0x7c7c7f3e9393a3b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page] 1 [progn if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 16 [let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let* progn if if] 4 [and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 8 [let cond let org-cite-processor-has-capability-p and or let* org-cite-activate font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e266042219943>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end] 4 [let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 48 [org-element--cache-active-p and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while let] 2 [pdf-info--normalize-file-or-buffer pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 5 [progn or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--get-doc-window select-window let progn progn] 3 [save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 12 [and let cond let cond let "#<lambda 0x8e8874645a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8874705a9d6a8>" funcall let progn] 4 [assq cdr member if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if] 4 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 36 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree] 119 [mapconcat pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c375ea3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 15 [and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading outline-flag-subtree outline-hide-subtree if save-excursion if progn progn] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq] 8 [while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 68 [funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>"] 4 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 8 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x8e887f98da9d6a8>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e887f45da9d6a8>" funcall let progn] 4 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 63 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x8e887f815a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>"] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 40 [pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn] 12 ["#<compiled 0xe5cca2954dc62a3>" tq-process-buffer tq-filter "#<compiled -0x7c7c7f3e9393a3b>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c370ba3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 3 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [and progn or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay] 3 [= and or cond let* org-noter--parse-root org-element-contents if let progn progn if let progn if org-noter--get-view-info] 4 [let "#<lambda 0x101636d4b2ec7efe>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond] 3 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 25 [cond let progn if cond let "#<lambda 0x1650df81a8ab16f0>" mapc cond let "#<lambda 0x1650df81a8ab16f0>" funcall catch let let* org-element-map] 4 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 15 [and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 112 ["#<compiled -0x7c7c7f3e9393a3b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 5 [cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>" funcall catch let let*] 4 [org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 16 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [let cond let "#<lambda 0x8e8b14ebda9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>"] 4 [mode-line-default-help-echo redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 12 [and if progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let* progn if org-noter--get-properties-end if] 4 [pdf-info-query--parse-response "#<compiled 0xe5cc81b34dc62a3>" tq-process-buffer tq-filter "#<compiled -0x7c7c7f3e9393a3b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 5 [not cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>" funcall catch] 4 [pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 6 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37b663>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 12 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 8 [org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 8 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry let while let cond let*] 4 [or if let org-noter--parse-location-property let "#<lambda 0x8e8b127eda9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond] 4 ["#<compiled -0xca7ccc24f933ad8>" mapcar pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0xe5cca2954dc62a3>" tq-process-buffer tq-filter "#<compiled -0x7c7c7f3e9393a3b>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c379023>" mapcar] 3 [save-current-buffer org-element--cache-active-p if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [progn cond let cond let cond let "#<lambda 0x8e8b12acda9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 4 [org-cite-processor-has-capability-p and or let* org-cite-activate font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x1568ff818c3e8c43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let*] 4 [if while catch let org-footnote-next-reference-or-definition let org-activate-footnote-links font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ee7958cfa1d43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function seq-find org-cite-get-processor let org-cite-processor-has-capability-p and or] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8871805a9d6a8>" funcall let progn] 4 [let org-noter--parse-location-property let "#<lambda 0x8e8871805a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>"] 4 [let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region] 8 [cond org-noter--compare-locations and if cond let "#<lambda 0x101636d4bfde96fe>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8871d55a9d6a8>" funcall let progn] 4 [if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion] 4 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 12 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>" funcall catch let] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8842afda9d6a8>" funcall] 4 [if let org-element-at-point org-element-lineage let if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond let* progn] 4 [if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>" funcall] 2 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x8e885f765a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 4 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 20 [progn setq and or cond let* org-noter--parse-root org-element-contents let progn progn if let org-noter-sync-next-page-or-chapter let while] 3 ["#<compiled -0x17ea018c18545bd7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0xe5cc81b34dc62a3>" tq-process-buffer tq-filter "#<compiled -0x7c7c7f3e9393a3b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 1 [let "#<lambda 0x8e885e4b5a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond] 4 [if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children] 4 [if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 4 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 17 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e885e695a9d6a8>" funcall let progn] 4 [let cond let cond let "#<lambda 0x8e8852de5a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond] 4 [let org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x8e885a685a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>"] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [pdf-info--normalize-file-or-buffer pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 3 [cond let "#<lambda 0x8e885305da9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 4 [let org-element--cache-verify-element and if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e885cccda9d6a8>" funcall let progn] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 3 [let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page] 4 [org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if] 8 [let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>"] 3 [pdf-util-scale "#<compiled -0x1bfd6203ea759d81>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c54c9e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 3 [or if let org-noter--parse-location-property let "#<lambda 0x8e8859df5a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond] 4 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn] 4 [org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 4 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 19 [let cond let "#<lambda 0x8e884373da9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>"] 4 [and while let org-element-lineage let* if let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101636cc255f7efe>" funcall let progn if cond let] 2 [tq-process-buffer tq-filter "#<compiled -0x7c7c7f3e9393a3b>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c542de3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if] 1 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8843a4da9d6a8>" funcall let] 4 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry progn if while save-excursion] 4 [let "#<lambda 0x101636cc2557aefe>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond] 3 [pdf-info-query pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c543523>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 3 [macroexp-macroexpand macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101636cc242fbefe>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond] 2 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x8e884228da9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e884435da9d6a8>" funcall let] 4 [save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 4 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 31 [cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8846565a9d6a8>" funcall let progn] 4 [numberp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x8e8846f1da9d6a8>" funcall let progn if cond] 4 [progn cond let cond let cond let "#<lambda 0x8e8846f1da9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 4 [if org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101636cc2141b6fe>" funcall] 2 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 23 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 4 [cond org-element-type let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>" funcall catch let] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x8e884a3c5a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 4 [or let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 16 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map] 2 [org-back-to-heading save-excursion org-fold-heading let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [if let org-noter--parse-location-property let "#<lambda 0x8e89c1ffda9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let] 4 [save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage let if or org-back-to-heading] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101636cc230f36fe>" funcall let progn if] 4 [run-hook-with-args-until-success or progn if let org-noter--parse-location-property let "#<lambda 0x101636cc2300c6fe>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 2 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c547ca3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8840145a9d6a8>" funcall let] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [org-element-type let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>" funcall catch let let*] 3 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0x8e89c16cda9d6a8>" funcall let progn] 4 [pdf-info-query--parse-response "#<compiled 0xe463911c4dc62a3>" tq-process-buffer tq-filter "#<compiled -0x7c7c7f3e9393a3b>" accept-process-output pdf-info-query pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c5477e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8845c1da9d6a8>" funcall let progn] 4 [progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 [not cond org-element-contents not cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8845f7da9d6a8>" funcall] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x8e88478dda9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond] 4 [cond let cond let "#<lambda 0x8e8847b95a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let] 4 [let let* save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x101636d462af7efe>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond] 2 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101636d46226cefe>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 3 [org-element-contents not cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>" funcall] 4 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c55fd23>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 2 [let cond let cond let "#<lambda 0x8e886a0d5a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e886a0d5a9d6a8>"] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e886bc8da9d6a8>"] 4 [pdf-view-image-size pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 6 [and cond let cond let cond let "#<lambda 0x8e8868d5da9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 4 [and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101636d46ebb1efe>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 3 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x8e8868ceda9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond] 4 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 4 [let progn if cond let cond let "#<lambda 0x8e886ab65a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 4 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0x8e88690b5a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 4 ["#<compiled -0x156e84b2f956e343>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer let if let progn] 4 [cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let] 4 [save-current-buffer progn if org-element--cache-sync if if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading if] 4 [mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>" funcall catch] 3 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x8e885900da9d6a8>"] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 12 [org-noter--parse-location-property let "#<lambda 0x101636d46efc8efe>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 3 [progn if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8869f6da9d6a8>" funcall] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [pdf-view-current-page number-to-string eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101636d46cdd6efe>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>"] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e88539e5a9d6a8>" funcall] 4 [org-element--cache-active-p if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let*] 4 [org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101636d46c547efe>" funcall let progn] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8853b4da9d6a8>" funcall let progn] 4 [setq let while let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8850ea5a9d6a8>" funcall] 4 [progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>" funcall catch] 2 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x8e8850c5da9d6a8>" funcall let] 4 [org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e886b5bda9d6a8>" funcall let] 4 [function org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if let] 4 [cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if let] 4 [if progn cond let cond let cond let "#<lambda 0x8e886d61da9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>"] 4 [org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children] 8 [font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ef5dbf573ff43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if] 4 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 11 [let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 12 [org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0x8e886d725a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 4 [font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e8f254e8d8543>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer let if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e886dd0da9d6a8>" funcall let progn] 4 [eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e886c2c5a9d6a8>" funcall let] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn] 4 [org-noter--compare-locations and if cond let "#<lambda 0x101636d4660766fe>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond] 2 [cond let cond let "#<lambda 0x8e8856ce5a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let] 4 [save-restriction save-excursion progn unwind-protect let* let org-fold-region progn unwind-protect let* org-unfontify-region font-lock-unfontify-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ef7cef16fd843>" jit-lock--run-functions] 4 [pdf-info-process-assert-running pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8857bada9d6a8>" funcall let progn] 6 [and cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>" funcall catch] 2 [cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x8e8857475a9d6a8>" funcall let progn if cond let] 4 [progn or progn get-buffer-window or progn progn if let org-noter--get-doc-window select-window let progn progn if let] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let "#<lambda 0x8e8856ce5a9d6a8>" funcall let progn] 4 [and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x8e886c06da9d6a8>" funcall let progn if] 4 [cond let "#<lambda 0x101636d46bc2a956>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc] 3 [let* progn progn if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn] 3 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x8e886dd0da9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 3 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101636d46b425156>" funcall let progn if cond let] 6 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e886d61da9d6a8>" funcall] 6 [let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond let "#<lambda 0x1541b56c4460f53d>" funcall] 2 [cdr member if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if] 8 [cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let] 7 [let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond let "#<lambda 0x1541b56c4460f53d>" funcall catch let let* org-element-map] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8850deda9d6a8>" funcall let] 4 [progn cond let cond let cond let "#<lambda 0x8e8850c5da9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101636d46cf23156>" funcall let progn if] 10 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x8e8851d75a9d6a8>" funcall] 4 [if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if] 8 [progn cond let cond let cond let "#<lambda 0x8e8850ea5a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 7 [org-element--cache-active-p and if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map or let* progn if] 4 [mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond let "#<lambda 0x1541b56c4460f53d>" funcall catch] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e886f99da9d6a8>" funcall let progn] 4 [or and if if setq let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond let "#<lambda 0x1541b56c4460f53d>" funcall catch let let*] 2 [symbolp cond org-element-type let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8850a3da9d6a8>" funcall let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8869f6da9d6a8>" funcall let progn] 7 [org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer] 4 [cond org-element-contents mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond let "#<lambda 0x1541b56c4460f53d>"] 2 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x8e8869bdda9d6a8>" funcall] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e885900da9d6a8>" funcall let] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x8e8868a55a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond] 4 [org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101636d46e307956>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc] 2 [if org-noter--doc-file-property let "#<lambda 0x8e886ab65a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>"] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn] 8 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101636d46ea45956>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>"] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8868ceda9d6a8>" funcall let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8868d5da9d6a8>" funcall let progn] 3 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map] 7 [cond let "#<lambda 0x8e886bc8da9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 4 [or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [vector setq if progn cond let cond let cond let "#<lambda 0x8e886a0d5a9d6a8>" funcall let progn if cond] 4 [and cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond let "#<lambda 0x1541b56c4460f53d>" funcall catch] 2 ["#<lambda 0x8e886ac9da9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let] 4 [org-noter--compare-locations and cond let cond let cond let "#<lambda 0x8e886b04da9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>"] 6 [let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [pdf-info-query--parse-response "#<compiled 0xe5cca88b4dc62a3>" tq-process-buffer tq-filter "#<compiled -0x7c7c7f3e9393a3b>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c540623>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x8e88478dda9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>"] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8845f7da9d6a8>"] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 7 [org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101636cc2f67e156>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc] 2 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let*] 4 [frame-parameter if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [list setq progn cond let cond let cond let "#<lambda 0x8e89c1465a9d6a8>" funcall let progn if cond let] 6 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x8e88403eda9d6a8>"] 4 [and if cond let "#<lambda 0x101636cc23352956>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let] 3 [symbolp cond org-element-type memq not and while let org-element-lineage let* if let org-up-heading-safe while save-excursion progn] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x8e89c1f75a9d6a8>" funcall let] 6 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x101636cc20d00956>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc cond] 2 [if org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101636cc20de1956>" funcall let] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e88416ada9d6a8>"] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e89c054da9d6a8>" funcall] 4 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [or let if let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e88450f5a9d6a8>" funcall] 4 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 12 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let] 3 [if save-excursion org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [not and cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>" funcall] 2 [save-restriction save-excursion org-outline-level funcall max format setq if while let* save-excursion if org-fold-show-children progn if while] 4 [function setq let let* org-element-map let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x101636cc242f3156>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc cond] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8843a4da9d6a8>" funcall] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x8e884373da9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>"] 6 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101636cc25cd1156>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc] 2 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e885a325a9d6a8>"] 7 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e885ab55a9d6a8>" funcall] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101636cc2a30e956>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>"] 2 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x8e885ae05a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 4 [pdf-cache-get-image pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 6 [org-element--cache-active-p and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101636cc294cc956>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>"] 2 [if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>" funcall catch let] 4 [and if cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e885a685a9d6a8>" funcall let progn] 1 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101636cc2d1e7156>" funcall let progn if] 6 [and cond let cond let cond let "#<lambda 0x8e885a735a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 4 [progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn] 9 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map] 5 [let org-before-first-heading-p if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 5 [and progn or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if] 5 [let org-invisible-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer] 4 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c549163>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 2 [let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn] 4 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0xe5cc81b34dc62a3>" tq-process-buffer tq-filter "#<compiled -0x7c7c7f3e9393a3b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 8 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101636cc2a085956>" funcall let progn if cond let] 6 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x8e885fa45a9d6a8>" funcall let progn] 8 [> and if let org-noter--parse-location-property let "#<lambda 0x101636cc2a47b956>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc cond] 3 [let org-noter--parse-location-property let "#<lambda 0x101636cc2ba90956>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>"] 3 [cond let cond let "#<lambda 0x8e8842afda9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let] 4 [not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if] 4 [unwind-protect save-current-buffer let progn if org-noter--set-notes-scroll redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if] 3 [pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c5795e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x8e8841385a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>"] 3 [mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>" funcall catch let let* org-element-map let progn] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility] 4 [or if let org-noter--parse-location-property let "#<lambda 0x101636d4bfa34956>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8871d55a9d6a8>" funcall let] 2 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8b11bbda9d6a8>"] 3 [pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x8e8b14495a9d6a8>" funcall] 1 [if org-noter--doc-file-property let "#<lambda 0x8e8b159dda9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>"] 3 [image-mode-window-put image-set-window-vscroll image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [derived-mode-p if org-noter--doc-file-property let "#<lambda 0x8e8b17c75a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let] 3 [save-current-buffer org-element--cache-active-p if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn] 4 [org-element--cache-root let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 6 ["#<compiled 0xe5cc81b34dc62a3>" tq-process-buffer tq-filter "#<compiled -0x7c7c7f3e9393a3b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 2 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101636d4b757f156>" funcall let progn if cond] 12 [and if let org-noter--parse-location-property let "#<lambda 0x8e887a595a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond] 2 [progn frame-live-p and if progn if org-noter--valid-session if let org-noter--doc-approx-location let progn progn if let org-noter-sync-prev-page-or-chapter] 3 [progn if let org-noter--parse-location-property let "#<lambda 0x101636d4b4cc3956>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond] 3 [symbolp cond org-element-contents mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x8e887be1da9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>"] 3 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 7 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x8e88749b5a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 4 [cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info] 5 [let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond let "#<lambda 0x1541b56c4460f53d>"] 2 [let cond let cond let "#<lambda 0x8e887f815a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x8e887f98da9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>"] 7 [and while let org-element-lineage let if let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion] 10 [if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond] 3 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101636d4b542e956>" funcall let progn] 2 [cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond] 3 [timer-set-idle-time run-with-idle-timer vector setq progn if if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101636d4b43a7156>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>"] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x8e887f23da9d6a8>" funcall let] 5 ["#<compiled -0x1bfd6203ea759d81>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c375ae3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 5 [let or progn if let org-noter--parse-location-property let "#<lambda 0x101636cc2462a156>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc] 2 [cons vector setq if progn cond let cond let cond let "#<lambda 0x8e88753dda9d6a8>" funcall let progn if] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101636cc2405b156>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>"] 2 [org-element-contents not cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond let "#<lambda 0x1541b56c4460f53d>" funcall] 3 [progn if let* if let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let] 9 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x8e88759a5a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 3 [progn cond org-noter--compare-locations and if cond let "#<lambda 0x101636cc24369956>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc] 2 [let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond let "#<lambda 0xa2fc56a3460f53d>" funcall catch let let* org-element-map] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x8e887c395a9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>"] 3 [cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond let "#<lambda 0x1541b56c4460f53d>" funcall catch let] 2 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 4 [let org-element--cache-verify-element and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if] 10 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101636d44ee7d156>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc] 2 [not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion] 5 ["#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond let "#<lambda 0x1541b56c4460f53d>" funcall] 2 [and if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 3 [if let org-element-lineage let* if let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 ["#<lambda 0x101636d44e890156>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc cond cond let "#<lambda 0x1541b56c4460f53d>" mapc cond let] 2 [let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let] 3 [progn if unwind-protect let* let org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101636d45a0db956>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc] 2 [if let org-noter--parse-location-property let "#<lambda 0x8e887e39da9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc cond cond let] 4 [org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0x101636d456610156>" funcall let progn if cond let "#<lambda 0x1541b56c4460f53d>" mapc] 2 [pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 2 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x8e887ea0da9d6a8>" funcall let progn if cond let "#<lambda 0xa2fc56a3460f53d>" mapc] 2 [save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree] 9 [not cond let while let let catch let* org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter] 3 [Automatic\ GC] 970)) (25847 59826 737811 806000) nil]
