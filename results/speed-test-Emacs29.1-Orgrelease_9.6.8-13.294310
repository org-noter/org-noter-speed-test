
[profiler-profile "28.1" cpu #s(hash-table size 487 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([cond setq let save-excursion if let* org-element--current-element org-element-copy let* if while let save-excursion org-element--parse-elements cond let*] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 6 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 6 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let cond let] 4 [let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let cond let progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 15 [cconv-make-interpreted-closure function org-element-map let let cond let progn if org-element-copy let* if while let save-excursion org-element--parse-elements] 4 [save-excursion org-element-headline-parser cond setq let save-excursion if let* org-element--current-element org-element-copy let* if while let save-excursion org-element--parse-elements] 4 [if save-excursion org-element--get-node-properties let* save-excursion org-element-headline-parser cond setq let save-excursion if let* org-element--current-element org-element-copy let* if] 4 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 31 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let*] 8 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2469 [not cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch] 3 [org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let] 2 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if] 7 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 659 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 4 [function cons vector setq if progn cond let cond let "#<lambda 0x156b28a61549d66c>" funcall let progn if cond] 2 [and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 83 [org-element--cache-active-p and if let org-element-at-point org-element-lineage let if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond] 6 [let cond let cond let "#<lambda 0x156b28c5cd49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond] 6 [or set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility] 4 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c368463>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 14 [let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 52 [org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 52 [cond org-element-type let while let let* save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if] 6 [while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 47 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b28f02549d66c>" funcall let progn] 2 [progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 8 [org-element--cache-active-p if let org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion] 7 [integerp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2da6e549d66c>" funcall let progn if cond] 2 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 64 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point org-element-lineage let if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond] 14 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let] 6 [and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if] 8 [let "#<lambda 0x156b2e8a1d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 2 [let org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect] 11 ["#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch let let* org-element-map let] 4 [org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch let] 3 [save-current-buffer not if progn if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2df20549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 19 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2df9b549d66c>" funcall let progn] 3 [save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 12 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion] 6 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x156b2dc35d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 6 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 24 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c3723a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 3 [or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if save-excursion if] 7 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while] 4 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 24 [remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry progn if] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x156b2dcfcd49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 6 [org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 12 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2eb46d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 3 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 757 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree] 115 [org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if] 4 [org-element-property and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 4 [not and cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall] 3 [let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let] 12 [cond let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>"] 2 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2d02a549d66c>" funcall let progn] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let*] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map or] 4 [kill-this-buffer-enabled-p redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [let "#<lambda 0x156b2d645549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 4 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 49 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 10 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let] 4 [let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x156b2d3cad49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 [save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 16 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x10184d75e053a48e>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 2 [featurep and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 [progn if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let] 9 [and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2daec549d66c>" funcall] 4 [if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 4 [let let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while let dotimes let] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2d5df549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 36 [progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch] 2 [let let* org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let] 4 [org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let*] 3 [funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading] 16 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 16 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2d4e0d49d66c>" funcall let progn if cond let] 4 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 28 [cconv--analyze-function cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv] 9 [not cond org-get-limited-outline-regexp concat re-search-forward if save-excursion org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if] 4 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 17 [org-element--cache-find progn if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while let dotimes let measure-time] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c74f549d66c>" funcall let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 4 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c578223>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c742d49d66c>" funcall] 4 [progn if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 16 [not cond org-get-limited-outline-regexp concat re-search-forward if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 8 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect] 4 [save-current-buffer not if progn if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10184d74497cdc8e>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c614549d66c>" funcall let] 4 [if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree] 4 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 7 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c670d49d66c>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2d227549d66c>" funcall let progn] 4 [or and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 53 [if org-element-property < if let progn if cond let cond let "#<lambda 0x156b2caa4d49d66c>" funcall let progn if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 6 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c50bd49d66c>"] 4 [remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while] 4 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if] 4 [and not and or org-back-to-heading let* progn save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x10184d75d5acbc8e>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c375d49d66c>" funcall let progn] 4 [and if cond let "#<lambda 0x10184d75d53cf48e>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c17f549d66c>" funcall] 4 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 7 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2c095549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2c13cd49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if] 8 [and let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch let let* org-element-map] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let] 12 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0x156b2c38fd49d66c>" funcall let progn] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry progn if while] 8 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10184d75ccc2ec8e>" funcall let progn] 7 [if if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 4 [symbolp cond org-element-type let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 [let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>"] 3 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x10184d744a5ad48e>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 3 [cond let cond let cond let "#<lambda 0x156b2cece549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 4 [catch let* org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while] 3 [function setq let let* org-element-map let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10184d74462a948e>" funcall let progn if] 3 [eq cond org-noter--relative-position-to-view let cond let "#<lambda 0x156b2cdea549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 4 [org-element--cache-active-p and if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if] 8 [eq cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 3 [pdf-info-query--parse-response "#<compiled 0x1cf879acc22f223>" tq-process-buffer tq-filter "#<compiled -0x7232bee655d02fb>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c5438a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 1 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x156b2c185549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 ["#<compiled -0x17ea018aa91299d7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1cf872c4c22f223>" tq-process-buffer tq-filter "#<compiled -0x7232bee655d02fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 17 [let "#<lambda 0x10184d7444ab5c8e>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2cc43d49d66c>" funcall] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2cd79549d66c>" funcall let] 4 [if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let] 4 [or let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 20 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry] 14 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2cb3b549d66c>" funcall] 4 [save-excursion save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [let cond let cond let "#<lambda 0x156b2ca9f549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond] 4 [and progn or progn get-buffer-window or progn progn if let org-noter--get-doc-window internal--before-with-selected-window let let progn progn] 4 [pdf-info--normalize-file-or-buffer pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 2 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10184d746786348e>" funcall let] 3 [if let org-noter--focus-notes-region if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if] 4 [let "#<lambda 0x156b2c8f3d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 4 [or if unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c826549d66c>" funcall let] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c9c9549d66c>"] 4 [pdf-view-image-size pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 3 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c541363>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 2 [not cond org-element-contents not cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let] 4 [if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children] 4 ["#<compiled 0x1cf872c4c22f223>" tq-process-buffer tq-filter "#<compiled -0x7232bee655d02fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 11 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c9dd549d66c>" funcall let progn] 4 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 8 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn] 2 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2c934d49d66c>" funcall] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x156b36dee549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 4 [let "#<lambda 0x156b36dee549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 4 [save-excursion org-outline-level funcall let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10184d75d3ade48e>" funcall let progn] 2 [plist-get if org-element-property < if let progn if cond let cond let "#<lambda 0x156b36db1549d66c>" funcall let progn] 4 [if org-noter--doc-file-property let "#<lambda 0x156b36c18d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [setq if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 8 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b36c4a549d66c>"] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36ce5549d66c>" funcall] 4 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1cf872c4c22f223>" tq-process-buffer tq-filter "#<compiled -0x7232bee655d02fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 8 [mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch] 3 [let org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36f36d49d66c>" funcall let progn] 4 [let "#<lambda 0x10184d75d0ec848e>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 2 [save-excursion let let org-fold-core-get-folding-spec if org-fold-folded-p not or and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold apply] 4 [org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn] 13 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x156b368d2549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [org-element--cache-active-p if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [org-element-property < if let progn if cond let cond let "#<lambda 0x156b3688d549d66c>" funcall let progn if cond] 4 [pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b3681b549d66c>" funcall let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36a4bd49d66c>" funcall let progn] 4 [org-element--cache-active-p if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let*] 4 [pdf-info-query--escape mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 2 [let or progn if let org-noter--parse-location-property let "#<lambda 0x156b36bde549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 [org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion] 4 ["#<lambda 0x10184d746e6e648e>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let] 2 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect] 4 [org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b3583f549d66c>" funcall] 4 [cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch let let* org-element-map let progn progn] 4 [or if let org-noter--parse-location-property let "#<lambda 0x10184d746ebb9c8e>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b35867d49d66c>" funcall let] 4 [save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 16 [cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch let let*] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x10184d746ad6448e>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 2 [progn cond let cond let cond let "#<lambda 0x156b366d3549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 [let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region] 4 [if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36929549d66c>" funcall] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b366a4549d66c>" funcall let] 4 [if progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 4 [and if cond let "#<lambda 0x10184d746a9f948e>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let] 2 [function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler] 4 [or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b36ac9d49d66c>" funcall let progn] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36ad0549d66c>" funcall] 4 [let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall] 4 [if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b3679c549d66c>" funcall let progn] 4 [if org-element-property < if let progn if cond let cond let "#<lambda 0x156b3679c549d66c>" funcall let progn if] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36022d49d66c>"] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function] 6 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b3679c549d66c>"] 4 [if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 8 [org-element-type let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let] 2 [symbolp cond org-element-contents not cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let] 2 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 14 [cond org-element-contents not cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>"] 6 [not cond format let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 8 [if org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10184d746988ee26>" funcall let] 2 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x156b36aa2549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let] 7 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 6 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility] 4 [vector setq if progn cond let cond let cond let "#<lambda 0x156b36686549d66c>" funcall let progn if cond] 7 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b366d3549d66c>"] 7 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 12 [<= and if if let* if let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36878549d66c>" funcall] 6 [let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36855549d66c>" funcall let] 6 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 4 [org-noter--parse-root org-element-contents let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while let dotimes] 3 [not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if] 4 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let] 7 [and if let org-noter--parse-location-property let "#<lambda 0x156b3583f549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond] 4 [or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10184d746eb6c626>" funcall let progn if] 6 [save-current-buffer org-element--cache-active-p if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn] 4 [cconv-make-interpreted-closure function setq let let* org-element-map or let* progn if org-noter--get-properties-end if let cond let* progn] 4 [org-noter--doc-file-property let "#<lambda 0x10184d746bd5be26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 6 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36a4bd49d66c>" funcall] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion] 10 [or progn unwind-protect save-current-buffer let let org-noter--doc-approx-location let progn progn if let org-noter-sync-prev-page-or-chapter let while let] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b3681b549d66c>" funcall let progn] 4 [memql and if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x10184d746a4e0626>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond] 3 [progn cond let cond let cond let "#<lambda 0x156b368a0549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 [cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b3688d549d66c>" funcall let progn if cond let] 4 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10184d75d0986e26>" funcall let] 4 [and if cond let "#<lambda 0x10184d75d0e6fe26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let] 2 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b36eb0d49d66c>" funcall] 3 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 8 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x10184d75d270de26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 2 [org-element-property vector setq if progn cond let cond let cond let "#<lambda 0x156b36f36d49d66c>" funcall let progn if] 4 [save-restriction or and if let while let catch or setq cond let* progn progn unwind-protect save-current-buffer] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b36f63d49d66c>" funcall let progn if] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36cc8549d66c>" funcall let progn] 7 [org-noter--parse-location-property let "#<lambda 0x10184d75d1d48626>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 3 [- 1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b36c4a549d66c>" funcall] 3 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10184d75d0b5ce26>" funcall let progn if] 23 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x156b36db1549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [and save-excursion org-at-heading-p and or org-back-to-heading let* progn save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36dee549d66c>" funcall let] 6 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2c934d49d66c>" funcall let progn] 3 [let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c9dd549d66c>" funcall let] 7 [mod if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case] 4 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 16 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2c837549d66c>" funcall] 4 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 8 [or if let org-noter--parse-location-property let "#<lambda 0x10184d75d76cfe26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond] 3 [let* org-knuth-hash mod if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if] 4 [or progn get-buffer-window or progn progn if let org-noter--get-doc-window if let org-noter--doc-approx-location let progn progn if] 2 [org-noter--parse-location-property let "#<lambda 0x156b2c826549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 [cond let "#<lambda 0x10184d7467b73e26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 2 [derived-mode-p if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 4 ["#<compiled 0x1cf879acc22f223>" tq-process-buffer tq-filter "#<compiled -0x7232bee655d02fb>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c5462a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2cb11d49d66c>" funcall] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0x10184d7461c36e26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 2 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2ca9f549d66c>" funcall let progn] 4 [if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>" funcall catch let] 3 [integerp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2ccbe549d66c>" funcall let progn if cond] 6 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10184d746031ae26>" funcall let progn if cond let] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2cb3b549d66c>"] 4 [mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>" funcall catch let let* org-element-map let let] 2 [let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [not and cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>" funcall] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2cd79549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [cond org-element-contents mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch let let* org-element-map] 2 [not if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading let* progn save-excursion if org-fold-show-children] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c1a8549d66c>" funcall] 7 [cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if let progn if org-noter--get-view-info let] 7 [if let org-noter--parse-location-property let "#<lambda 0x156b2cdea549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let] 7 [save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn] 4 [image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2c2ef549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [window-inside-pixel-edges pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [if org-element-property < if let progn if cond let cond let "#<lambda 0x156b2cece549d66c>" funcall let progn if] 3 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 3 [not cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>" funcall catch] 3 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [eq and cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall] 4 [progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage let if or org-back-to-heading if] 4 [setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2c400d49d66c>" funcall let progn if] 3 [cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect] 8 [and if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map] 6 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2c095549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c17f549d66c>" funcall let progn] 4 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2c50c549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 3 [not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion] 4 [buffer-live-p and if progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c375d49d66c>" funcall] 4 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 12 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x10184d75d5822e26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 7 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2c33ed49d66c>" funcall] 1 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x10184d75d469e626>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond] 2 [cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let] 3 [if org-noter-nov--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 6 [org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn] 4 [if let org-noter--parse-location-property let "#<lambda 0x10184d75c0a4de26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let] 7 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2c614549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 1 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x10184d75c0765626>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2ca76d49d66c>" funcall let progn] 3 [org-element-contents not cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall] 3 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if] 4 [let* org-element-map or let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect save-current-buffer let] 4 [not if progn if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let] 9 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 11 [tq-queue-pop tq-process-buffer tq-filter "#<compiled -0x7232bee655d02fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 3 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2d5df549d66c>" funcall] 5 [unwind-protect save-current-buffer let let progn progn if let org-noter--get-current-view org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler] 3 [not if progn if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 4 [pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10184d75e0643e26>" funcall let progn] 3 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x156b2d0ad549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 3 [cdr member if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let* progn if] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10184d74447ab626>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>"] 2 [org-outline-level funcall max format setq if while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [let "#<lambda 0x10184d7443e31e26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2d645549d66c>" funcall let progn] 3 [not cond org-element-type let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 2 [org-noter--parse-location-property let "#<lambda 0x156b2d7a2d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 2 [if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if] 4 [org-element-type let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let] 7 [let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility] 7 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 6 [and if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x10184d75e6d78e26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 4 [if org-element-property < if let progn if cond let cond let "#<lambda 0x156b2dd49d49d66c>" funcall let progn if] 2 [org-noter--compare-locations and if cond let "#<lambda 0x10184d75e5ad1626>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond] 2 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x156b2ed24549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 3 [save-restriction save-excursion org-outline-level funcall let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 6 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map] 5 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x156b2eb13d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 [if let org-noter--parse-location-property let "#<lambda 0x10184d75e70b0626>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let] 2 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn] 4 [cond let progn if cond let cond let "#<lambda 0x156b2dce7d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 1 [let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>"] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 1 [eq and if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [save-excursion org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let] 4 [replace-buffer-in-windows kill-buffer "#<compiled -0x1c8be0665a9564df>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1cf872c4c22f223>" tq-process-buffer tq-filter "#<compiled -0x7232bee655d02fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page] 2 [org-noter--parse-location-property let "#<lambda 0x10184d75e6940e26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 2 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter] 3 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x156b2e8a1d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 6 [org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10184d75edd56626>" funcall let] 2 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x156b2dbfc549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond] 3 [and if progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let] 3 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let*] 6 [mode-line-default-help-echo redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 3 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x10184d75ecdd8e26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 6 [progn cond let cond let cond let "#<lambda 0x156b28f02549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 1 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x10184d75efaa9626>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>"] 2 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer] 3 [org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [save-current-buffer progn if org-element--cache-sync if if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading let*] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map] 2 [numberp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x10184d75ed042e26>" funcall let progn if cond] 2 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 4 [if save-restriction save-excursion org-outline-level funcall max format setq if while let* save-excursion if org-fold-show-children progn if] 4 [org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 5 [cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while] 2 [if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch let] 3 [and if cond let "#<lambda 0x10184d73bca48626>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let] 3 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let progn] 1 [let progn eval let* org-babel-execute:elisp funcall save-current-buffer let setq progn let* cond let* progn if let*] 6 [Automatic\ GC] 878)) (25845 6392 252245 151000) nil]
