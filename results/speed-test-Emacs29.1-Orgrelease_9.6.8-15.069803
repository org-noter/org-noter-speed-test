
[profiler-profile "28.1" cpu #s(hash-table size 487 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 40 [while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 96 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2480 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 1282 [let cond let cond let "#<lambda 0x156b28932549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if] 4 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree] 124 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 680 ["#<compiled -0x1c8be07589efe8df>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1cf872c4c22f223>" tq-process-buffer tq-filter "#<compiled -0x7232bee655d02fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 9 [save-current-buffer org-element--cache-active-p and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 123 [progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch] 4 [save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 8 [pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 1 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if] 4 [mode-line-default-help-echo redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 62 [org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 67 ["#<lambda 0x156b28d44549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let] 4 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 8 [and if let org-noter--parse-location-property let "#<lambda 0x156b28eb7549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond] 4 [save-current-buffer not if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading let* progn save-excursion if] 12 [if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children cond let*] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 16 [let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall] 7 [and if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 8 [eq or and save-current-buffer org-element--cache-active-p and if let org-element-at-point or let and if org-end-of-subtree save-excursion let*] 4 [cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let] 7 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 12 [pdf-info-query--escape mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 2 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 59 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map or let* progn] 8 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map] 4 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 8 [let cond let "#<lambda 0x156b2e83dd49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 8 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let] 3 [progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if] 8 [org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while] 8 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [pdf-cache--data-get pdf-cache-number-of-pages number-to-string progn condition-case ignore-errors or eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn] 4 [image-mode-window-get pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 6 [and cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch] 4 [let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region] 8 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 12 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 30 ["#<compiled -0x17ea0193cb5decd7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1cf872c4c22f223>" tq-process-buffer tq-filter "#<compiled -0x7232bee655d02fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 14 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2ddcc549d66c>" funcall let] 4 [not if progn if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [if save-restriction save-excursion org-outline-level funcall max format setq if while let* save-excursion if org-fold-show-children progn if] 4 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0x156b2dce7d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 [org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion] 4 [run-hook-with-args redisplay--pre-redisplay-functions redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 4 [catch let* org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if] 4 [let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 16 [window-inside-pixel-edges pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 3 [not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if] 4 [org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 8 [let* org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler] 4 [save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 57 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect] 4 [eq and cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall] 4 [org-element--cache-active-p and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [not cond org-element-type let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 [let cond let "#<lambda 0x156b2d01c549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 48 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10184d744311148e>" funcall let progn if cond let] 3 [function cons vector setq if progn cond let cond let "#<lambda 0x156b2d02a549d66c>" funcall let progn if cond] 4 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 44 [or progn org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2d7a2d49d66c>" funcall let] 4 [outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x10184d7445d1448e>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 3 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x156b2d263549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [member if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create put-text-property if if if save-restriction save-excursion progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 4 ["#<lambda 0x156b2d698549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2d4f3549d66c>" funcall let progn] 4 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1cf872c4c22f223>" tq-process-buffer tq-filter "#<compiled -0x7232bee655d02fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 15 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 14 [and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c5795e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 9 [cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if let progn if org-noter--get-view-info let] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2c74f549d66c>" funcall] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2c742d49d66c>" funcall] 4 [if unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 3 [let let progn progn if let org-noter--get-current-view org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page] 4 [org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [let cond let cond let "#<lambda 0x156b2c70cd49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond] 6 [let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 10 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2ca23d49d66c>" funcall let progn] 6 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [org-element-property vector setq if progn cond let cond let cond let "#<lambda 0x156b2ca76d49d66c>" funcall let progn if] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 24 [pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c549163>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 9 [let "#<lambda 0x156b2c614549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 4 [let* progn save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let] 2 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2caa4d49d66c>" funcall] 4 [org-element--cache-active-p and if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond] 4 [pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1cf872c4c22f223>" tq-process-buffer tq-filter "#<compiled -0x7232bee655d02fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if] 4 [remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c33ed49d66c>" funcall] 4 [and if let org-noter--parse-location-property let "#<lambda 0x156b2c375d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond] 4 [save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 20 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c50c549d66c>"] 4 [org-element-type memq not and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p] 4 ["#<compiled 0x1cf872c4c22f223>" tq-process-buffer tq-filter "#<compiled -0x7232bee655d02fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 5 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [vector setq if progn cond let cond let cond let "#<lambda 0x156b2c095549d66c>" funcall let progn if cond] 4 [setq if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c13cd49d66c>" funcall] 4 [progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 [font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e8a7f28609743>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer let if] 4 ["#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch let let* org-element-map let] 4 [let cond let cond let "#<lambda 0x156b2c3add49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond] 4 [if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if] 8 [pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect] 4 [mapconcat pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 3 [save-current-buffer not if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c3dad49d66c>" funcall] 4 [org-element--cache-active-p if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if] 4 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let] 4 [insert-file-contents-literally pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1cf872c4c22f223>" tq-process-buffer tq-filter "#<compiled -0x7232bee655d02fb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 5 [eq cond let progn if cond let cond let "#<lambda 0x156b2ce6b549d66c>" funcall let progn if cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2cece549d66c>" funcall] 4 [cond org-element-contents mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>"] 3 [let org-activate-footnote-links font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e8d32826bfb43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect] 4 [progn cond let cond let cond let "#<lambda 0x156b2cdea549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 [while catch org-activate-links--text-properties if org-activate-links font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156e80966a0a2443>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let*] 8 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2c185549d66c>" funcall] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2c1a8549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2cc43d49d66c>" funcall] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond] 4 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10184d7447266c8e>" funcall let progn if cond let] 3 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 8 [vector setq if progn cond let cond let cond let "#<lambda 0x156b2cfd9d49d66c>" funcall let progn if cond] 4 [pdf-info--normalize-file-or-buffer pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 2 [pdf-info-query pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c54e223>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 6 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 8 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x156b2cb3b549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond] 4 [org-noter--parse-location-property let "#<lambda 0x10184d74638cd48e>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2ccbe549d66c>" funcall let progn] 4 [> cond let org-noter--note-after-tipping-point and setq cond let cond let "#<lambda 0x156b2ccbe549d66c>" funcall let progn if cond] 4 [if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if] 8 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2cd2c549d66c>" funcall let] 4 [if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 8 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let* progn if org-noter--get-properties-end] 4 [let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>"] 2 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2ca92d49d66c>" funcall let progn] 3 [save-excursion org-at-heading-p and if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer] 4 [tq-process-buffer tq-filter "#<compiled -0x7232bee655d02fb>" accept-process-output pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2cb58549d66c>"] 4 [save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch let let*] 3 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c826549d66c>"] 4 [org-outline-level funcall max format setq if while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if] 4 [< if let progn if cond let cond let "#<lambda 0x156b2c837549d66c>" funcall let progn if cond let] 4 [cond org-element-type let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c9dd549d66c>" funcall] 4 [progn save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 4 [or if unwind-protect let* let org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [list setq progn cond let cond let cond let "#<lambda 0x156b36dee549d66c>" funcall let progn if cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36dee549d66c>" funcall] 4 [set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 4 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0x156b36c18d49d66c>" funcall let progn] 4 [if save-excursion org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36c4a549d66c>" funcall let] 4 [and not and or org-back-to-heading save-excursion org-fold-heading let* save-excursion if org-fold-show-children cond let* progn if if] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x10184d75d305348e>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36f63d49d66c>" funcall let] 4 [funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [eq not if if if let org-element-at-point let org-before-first-heading-p if org-fold-show-children cond let* progn if if] 4 [if let "#<lambda 0x156b36f36d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c5583e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x156b36eb0d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b368d2549d66c>"] 4 [if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x156b3688d549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c55bae3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 3 [cond let progn if cond let cond let "#<lambda 0x156b368a0549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b3681b549d66c>" funcall let] 4 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 3 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10184d746ba9d48e>" funcall let progn if] 3 [mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch let let* org-element-map let progn] 4 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0x156b36bde549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 [let org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading outline-flag-subtree outline-hide-subtree if save-excursion if progn progn] 4 [progn if org-noter--valid-session if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map save-excursion] 4 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10184d746ebb9c8e>" funcall] 3 [eq cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b35867d49d66c>" funcall let] 4 [let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch let let* org-element-map] 6 [and let cond let cond let "#<lambda 0x156b35832d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 4 [progn if cond let cond let "#<lambda 0x156b35832d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 4 [let progn if cond let "#<lambda -0x149c2e902e7f7f9>" mapc cond cond let "#<lambda -0x149c2e902e7f7f9>" funcall catch let let* org-element-map] 4 [cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch let] 7 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36878549d66c>" funcall let progn] 4 [not cond org-get-limited-outline-regexp concat re-search-forward if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 8 [or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b366d3549d66c>" funcall let progn] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x10184d746cde548e>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36686549d66c>" funcall] 4 ["#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall] 3 [cond let cond let "#<lambda 0x156b36929549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let] 4 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10184d746af5f48e>" funcall let] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b369cfd49d66c>" funcall] 4 [let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch let] 2 [setq progn cond let cond let cond let "#<lambda 0x156b36aa2549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b36ac9d49d66c>" funcall let progn if] 4 [progn cond let cond let cond let "#<lambda 0x156b36ad0549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 [derived-mode-p if org-noter--doc-file-property let "#<lambda 0x156b3667bd49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let] 4 [org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 8 [let org-fold-region progn unwind-protect let* org-unfontify-region font-lock-unfontify-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156f2768b1d2f843>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b3679c549d66c>" funcall] 4 [and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10184d7462d3ec8e>" funcall let progn if] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36022d49d66c>" funcall let progn] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b3679c549d66c>"] 4 [and let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility] 4 [if org-element-property < if let progn if cond let cond let "#<lambda 0x156b3667bd49d66c>" funcall let progn if] 3 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while] 4 [cond let cond let "#<lambda 0x156b36ad0549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let] 3 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 18 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36ac9d49d66c>"] 3 ["#<lambda 0x10184d746988ee26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let] 3 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b36aa2549d66c>" funcall] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x10184d746a3ca626>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond] 3 [org-noter--doc-file-property let "#<lambda 0x10184d746afc4e26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 3 [mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>" funcall catch] 2 [symbolp cond org-element-type let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 2 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10184d746c193e26>" funcall let progn] 6 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 6 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b35832d49d66c>" funcall let progn if cond] 4 [org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 8 [let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>" funcall] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b35867d49d66c>" funcall let] 4 [cdr member if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if] 4 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c5441e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 9 [cconv-make-interpreted-closure function setq let let* org-element-map or let* progn if org-noter--get-properties-end if let cond let* progn] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36bde549d66c>" funcall let] 7 [progn if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x10184d746bd5be26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>"] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36a4bd49d66c>" funcall let progn] 4 [let "#<lambda 0x10184d746bf18e26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond] 2 [if org-element-property < if let progn if cond let cond let "#<lambda 0x156b3681b549d66c>" funcall let progn if] 4 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond] 4 [setq while let org-element-lineage let if let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn] 4 [cond org-element-type let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>" funcall catch let] 3 [cond org-element-contents not cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>"] 3 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let] 3 [and if cond let "#<lambda 0x10184d75d01fce26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x156b36eb0d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [plist-get if org-element-property <= and if let* if let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b36f36d49d66c>" funcall] 3 [let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36f63d49d66c>" funcall let progn] 7 [if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x156b36cc8549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 7 [progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>" funcall catch] 2 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 6 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let] 4 [list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading] 8 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b36db1549d66c>" funcall] 3 [if let org-noter--doc-approx-location let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while let] 2 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b36dee549d66c>" funcall let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x10184d75d158be26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>"] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2c934d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10184d75d6658e26>" funcall let progn if cond let] 3 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c541363>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 11 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c837549d66c>"] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c9c9549d66c>" funcall] 4 [org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10184d7466685e26>" funcall let progn] 2 [org-element--cache-active-p if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [let "#<lambda 0x10184d7460578626>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond] 3 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 4 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 7 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2ca9f549d66c>" funcall let progn] 4 [or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter-sync-prev-page-or-chapter let while let dotimes let] 3 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x156b2cd2c549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn] 4 [and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point and let org-up-heading-safe while save-excursion] 4 [cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let] 2 [and cond let cond let cond let "#<lambda 0x156b2cfd9d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 4 [funcall let progn if cond let "#<lambda -0x14889417a6567f9>" mapc cond let "#<lambda -0x14889417a6567f9>" funcall catch let let* org-element-map] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let] 7 [org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0x10184d744657be26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 2 [kill-this-buffer-enabled-p redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure] 6 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility] 4 [symbolp cond org-element-type let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>" funcall catch] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 7 [save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage let if or org-back-to-heading] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2cece549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 6 [memq not and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2ce6b549d66c>" funcall let progn] 6 [cond let cond let "#<lambda 0x156b2c3dad49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let] 7 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [let cond let "#<lambda 0x156b2c38fd49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>"] 4 [org-element-contents mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>" funcall] 2 [org-element-type let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let] 6 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x156b2c3add49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x10184d744b29d626>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond] 2 [let* org-noter--parse-root org-element-property goto-char save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 4 [if org-element-property < if let progn if cond let cond let "#<lambda 0x156b2c17f549d66c>" funcall let progn if] 7 [and not and or org-back-to-heading let* progn save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10184d75d5397e26>" funcall let progn] 2 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c50c549d66c>" funcall] 3 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let*] 4 [org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 3 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let "#<lambda 0x156b2c33ed49d66c>" funcall] 3 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 4 [save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if let progn progn] 4 [window-pixel-edges window-at-side-p mode-line-default-help-echo redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 3 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion] 4 [cond let "#<lambda 0x10184d75c2988626>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 2 [and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x156b2d227549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 3 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10184d75c144a626>" funcall let] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x156b2c670d49d66c>" funcall let progn] 4 [let "#<lambda 0x10184d75c0a4de26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond] 6 ["#<lambda 0x156b2c614549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let] 2 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x10184d75c0765626>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond] 2 [cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>" funcall catch let] 6 ["#<lambda 0x156b2ca23d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let] 3 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10184d75c05ef626>" funcall let progn if cond] 3 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if] 9 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let*] 4 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10184d744025a626>" funcall let progn if] 2 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let progn progn] 3 [and cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>" funcall catch] 3 [let if let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 4 [org-noter--doc-file-property let "#<lambda 0x10184d74415b5e26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 6 [let cond let "#<lambda 0x156b2d142549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>"] 3 [save-excursion org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let] 4 [integerp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x10184d744fbf6626>" funcall let progn if cond] 2 [let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion] 6 [pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 3 [or and if if setq let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 7 [not if progn if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 14 [org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children cond let* progn if if] 9 [and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x10184d74495ede26>" funcall let progn if] 8 [< if let progn if cond let cond let "#<lambda 0x156b2d9a1549d66c>" funcall let progn if cond let] 4 [if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree] 4 ["#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>" funcall catch let let* org-element-map let] 6 [org-noter--parse-location-property let "#<lambda 0x156b2d2c4d49d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc] 3 [keymap-canonicalize redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let] 5 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn] 4 [not cond org-element-type let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>" funcall catch let let* org-element-map let let] 2 [org-element--cache-active-p and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion] 4 [< if let progn if cond let cond let "#<lambda 0x156b2d263549d66c>" funcall let progn if cond let] 3 [gethash or let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect] 4 [and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10184d7444712e26>" funcall let progn if] 2 [cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 3 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x10184d7443e31e26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 2 [let "#<lambda 0x156b2d645549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x156b2d7a2d49d66c>" funcall let progn] 1 [let cond let cond let "#<lambda 0x156b2d01c549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond] 8 [org-element--cache-find progn if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [not if progn if let org-element-at-point let org-before-first-heading-p if org-fold-show-children cond let* progn if if org-show-set-visibility] 4 [eq cond let progn if cond let cond let "#<lambda 0x156b2dd49d49d66c>" funcall let progn if cond let] 3 [derived-mode-p if org-noter--doc-file-property let "#<lambda 0x10184d75e5ad1626>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let] 2 [not and cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall] 3 [cdr let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 8 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x156b2dfd5549d66c>" funcall let progn if cond let "#<lambda 0x10f1dd718a2cc978>"] 1 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10184d75e1b21626>" funcall let progn if cond] 3 ["#<compiled 0x17cfadd294bcd17f>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c372563>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 1 [if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion] 4 [not cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let "#<lambda 0x10f1dd718a2cc978>" funcall catch] 3 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while] 4 [1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let] 7 [cond org-element-contents org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if] 4 [or setq org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility] 6 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x10184d75e6940e26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc] 2 [if cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond] 4 [cond let* while if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if] 9 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let progn] 6 [and not and or org-back-to-heading save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [let "#<lambda 0x10184d75feac7e26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let "#<lambda 0x156b2e8a1d49d66c>"] 3 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x10184d75edd56626>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>"] 2 [if org-element-property and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if] 6 [let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>"] 3 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x10184d75fcdbae26>" funcall let progn if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond] 2 [let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [org-element--cache-active-p if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 9 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 5 [org-noter--get-notes-window if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 4 [if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [not if progn if let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 9 [save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 10 [or progn progn progn let* org-knuth-hash mod if let* save-current-buffer org-element--cache-find progn if if setq let] 4 [if cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond cond let "#<lambda 0x11dd32f96a2cc978>" mapc cond let "#<lambda 0x11dd32f96a2cc978>" funcall catch let] 2 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 2 [symbolp cond org-element-contents mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond cond let "#<lambda 0x10f1dd718a2cc978>" mapc cond let] 3 [let progn eval let* org-babel-execute:elisp funcall save-current-buffer let setq progn let* cond let* progn if let*] 2 [Automatic\ GC] 897)) (25845 6351 752752 524000) nil]
