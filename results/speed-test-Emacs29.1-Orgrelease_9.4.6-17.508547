
[profiler-profile "28.1" cpu #s(hash-table size 487 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 1482 [outline-back-to-heading condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 25 [org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 18 [font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ef7d268a97043>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer let if] 4 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 1993 [not or cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 183 [condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 62 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 519 [function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while let] 1 [progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch] 4 [while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 84 [cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 72 [condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 4 [outline-back-to-heading condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 29 [let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 20 [let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 37 [org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 104 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 52 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 18 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9c9709d2e4484>" funcall let progn if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn] 2 [progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 87 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 80 [unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if let] 4 [user-error condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 431 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9c96dfd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 ["#<compiled -0x1f92babf3305881>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c36f723>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 6 [cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 39 [and cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to cond let] 4 [condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 36 [re-search-forward if save-excursion org-flag-region save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 49 [if let* progn if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9cf211d2e4484>" funcall let progn if cond] 4 [save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 31 [or cdr let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 83 [condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 44 [null save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 47 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 8 [and let cond let org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while save-excursion progn if] 32 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c376523>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 12 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9cf57252e4484>" funcall let progn if] 4 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 15 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9cf4fe52e4484>"] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xbc9cf4fe52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 14 [max min let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9cf736d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [remove-overlays org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 12 [progn let let save-excursion org-element-property-drawer-parser cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion] 4 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 11 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map or] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let] 2 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9c9141d2e4484>" funcall let progn if] 4 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 40 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 21 ["#<compiled -0x7cc9add54c5b5bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 5 [outline-back-to-heading condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 16 [cond let cond let cond let "#<lambda 0xbc9c9067d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 16 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 15 [mapconcat pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c372563>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 4 [save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 76 [tq-process-buffer tq-filter "#<compiled -0x7cc9add54c5b5bb>" accept-process-output pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 3 ["#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall] 7 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9cf07752e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [symbolp cond org-element-type let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch] 4 ["#<compiled -0x17ea0192b2afaad7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x5eb827ea1a5b523>" tq-process-buffer tq-filter "#<compiled -0x7cc9add54c5b5bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 23 [< if let progn if cond let cond let "#<lambda 0xbc9cf15152e4484>" funcall let progn if cond let] 4 [if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch let] 3 [let org-noter--doc-file-property let "#<lambda 0x101ff12f48bd4842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond let "#<lambda -0x146e94c277549ccb>"] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let "#<lambda 0xbc9cf112d2e4484>" funcall let progn if] 4 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 32 [pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 11 [cconv-make-interpreted-closure function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9cf22f52e4484>" funcall let progn if cond let] 4 [and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9cf22f52e4484>" funcall let progn if] 4 [setq if while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 8 [progn unwind-protect save-current-buffer let let org-noter--doc-approx-location let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes] 2 [let cond let "#<lambda 0xbc9debb7d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [or let org-noter--doc-file-property let "#<lambda 0x101ff12f7e337842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond let] 2 [or let org-noter--doc-file-property let "#<lambda 0xbc9deb1dd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let] 4 [internal--before-save-selected-window pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 5 [save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 37 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 2 [if org-element-property < if let progn if cond let cond let "#<lambda 0xbc9dead252e4484>" funcall let progn if] 4 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9dead252e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de654d2e4484>"] 4 [pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 6 [progn unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 26 [symbolp cond org-element-type let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [goto-char save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f7ae70842>" funcall let progn if cond] 4 [if let org-noter--parse-location-property let "#<lambda 0xbc9de6d6d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let] 4 [let org-noter--parse-location-property let "#<lambda 0xbc9de6d6d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [not cond org-get-limited-outline-regexp let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [tq-process-buffer tq-filter "#<compiled -0x7cc9add54c5b5bb>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c37b663>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 4 [if let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 12 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de77f52e4484>" funcall let] 4 [or let org-noter--doc-file-property let "#<lambda 0xbc9deecad2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let] 4 [if let org-noter--parse-location-property let "#<lambda 0x101ff12f7008e842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond let] 7 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9dee30d2e4484>" funcall let progn if cond] 4 [if if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 4 [pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c3788e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 3 [org-flag-region if save-excursion org-flag-heading let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [pdf-info--normalize-file-or-buffer pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 16 [let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 28 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry] 4 [while org-font-lock-add-priority-faces font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156eda67307b9843>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let] 8 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c378563>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de92e52e4484>" funcall let progn if cond] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de92e52e4484>" funcall let] 4 [symbolp cond org-element-type let "#<lambda -0x146e949e9cfd63cb>" funcall catch let let* org-element-map let progn progn if let progn] 4 [cconv-make-interpreted-closure function setq let let* org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let] 3 [progn let* make-org-noter--view-info let progn progn if let progn if org-noter--get-view-info let progn progn if let] 4 [cond let "#<lambda 0xbc9df480d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 ["#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch let let* org-element-map let] 4 [and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 13 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9df53252e4484>" funcall] 4 [org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 8 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9dec2152e4484>" funcall] 4 [let while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall] 4 [let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 12 [cdr let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12f76c29042>" funcall let progn] 2 [if progn cond let cond let cond let "#<lambda 0xbc9df44b52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [mapconcat pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 3 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c54a863>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 1 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9dec6a52e4484>" funcall let progn if cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9dec9f52e4484>" funcall let progn] 4 [let cond let cond let "#<lambda 0xbc9dec9f52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x101ff12f6c07e042>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9df0dc52e4484>" funcall let progn if cond] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0xbc9df0dc52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df08952e4484>" funcall let progn] 4 [outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let] 8 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f74734042>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc] 2 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xbc9df3b652e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let] 2 [pdf-info-query--parse-response "#<compiled 0x5eb827ea1a5b523>" tq-process-buffer tq-filter "#<compiled -0x7cc9add54c5b5bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df327d2e4484>" funcall let progn] 4 [if save-excursion org-flag-region save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df1d0d2e4484>" funcall let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let let progn progn if let] 2 [let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 20 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff1295ccdd042>" funcall let progn if cond] 13 [org-noter--get-doc-window internal--before-with-selected-window let let progn progn if let org-noter--get-current-view org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler] 4 [if while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9df729d2e4484>" funcall let progn if cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9df729d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 8 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9df14e52e4484>" funcall let] 4 [or progn get-buffer-window or progn progn if let org-noter--get-doc-window if let org-noter--doc-approx-location let progn progn if] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df1bb52e4484>" funcall] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df1bb52e4484>"] 4 [org-noter--compare-locations and if cond let "#<lambda 0x101ff12945247042>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9df7c552e4484>" funcall let progn if cond] 4 [org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 13 [mapcar "#<compiled 0x2e8174fb0f665a0>" mapcar pdf-util-scale "#<compiled -0x1f92babf3305881>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c54c6e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12b647fa842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>"] 3 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch let let* org-element-map] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d2771d2e4484>"] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let cond] 4 [org-noter--relative-position-to-view let cond let "#<lambda 0xbc9d24a0d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let] 4 [org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks] 4 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d278ed2e4484>" funcall let progn if cond] 4 [let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 17 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c540ea3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 8 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if let progn if org-noter--get-view-info] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 43 [while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [if progn let let save-excursion org-element-property-drawer-parser cond let save-excursion org-element--current-element setq if while let let* save-restriction] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12acc2ef042>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>"] 6 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0xbc9d260a52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d22acd2e4484>"] 4 [let "#<lambda 0x101ff12ad63f3842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond let "#<lambda -0x146e94c277549ccb>" mapc cond] 7 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9d2221d2e4484>" funcall let] 4 [let progn if cond let cond let "#<lambda 0xbc9d2221d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [progn or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--get-current-view org-noter--get-view-info let progn progn] 4 [if let org-noter--parse-location-property let "#<lambda 0xbc9d2247d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let] 4 [and if let org-noter--parse-location-property let "#<lambda 0x101ff12ad4e06842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d21f0d2e4484>" funcall let progn if cond] 8 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d21f0d2e4484>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d21fd52e4484>" funcall let] 4 ["#<lambda 0xbc9d21fd52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12ad53a8042>" funcall let progn if] 12 [org-noter--parse-location-property let "#<lambda 0xbc9d22c252e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d2589d2e4484>" funcall let progn if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d2589d2e4484>" funcall let progn] 4 [and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d2472d2e4484>" funcall let progn if] 4 [let org-noter--doc-file-property let "#<lambda 0xbc9d2472d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [funcall redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [progn if cond let cond let "#<lambda 0xbc9d2526d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xbc9d230f52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [or if let org-noter--parse-location-property let "#<lambda 0xbc9d230f52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if let progn if org-noter--get-view-info] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de091d2e4484>" funcall let progn if cond] 4 [if let org-noter--parse-location-property let "#<lambda 0x101ff12ad9974842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond let] 3 [or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12ad9974842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond] 4 [cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de13ad2e4484>" funcall let progn if] 4 [if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn progn] 4 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9de1bdd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101ff12ada7b0842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de2eed2e4484>" funcall let progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de2c3d2e4484>" funcall let progn if cond] 4 ["#<compiled -0x1054290df6533ad7>" mapcar pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x5e62ad971a5b523>" tq-process-buffer tq-filter "#<compiled -0x7cc9add54c5b5bb>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c5592e3>" mapcar] 2 [progn cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion let*] 4 [vector setq if progn cond let cond let cond let "#<lambda 0xbc9d216152e4484>" funcall let progn if cond] 4 [unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 32 [> and if let org-noter--parse-location-property let "#<lambda 0xbc9d216152e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [cond cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond let "#<lambda -0x146e94c277549ccb>" mapc cond let "#<lambda -0x146e94c277549ccb>" funcall catch let] 2 [integerp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9d208b52e4484>" funcall let progn if cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12adebb7842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond let] 2 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d2045d2e4484>" funcall] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9d2045d2e4484>" funcall] 4 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de0b6d2e4484>"] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de0b6d2e4484>"] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0xbc9de03bd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [and let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 8 [if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 35 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12addc1c842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond] 3 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101ff12addc1c842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc] 4 ["#<compiled 0x5e62ad971a5b523>" tq-process-buffer tq-filter "#<compiled -0x7cc9add54c5b5bb>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c5441e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 1 [derived-mode-p not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 7 [progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 12 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 4 [org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 12 [let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond let "#<lambda -0x146e94c277549ccb>" mapc cond let "#<lambda -0x146e94c277549ccb>" funcall] 2 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x5eb827ea1a5b523>" tq-process-buffer tq-filter "#<compiled -0x7cc9add54c5b5bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 18 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de7bed2e4484>" funcall let progn if cond] 4 ["#<lambda 0xbc9de3a4d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let] 4 [org-element-property vector setq if progn cond let cond let cond let "#<lambda 0xbc9de3a4d2e4484>" funcall let progn if] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9de269d2e4484>" funcall let progn if] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9de269d2e4484>" funcall] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de392d2e4484>" funcall let] 4 [or let org-noter--doc-file-property let "#<lambda 0x101ff12adb525842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond let] 7 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9de3bfd2e4484>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de3bfd2e4484>" funcall let progn if cond] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de33052e4484>" funcall let progn] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12adbb6f842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond] 6 [vector setq if progn cond let cond let cond let "#<lambda 0xbc9de315d2e4484>" funcall let progn if cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de55a52e4484>" funcall let] 4 [cond let while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>"] 4 ["#<lambda 0x101ff12aea291842>" funcall let progn if cond let "#<lambda -0x146e94c277549ccb>" mapc cond cond let "#<lambda -0x146e94c277549ccb>" mapc cond let] 7 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let "#<lambda 0xbc9de56bd2e4484>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9dc26c52e4484>" funcall let progn] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9dc26c52e4484>" funcall let progn] 4 [outline-flag-region outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 12 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9dce37d2e4484>"] 4 [let "#<lambda 0xbc9dceed52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [plist-get if org-element-property or if let org-noter--parse-location-property let "#<lambda 0xbc9dceed52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12ae9c4eaba>" funcall let] 12 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9dce37d2e4484>" funcall let] 4 [save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 8 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12ae9969aba>" funcall let progn if cond let] 2 ["#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9dc26c52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9dc26c52e4484>"] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de315d2e4484>" funcall let progn if] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12adb080aba>" funcall let progn if cond let] 7 [cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101ff12adb5f52ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond] 7 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 4 [not and cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall] 4 [and if cond let "#<lambda 0x101ff12add7e2aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let] 4 [vector setq if progn cond let cond let cond let "#<lambda 0xbc9de392d2e4484>" funcall let progn if cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de3a4d2e4484>" funcall] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de3a4d2e4484>" funcall let progn if cond] 4 [and if cond let "#<lambda 0x101ff12add3392ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let] 6 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de733d2e4484>" funcall let progn] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9de733d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12aeb8322ba>" funcall let progn if cond] 39 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9de7bed2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let] 4 [pdf-view-image-size pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 7 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12aeb6d72ba>" funcall let progn if] 3 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de49d52e4484>"] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9de4c852e4484>" funcall] 4 [progn cond let cond let cond let "#<lambda 0xbc9de490d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de490d2e4484>" funcall let progn] 4 [progn buffer-chars-modified-tick = and or cond let* org-noter--parse-root org-element-contents let progn progn if let org-noter-sync-prev-page-or-chapter let] 2 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de46ad2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de46ad2e4484>" funcall let progn if cond] 4 [let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de5c1d2e4484>" funcall let progn] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0xbc9de5c1d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de7ccd2e4484>" funcall let progn if] 4 [cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let] 2 [org-element-type let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de03bd2e4484>" funcall let progn if cond] 4 [let* progn save-excursion or let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12ad2fcf2ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>"] 3 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12adee382ba>" funcall let progn if] 18 [cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d208b52e4484>" funcall let] 4 [org-noter--doc-file-property let "#<lambda 0xbc9d208b52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [and cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall catch] 6 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn] 4 [save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion let* progn if org-cycle-hide-drawers] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let let] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de2c3d2e4484>" funcall] 4 [not cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 4 [symbolp cond org-element-type let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall catch] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9de1bdd2e4484>" funcall let progn if] 4 [cond let cond let cond let "#<lambda 0xbc9de1bdd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101ff12ad9d002ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de17352e4484>" funcall let] 4 [not cond org-element-type let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall catch let let* org-element-map let let] 2 [let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de13ad2e4484>"] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 2 [progn cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12ada963aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 4 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d230f52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 3 [org-noter--parse-location-property let "#<lambda 0x101ff12ad02092ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9d2526d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d23a8d2e4484>" funcall let progn] 4 [org-noter--parse-location-property let "#<lambda 0xbc9d23a8d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d2472d2e4484>" funcall let] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d2589d2e4484>" funcall] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12ad7f5c2ba>" funcall let progn if cond let] 10 [org-noter--parse-location-property let "#<lambda 0xbc9d258452e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [and if cond let "#<lambda 0x101ff12ad18c12ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let] 7 [vector setq if progn cond let cond let cond let "#<lambda 0xbc9d22c252e4484>" funcall let progn if cond] 4 [cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let] 4 [outline-back-to-heading condition-case org-back-to-heading save-excursion org-flag-heading let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12ad4f80aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d21f0d2e4484>" funcall let] 4 [not cond org-element-type let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12ad6c862ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond] 7 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d2221d2e4484>" funcall let progn] 4 [let "#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry if] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d22acd2e4484>" funcall let progn if cond let] 4 [org-get-valid-level let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12ad5b412ba>" funcall let progn] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d260a52e4484>" funcall let progn] 4 [let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall catch let let* org-element-map] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while] 2 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12ad45a8aba>" funcall let progn if cond] 4 [or let org-noter--doc-file-property let "#<lambda 0xbc9d2ac2d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d2ac2d2e4484>" funcall let progn] 4 ["#<lambda 0x101ff12b7ce11aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let] 3 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9d2a7452e4484>"] 4 [integerp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12acce642ba>" funcall let progn if cond] 4 [while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 8 [mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch] 4 ["#<lambda 0xbc9d278ed2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let] 4 [or if let org-noter--parse-location-property let "#<lambda 0x101ff12b7c9272ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond] 7 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d24ddd2e4484>" funcall let] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9d24ddd2e4484>" funcall let progn] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9d24ddd2e4484>" funcall let progn if cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d24a0d2e4484>" funcall let progn] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9d24a0d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [let* org-noter--parse-root org-element-contents if let progn progn if let progn if org-noter--get-view-info let progn progn if] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9d2771d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9d257cd2e4484>"] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12b65f512ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>"] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9df7abd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [or cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 4 [cond org-element-type let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [mode-line-default-help-echo redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 3 [org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 8 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9df1bb52e4484>" funcall let progn if cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9df1bb52e4484>" funcall let progn if cond] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff1295c4faaba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df14e52e4484>" funcall let progn] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff1295c083aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 2 [org-noter--doc-file-property let "#<lambda 0x101ff1295c083aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 4 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 12 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9df03752e4484>" funcall let progn if cond] 4 [cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch let let* org-element-map let progn progn] 4 [< if let progn if cond let cond let "#<lambda 0xbc9df07ed2e4484>" funcall let progn if cond let] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12f6c307aba>" funcall let progn] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df327d2e4484>" funcall] 6 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f747e62ba>" funcall let progn if] 14 [outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df08952e4484>" funcall] 5 ["#<lambda 0xbc9df0dc52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let] 3 [cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch let let*] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9ded78d2e4484>" funcall let] 6 [let cond let "#<lambda 0xbc9df44b52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [cond org-element-contents mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>"] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df42fd2e4484>" funcall] 5 [org-noter--valid-session if let org-noter--focus-notes-region if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn] 4 [setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9df41452e4484>" funcall let progn if] 5 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [eq and cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9df48d52e4484>" funcall] 3 [not and cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall] 2 [or progn if let org-noter--parse-location-property let "#<lambda 0xbc9df6e652e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 2 [save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if let progn progn] 8 [let* progn cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion] 4 [org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while let dotimes] 3 [org-noter--compare-locations and if cond let "#<lambda 0x101ff12f7c9452ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 2 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map or let* progn] 4 [and if cond let "#<lambda 0x101ff12f7ca63aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let] 2 [org-noter--compare-locations and cond let cond let cond let "#<lambda 0xbc9def49d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 5 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f7c294aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12f7c294aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>"] 4 [let "#<lambda 0xbc9de904d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12f703522ba>" funcall let progn if] 6 ["#<lambda 0xbc9ded87d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let] 4 [plist-get if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101ff12f7fec62ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 4 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12f7f6432ba>" funcall let progn if cond] 6 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12f7b7ffaba>" funcall let progn] 2 [if let "#<lambda 0x101ff12f7b7ffaba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f7bf002ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9de64fd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f7a021aba>"] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9de654d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [and if cond let "#<lambda 0x101ff12f7a05b2ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9dead252e4484>" funcall let progn if cond] 3 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101ff12f7a83a2ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 6 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9deb6d52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 7 [mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall catch] 2 [let "#<lambda 0xbc9deb1dd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond] 4 [mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12f7ee152ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond] 7 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9de8b1d2e4484>"] 3 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f4c1f7aba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn] 3 [if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 3 [vector setq if progn cond let cond let cond let "#<lambda 0xbc9cf07752e4484>" funcall let progn if cond] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f7877eaba>"] 7 [cond let cond let "#<lambda 0xbc9cf00dd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let] 5 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 2 [cond let "#<lambda 0x101ff12f49d1aaba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xbc9c90f652e4484>" funcall let progn] 6 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map or let* progn] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9c9141d2e4484>" funcall let progn if cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f4a95caba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let] 3 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f4a95caba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond] 4 ["#<lambda 0xbc9cf7bbd2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let "#<lambda -0x146e949e9cfd63cb>" funcall catch let let*] 5 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x101ff12f4bd4a2ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond] 2 [org-element-type let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let] 4 [cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101ff12f4b84f2ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond] 7 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12f7d51aaba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>"] 6 [org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 7 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12f4c78caba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>"] 2 [let "#<lambda 0x101ff12f4c78caba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9cf34d52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 4 [org-back-to-heading progn condition-case if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 3 [let org-noter--parse-location-property let "#<lambda 0xbc9cf211d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>"] 5 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101ff12f4d4f42ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>"] 7 [tq-queue-pop tq-process-buffer tq-filter "#<compiled -0x7cc9add54c5b5bb>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c36e623>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 2 [let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion] 4 [progn if org-noter-pdf--approx-location-cons run-hook-with-args-until-success or progn unwind-protect save-current-buffer let let org-noter--doc-approx-location let progn progn if let] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9c94f5d2e4484>" funcall let progn if cond] 1 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101ff12f43a6d2ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond] 6 ["#<compiled -0x1c8cb2292f6e96df>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x5eb827ea1a5b523>" tq-process-buffer tq-filter "#<compiled -0x7cc9add54c5b5bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 3 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xbc9c96f2d2e4484>"] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 3 [let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>"] 6 ["#<lambda 0xbc9c9a1752e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond cond let "#<lambda -0x146e949e9cfd63cb>" mapc cond let] 5 [let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101ff12f45713aba>" funcall let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xbc9c9afc52e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>"] 5 [let "#<lambda 0x101ff12f45b5c2ba>" funcall let progn if cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond] 4 [org-not-nil if let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 2 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0xbc9c91a5d2e4484>" funcall let progn if cond let "#<lambda -0x146e949e9cfd63cb>" mapc] 2 [mapc cond cond let "#<lambda -0x1fad642adcfd63cb>" mapc cond let "#<lambda -0x1fad642adcfd63cb>" funcall catch let let* org-element-map let let] 4 [cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if let progn if org-noter--get-view-info let progn] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda -0xc518e9acd0d7aec>" funcall let progn if] 4 [let progn eval let* org-babel-execute:elisp funcall let setq if let* cond let* progn if let* org-babel-execute-src-block] 5 [Automatic\ GC] 1175)) (25843 53435 802375 786000) nil]
