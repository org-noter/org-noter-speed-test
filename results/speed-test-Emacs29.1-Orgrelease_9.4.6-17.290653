
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([and let cond let org-end-of-subtree progn narrow-to-region let* progn progn unwind-protect let save-excursion org-narrow-to-subtree if save-restriction] 4 [list nconc list let let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion] 4 [progn let save-excursion org-element-section-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let*] 4 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 1303 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa72653aa9e18d84>" funcall let progn if cond] 4 [org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 96 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 497 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2098 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 24 [or cdr let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 74 [if save-excursion org-flag-region save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 12 [not or cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 247 [user-error condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 406 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 67 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 59 ["#<compiled -0x1c8d76390c0994df>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1fc0ccee5ccc9b23>" tq-process-buffer tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0104efdf5314>" funcall let progn if cond] 4 [and let cond let org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while save-excursion progn if] 48 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 8 [or goto-char save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0112e7df5314>" funcall let progn if] 4 [tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 2 [cond org-element-contents mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>"] 4 [consp and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b08482518e>"] 2 [org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 18 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc01fc3fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 32 [condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 72 [cond let cond let "#<lambda 0xabc01f7dfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 4 [outline-flag-region outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 8 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let progn progn] 2 [progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 74 [outline-back-to-heading condition-case org-back-to-heading save-excursion org-flag-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [pdf-info-query pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c36fc63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 12 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 28 ["#<compiled -0x17ea0183d40816d7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1fc0ccee5ccc9b23>" tq-process-buffer tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 17 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let progn] 4 [not cond org-element-type let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch] 4 [null save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 58 [let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 8 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc017d5fdf5314>" funcall] 4 [let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch let let* org-element-map] 4 [mapconcat pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc015c17df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 ["#<lambda 0xabc0145c7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 4 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc0157f7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 32 [mapcar "#<compiled 0x138d10e1c3acc529>" mapcar pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1fc0b1432ccc9b23>" tq-process-buffer tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c3779a3>"] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0135b7df5314>" funcall let progn if cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc0135b7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b38518c98e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond] 2 [and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 18 [if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [cons vector setq if progn cond let cond let cond let "#<lambda 0xabc013b2fdf5314>" funcall let progn if] 4 [cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch let] 4 [cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 92 [or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b08865518e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond] 2 [kill-this-buffer-enabled-p redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 30 [let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 17 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc01c517df5314>" funcall let progn] 4 [if org-element-property let cond let while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b08ee8c18e>" funcall let progn if] 5 [save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 20 [if let org-noter--parse-location-property let "#<lambda 0x1018d6b08b1c598e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let] 2 [org-element-contents mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1018d6b089e4098e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 3 ["#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc01d2d7df5314>" funcall let] 4 [save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 18 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1018d6b08890798e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 2 [progn unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 53 [progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if] 4 [pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 11 [progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch] 4 [org-flag-region save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer] 4 [org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 8 [pdf-info-process pdf-info-process-assert-running pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 6 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 20 [progn if let org-noter--doc-goto-location if let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let] 7 [let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 46 [outline-back-to-heading condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 12 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0493ffdf5314>" funcall let] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b381c3b98e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>"] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0497c7df5314>" funcall] 4 [save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 46 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map] 8 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn] 4 [progn if let org-noter--parse-location-property let "#<lambda 0xabc01a3cfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc019547df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 56 [let* progn if progn if progn cond let cond let "#<lambda 0xabc01912fdf5314>" funcall let progn if cond] 4 [let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 4 [while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 76 [progn if org-noter--valid-session if let org-noter--get-doc-window select-window let progn progn if let org-noter-sync-next-page-or-chapter let while let] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc04a05fdf5314>" funcall let progn] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc049a9fdf5314>" funcall let] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc04cacfdf5314>"] 4 [run-hook-with-args-until-success or progn if let org-noter--parse-location-property let "#<lambda 0xabc04cacfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6bc94f5d18e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond] 3 ["#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall] 4 [cond let cond let "#<lambda 0xabc04d4b7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 4 [if org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6bc8d01998e>" funcall] 3 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c348723>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 10 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc04cd67df5314>" funcall] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let let] 2 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1fc0ccee5ccc9b23>" tq-process-buffer tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 16 [cond let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 8 [let "#<lambda 0x1018d6b38d3ea98e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond] 2 [unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 27 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc04f00fdf5314>" funcall let] 4 [let org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [pdf-info--normalize-file-or-buffer pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 7 [outline-back-to-heading condition-case org-back-to-heading-or-point-min save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b38e94698e>"] 5 [let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 24 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 34 [let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 62 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c5486a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 2 [pdf-view-image-size pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 3 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc04ffd7df5314>" funcall let progn if] 4 [while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 13 [pdf-info-query--parse-response "#<compiled 0x1fc0ccee5ccc9b23>" tq-process-buffer tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc04f207df5314>" funcall let progn] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc04f8dfdf5314>" funcall let progn if cond] 4 [org-noter--parse-location-property let "#<lambda 0x1018d6b39471998e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 2 [progn if let "#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion] 4 [or let org-noter--doc-file-property let "#<lambda 0x1018d6b39418e18e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let] 3 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b3944fe98e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond] 2 [goto-char condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b38e18d98e>" funcall let progn if] 6 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc0419a7df5314>" funcall let progn if] 4 [null save-excursion let* progn org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc02d957df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [tq-process-buffer tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c54b723>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc02ca5fdf5314>" funcall] 4 [progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b38f90e18e>" funcall let progn if cond] 16 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc02f90fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [plist-get if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0xabc0230afdf5314>" funcall let] 4 ["#<lambda 0xabc0230afdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 4 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 10 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc023a27df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc023a27df5314>" funcall let progn if cond] 4 [if let org-noter--parse-location-property let "#<lambda 0xabc0236b7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b387e8198e>" funcall let progn if] 3 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0xabc022f67df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [outline-back-to-heading condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 13 [cond cond let "#<lambda -0xe13bb6ea9406968>" funcall catch let let* org-element-map or let* progn if org-noter--get-properties-end if let] 4 [< if let progn if cond let cond let "#<lambda 0xabc022a1fdf5314>" funcall let progn if cond let] 4 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 16 [pdf-info--normalize-file-or-buffer pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c54de23>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 3 [< if let progn if cond let cond let "#<lambda 0xabc02074fdf5314>" funcall let progn if cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc02074fdf5314>" funcall let progn if cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while] 3 [condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 26 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc02120fdf5314>" funcall let] 4 ["#<lambda 0xabc02120fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 4 [derived-mode-p not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 12 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0203afdf5314>"] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc020f9fdf5314>" funcall] 4 [1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0259d7df5314>" funcall let progn if cond] 4 [cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall catch let let*] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc02636fdf5314>" funcall let progn if cond] 4 [let "#<lambda 0x1018d6b385f1b98e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc026947df5314>" funcall let] 4 [org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ea25739da5a43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403d7bfdf5314>"] 4 [let "#<lambda 0xaa403d7bfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [or let org-noter--doc-file-property let "#<lambda 0x1018d6b0fd5ab18e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>"] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403d30fdf5314>" funcall let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403d2c7df5314>" funcall let progn if] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0xaa403e8f7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 4 [let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>"] 4 [pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 4 [let cond let "#<lambda 0xabc0248d7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 4 [save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 15 [cons vector setq if progn cond let cond let cond let "#<lambda 0xabc02443fdf5314>" funcall let progn if] 4 [let cond let cond let "#<lambda 0xabc02443fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc02506fdf5314>" funcall] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0fc17618e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 7 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 12 [and let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 16 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0fcfe418e>" funcall let progn if cond let] 2 [cond let "#<lambda 0xaa403c02fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 8 [let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall catch let let* org-element-map] 2 [plist-get if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0xabc0240a7df5314>" funcall let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0240a7df5314>" funcall let progn] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403aabfdf5314>" funcall let progn] 4 [not cond org-get-limited-outline-regexp let* progn save-excursion if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0fa92818e>" funcall let] 3 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403a5efdf5314>"] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b0c867198e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond] 3 [plist-get if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0xaa403ade7df5314>" funcall let] 4 [outline-back-to-heading outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0xaa40389ffdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa4039dafdf5314>" funcall let] 4 [if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 12 [cons vector setq if progn cond let cond let cond let "#<lambda 0xaa40383d7df5314>" funcall let progn if] 4 [let org-noter--doc-file-property let "#<lambda 0x1018d6b0f871f98e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>"] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403f68fdf5314>" funcall let progn if cond] 4 [save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 8 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0f8c3118e>" funcall let progn if cond let] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403f67fdf5314>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403f67fdf5314>" funcall let progn if cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0f8ecc18e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>"] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403f32fdf5314>"] 4 [outline-back-to-heading condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 25 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403a04fdf5314>" funcall let progn if] 4 [save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point] 8 ["#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c558a23>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa4036557df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall catch] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xaa4037dbfdf5314>" funcall] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xaa4037dbfdf5314>"] 4 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f1da018e>" funcall] 2 [pdf-info--normalize-file-or-buffer pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [let org-noter--doc-file-property let "#<lambda 0xaa40372efdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 4 [progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f37b618e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 6 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f195c98e>" funcall let progn if] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4030d17df5314>" funcall let progn] 4 [< if let progn if cond let cond let "#<lambda 0xaa4030d17df5314>" funcall let progn if cond let] 4 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 12 [cond org-element-contents not cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>"] 2 [if cond let "#<lambda 0x1018d6b0f3b2b98e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4036cc7df5314>" funcall let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 8 [if save-restriction save-excursion org-outline-level funcall 1- let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 8 [let "#<lambda 0xaa40304afdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xaa40304afdf5314>" funcall let progn if cond let] 4 [not and cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403089fdf5314>" funcall let progn] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xaa403089fdf5314>" funcall let] 4 [ignore-errors or eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 3 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xaa4031ccfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403163fdf5314>" funcall let] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403026fdf5314>" funcall] 4 [cond org-element-type let org--hide-wrapper-toggle org-hide-drawer-toggle progn if let "#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion] 4 [and redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4031ddfdf5314>"] 4 [progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 14 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b0f1b8c98e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>"] 6 [or let org-noter--doc-file-property let "#<lambda 0xaa4033c97df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>"] 4 [org-noter--parse-location-property let "#<lambda 0x1018d6b0f123918e>" funcall let progn if cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc] 7 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4032b7fdf5314>" funcall let] 4 [org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 4 [cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond cond let "#<lambda -0x7d78e9721d6ef79>" mapc cond let "#<lambda -0x7d78e9721d6ef79>" funcall catch let] 4 [org-not-nil if let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 4 [setq progn cond let cond let cond let "#<lambda 0xaa4031e1fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0b6f3098e>" funcall let progn if cond] 2 [cond let "#<lambda -0x7d78e9721d6ef79>" funcall catch let let* org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [goto-char save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0bb22318e>" funcall let progn if cond] 3 [mapconcat pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c5523e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 1 ["#<lambda 0xaa4034f5fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 4 [remove-overlays org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 12 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0ffb9398e>" funcall let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 8 [org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 4 [< if let progn if cond let cond let "#<lambda 0xaa403afc7df5314>" funcall let progn if cond let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4034f5fdf5314>" funcall let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b0b692f326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 2 ["#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let let* org-element-map let] 4 [let cond let cond let "#<lambda 0xaa403b857df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0ba8f7b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 4 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let] 4 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 7 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 2 [cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let let*] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 21 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4033c97df5314>" funcall let] 8 [setq if while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 8 [cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4031ddfdf5314>" funcall let] 4 [or goto-char save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f0d62326>" funcall let progn if] 6 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403026fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [let* org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while let] 3 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4031ccfdf5314>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403089fdf5314>" funcall let] 4 [goto-char save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 4 [mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch] 4 [if let progn if cond let cond let "#<lambda 0xaa4036cc7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f192eb26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 7 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f3647326>"] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4036d0fdf5314>" funcall] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f1780b26>" funcall let progn] 10 [cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f11bab26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry if] 4 [or if let org-noter--parse-location-property let "#<lambda 0x1018d6b0f92b4b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond let] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403f32fdf5314>" funcall] 4 [let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f8cbbb26>" funcall let] 15 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let] 4 [progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0f88aeb26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc] 4 [> and if let org-noter--parse-location-property let "#<lambda 0xaa403f68fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0f8abdb26>" funcall let progn if cond let] 8 [cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch let let*] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa4038e07df5314>" funcall let progn] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 2 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403919fdf5314>" funcall let] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xaa40389ffdf5314>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403ade7df5314>" funcall let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403ade7df5314>" funcall let progn] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xaa403a5efdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [org-noter--doc-file-property let "#<lambda 0xaa403a5efdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403aabfdf5314>"] 4 [progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch] 2 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0240a7df5314>" funcall let progn if] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0fc0b9b26>" funcall let progn] 3 [setq if progn cond let cond let cond let "#<lambda 0xaa403c02fdf5314>" funcall let progn if cond let] 3 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xaa403c02fdf5314>" funcall] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0fc7b9326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403c58fdf5314>" funcall let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0c898eb26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc02506fdf5314>" funcall] 4 [symbolp cond org-element-type let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [null save-excursion let* progn org-before-first-heading-p if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0fd4f8b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0fd4f8b26>" funcall let progn if cond] 34 [org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 3 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0c8da2b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 4 [let save-excursion org-element-property-drawer-parser cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to] 4 [and if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0fd706326>"] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403e8f7df5314>"] 4 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0fc9abb26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 7 [let org-noter--doc-file-property let "#<lambda 0x1018d6b0fc404326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>"] 3 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403d30fdf5314>" funcall] 3 [let "#<lambda 0xaa403d30fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b0fd54f326>" funcall let progn if] 13 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xaa403dc5fdf5314>" funcall let progn if cond] 4 [if let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 6 [let "#<lambda 0x1018d6b0fd17fb26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond] 7 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xaa403c64fdf5314>"] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b0fb621b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xabc026a77df5314>" funcall let progn if cond let] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn] 4 [eq cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond] 3 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c54f5e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0xabc02636fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [if org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b383e87326>" funcall let] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b383e87326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0259d7df5314>" funcall] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b3831dab26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 3 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b3831dab26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 4 [not cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc0203afdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 3 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b382623b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0217ffdf5314>" funcall let progn] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc02120fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [not and cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall] 2 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc0264bfdf5314>"] 4 [let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion let* progn if] 8 [let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let let* org-element-map] 6 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b38a880b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 4 [if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [or let org-noter--doc-file-property let "#<lambda 0xabc022a1fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 8 ["#<lambda 0xabc021e47df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 4 [eq cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc021e47df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b3876d3b26>" funcall let progn if cond let] 3 [or progn if let org-noter--parse-location-property let "#<lambda 0xabc022f67df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [let org-noter--doc-file-property let "#<lambda 0xabc0236b7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc02223fdf5314>" funcall let progn] 4 [cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 8 [let progn if org-noter--set-notes-scroll redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 4 [run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 4 [or progn progn if let org-noter--get-doc-window if let org-noter--doc-approx-location let progn progn if let org-noter-sync-prev-page-or-chapter let] 3 [progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b38fac1326>" funcall let progn if cond let] 4 [consp and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b3890a6b26>"] 10 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc02ca5fdf5314>" funcall let progn if cond let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc02c587df5314>" funcall let progn] 6 [cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b38fd28326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 4 [let progn if cond let cond let "#<lambda 0xabc02d957df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 3 [condition-case org-back-to-heading progn condition-case if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 12 [not cond org-element-type let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch] 6 [window-edges window-inside-pixel-edges pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc04c867df5314>"] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc04c867df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc04c867df5314>" funcall let progn if cond] 4 [cconv-make-interpreted-closure function overlay-put let progn if org-flag-region let* if let* cond let org--hide-wrapper-toggle org-hide-drawer-toggle progn if] 4 [org-element-property < if let progn if cond let cond let "#<lambda 0xabc04f8dfdf5314>" funcall let progn if cond] 5 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0xabc04f8dfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc04f8dfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [org-flag-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc04f207df5314>" funcall let progn if cond] 4 [if progn cond let cond let cond let "#<lambda 0xabc04ffd7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 3 [cond let cond let cond let "#<lambda 0xabc04ffd7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc04f527df5314>" funcall] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc04f527df5314>" funcall let progn if cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc04e3f7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 3 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b38d909326>" funcall let progn if cond] 13 [mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch let let* org-element-map let progn] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc04f1c7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 ["#<compiled 0x1fc0b1d08ccc9b23>" tq-process-buffer tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c578be3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc04f00fdf5314>" funcall let progn if cond] 4 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xabc04d937df5314>" funcall] 5 [max if org-get-valid-level let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [let cond let cond let "#<lambda 0xabc04b97fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 5 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6bc8c595b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 3 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6bc8cf9d326>" funcall let progn if] 6 [funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>"] 5 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc04cacfdf5314>" funcall let] 4 [cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 2 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6bc9460cb26>" funcall] 2 [if org-element-property < if let progn if cond let cond let "#<lambda 0xabc04af0fdf5314>" funcall let progn if] 3 [or let org-noter--doc-file-property let "#<lambda 0x1018d6bc95150b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0498efdf5314>" funcall let progn if cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc0498efdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [org-element--parse-to cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion let*] 4 [and progn or progn frame-live-p and if progn if org-noter--valid-session cond let* org-noter--parse-root org-element-contents let progn] 2 [let "#<lambda 0x1018d6bc95b0fb26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc018fa7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 6 [let org-noter--doc-file-property let "#<lambda 0xabc018fa7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>"] 4 ["#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall] 4 [org-element-property < if let progn if cond let cond let "#<lambda 0xabc019547df5314>" funcall let progn if cond] 3 [let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc01a2dfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0xabc01a2dfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [or let org-noter--doc-file-property let "#<lambda 0x1018d6b080cf7326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc01a3cfdf5314>" funcall let progn if cond] 4 [org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0485f7df5314>" funcall let progn if] 3 [symbolp cond org-element-type let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let] 4 [if let "#<lambda 0x1018d6b381d84b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc0487afdf5314>" funcall let] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc0487afdf5314>" funcall let progn if cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b381bbc326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond] 4 [org-noter--parse-location-property let "#<lambda 0xabc0497c7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc] 4 [or if let org-noter--parse-location-property let "#<lambda 0x1018d6b081a0f326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 4 [outline-back-to-heading condition-case org-back-to-heading save-excursion org-flag-heading let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [tq-filter "#<compiled -0x7c620119e0fbbbb>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37d9a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 1 [symbolp cond org-element-type let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch] 4 [and progn or progn let progn progn if let org-noter--get-current-view org-noter--get-view-info let progn progn if let] 2 [org-end-of-subtree save-excursion let* save-excursion if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 4 [numberp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xabc01d5dfdf5314>" funcall let progn if cond] 5 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [eq cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc01ca6fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x1018d6b08b287b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xabc01df07df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 5 [save-restriction save-excursion org-outline-level funcall let org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while save-excursion progn] 4 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1018d6b089ebab26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 4 [numberp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xabc01d2d7df5314>" funcall let progn if cond] 4 [and if let org-noter--parse-location-property let "#<lambda 0x1018d6b08b37b326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond] 4 [and if cond let "#<lambda 0x1018d6b08e76e326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let] 6 [or let org-noter--doc-file-property let "#<lambda 0xabc01ccafdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b08e381326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xabc01c517df5314>"] 3 [or let org-noter--doc-file-property let "#<lambda 0x1018d6b08e1bdb26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let] 2 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b088b20326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc] 2 [org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 4 [if progn if org-noter--valid-session if let org-noter--get-doc-window internal--before-with-selected-window let let progn progn if let org-noter--get-current-view org-noter--get-view-info] 2 [if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>" funcall catch let] 4 [or let org-noter--doc-file-property let "#<lambda 0xabc013797df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 3 [pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c371223>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 3 [and cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond let "#<lambda -0x7d78e72d9071579>" funcall catch] 4 [and progn or progn frame-live-p and if progn if org-noter--valid-session if let org-noter--get-notes-window let progn progn] 4 [let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>"] 3 [progn or progn if progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 4 [or let org-noter--doc-file-property let "#<lambda 0xabc0162bfdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1018d6b384feab26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>"] 4 [and progn or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--get-current-view org-noter--get-view-info let progn] 1 [let "#<lambda 0xabc01f8a7df5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond let "#<lambda -0x7d78e72d9071579>" mapc cond] 4 [org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b083539b26>" funcall let progn] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 3 [cconv-make-interpreted-closure function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion progn] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0xabc010d8fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond let] 4 [org-get-limited-outline-regexp let* progn save-excursion or let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point] 4 [or let org-noter--doc-file-property let "#<lambda 0x1018d6b083e6db26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond let "#<lambda -0x15025128b9071579>"] 3 [= and or cond let* org-noter--parse-root org-element-contents if let progn progn if let progn if org-noter--get-view-info] 2 [progn or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--get-doc-window if let org-noter--doc-approx-location let] 2 [or let org-noter--doc-file-property let "#<lambda 0x1018d6b085767b26>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc cond cond let] 4 [progn cond org-noter--compare-locations and if cond let "#<lambda 0x1018d6b3803cd326>" funcall let progn if cond let "#<lambda -0x15025128b9071579>" mapc] 2 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc010757df5314>" funcall let progn if] 3 [if org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0xabc00c07fdf5314>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>"] 5 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xabc00c07fdf5314>" funcall let progn if cond] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa72653aa9e18d84>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc] 6 [let cond let cond let "#<lambda -0xc3d17edeb3b727c>" funcall let progn if cond let "#<lambda -0x7d78e72d9071579>" mapc cond cond] 4 [let progn eval let* org-babel-execute:elisp funcall let setq if let* cond let* progn if let* org-babel-execute-src-block] 6 [Automatic\ GC] 1137)) (25844 4137 806090 172000) nil]
