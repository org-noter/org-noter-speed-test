
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([progn let save-excursion org-element-section-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let*] 2 [org-at-heading-p let* progn cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let* if] 4 [not cond org-get-limited-outline-regexp let* progn cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond] 4 [progn cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let* if while let] 4 [let* progn progn let save-excursion org-element-section-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements] 4 [org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond] 4 [while let progn if save-excursion org-element--get-node-properties let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while] 4 [save-restriction save-excursion org-outline-level funcall let org-end-of-subtree save-excursion min let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let*] 4 [setq let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond let*] 4 [org-end-of-subtree save-excursion min let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements] 4 [cons setq while let progn if save-excursion org-element--get-node-properties let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let*] 4 [if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 33 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xb2beff044cf98f4>" funcall let progn if cond] 4 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 520 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2150 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0x166e2bd6dbcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc] 3 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 52 [> cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2bd303cddd64>" funcall let progn if cond] 4 [user-error condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 461 [let "#<lambda 0x166e2a0773cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 4 [not cond org-get-limited-outline-regexp let* progn if cond let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion] 4 [or if let org-noter--parse-location-property let "#<lambda 0x166e2a0e6bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond] 7 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 52 [tq-process-buffer tq-filter "#<compiled -0x713dbaac228eebb>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c369a63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if] 5 [outline-back-to-heading condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 26 [while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 76 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 5 [save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 59 [save-excursion let* cond let org--hide-wrapper-toggle org-hide-drawer-toggle progn if let "#<lambda 0x13e3eb0>" funcall if let* if let* while] 8 [let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 30 [tq-queue-empty tq-process-buffer tq-filter "#<compiled -0x713dbaac228eebb>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c3697e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 3 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x166e2a3fbbcddd64>" funcall let progn if cond let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let* progn if] 4 [or cdr let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 65 [and let cond let org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while save-excursion progn if] 36 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2a11dbcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond] 2 [progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 70 [cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let "#<lambda -0x461f4d3f08deef1>" funcall catch let let*] 4 [org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 9 ["#<lambda 0x166e2ab81bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let] 4 [org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 17 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c371fa3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 15 [not or cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 198 [let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 39 [save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 28 [let cond let "#<lambda 0x166e2a4893cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>"] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv] 8 [if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 12 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2aa2abcddd64>" funcall] 4 ["#<lambda 0x101b8491dcd3a08e>" funcall let progn if cond let "#<lambda -0x461f4b734932df1>" mapc cond cond let "#<lambda -0x461f4b734932df1>" mapc cond let] 2 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x166e2af4cbcddd64>" funcall] 6 [or let org-noter--doc-file-property let "#<lambda 0x166e2af4cbcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let] 4 [cond org-get-limited-outline-regexp let* progn cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if let*] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e2aed1bcddd64>" funcall let] 6 [progn unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 85 [cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let] 3 [and if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if] 4 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 28 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 2 [setq if progn cond let cond let cond let "#<lambda 0x166e2adcb3cddd64>" funcall let progn if cond let] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2adcb3cddd64>" funcall let progn if cond] 5 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let] 2 [cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 30 [org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 20 [outline-back-to-heading condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 36 [outline-flag-region outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 8 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 40 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b8491d3d3788e>" funcall let progn if cond let "#<lambda -0x461f4b734932df1>"] 2 [outline-back-to-heading condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 20 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e2ac3f3cddd64>" funcall let] 7 [let org-noter--parse-location-property let "#<lambda 0x166e2ac3f3cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>"] 4 [< if let progn if cond let cond let "#<lambda 0x166e2b4143cddd64>" funcall let progn if cond let] 6 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x166e2acaebcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc] 4 [or let org-noter--doc-file-property let "#<lambda 0x166e2acaebcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let] 4 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 11 [cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let "#<lambda -0x461f4d3f08deef1>" funcall catch let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b8491d0d5888e>" funcall let progn if] 5 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e26c113cddd64>" funcall let progn if cond] 3 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c372e23>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 3 [funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let "#<lambda -0x461f4d3f08deef1>"] 4 [progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 7 [org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 92 ["#<lambda -0x461f4b734932df1>" mapc cond cond let "#<lambda -0x461f4b734932df1>" mapc cond let "#<lambda -0x461f4b734932df1>" funcall catch let let* org-element-map let] 6 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2a923bcddd64>" funcall let progn if] 4 [let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 54 [char-after eq and cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to] 4 [cond let "#<lambda -0x461f4b734932df1>" mapc cond cond let "#<lambda -0x461f4b734932df1>" mapc cond let "#<lambda -0x461f4b734932df1>" funcall catch let let*] 3 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x166e2aad83cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond] 4 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 14 [progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let "#<lambda -0x461f4d3f08deef1>" funcall catch] 4 [and let cond let org-end-of-subtree save-excursion let* save-excursion if org-show-children cond let* progn if if org-show-set-visibility] 4 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 80 [let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 29 [if org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0x166e2af94bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>"] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x166e2a8703cddd64>" funcall] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2a80abcddd64>" funcall let progn if] 4 [while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 31 [symbolp cond org-element-type let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let "#<lambda -0x461f4d3f08deef1>" funcall catch] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e27f88bcddd64>" funcall let progn] 4 [function setq let let* org-element-map or let* progn if org-noter--get-properties-end if let cond let* progn progn] 4 [progn frame-live-p and if progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let*] 4 [if save-restriction save-excursion org-outline-level funcall let org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while save-excursion] 4 [let cond let cond let "#<lambda 0x166e27189bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond] 4 [condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 43 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e270fd3cddd64>" funcall let] 4 [cond let "#<lambda 0x166e270fd3cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc] 4 [invisible-p if if let* cond let org--hide-wrapper-toggle org-hide-drawer-toggle progn if let "#<lambda 0x13e3eb0>" funcall if let* if] 4 [let* if let* cond let org--hide-wrapper-toggle org-hide-drawer-toggle progn if let "#<lambda 0x13e3eb0>" funcall if let* if let*] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101b849010d1c08e>" funcall let progn if cond let "#<lambda -0x461f4b734932df1>" mapc cond] 2 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e270753cddd64>"] 4 [let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let "#<lambda -0x461f4d3f08deef1>"] 4 [if let org-noter-sync-next-page-or-chapter let while let dotimes let while let dotimes let measure-time setq let progn] 3 [cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 63 [null save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 31 [or let org-noter--doc-file-property let "#<lambda 0x166e277783cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let] 6 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x166e277783cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond] 4 [pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 7 [org-element-type let "#<lambda -0x461f4b734932df1>" mapc cond cond let "#<lambda -0x461f4b734932df1>" mapc cond cond let "#<lambda -0x461f4b734932df1>" mapc cond let] 3 [while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 6 [org-flag-region if save-excursion org-flag-heading let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e276a43cddd64>" funcall let] 4 [org-element-property vector setq if progn cond let cond let cond let "#<lambda 0x166e276a43cddd64>" funcall let progn if] 4 [not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e276a43cddd64>" funcall let] 4 [condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e276a43cddd64>" funcall let progn if] 4 [org-noter--doc-file-property let "#<lambda 0x101b84907072608e>" funcall let progn if cond let "#<lambda -0x461f4b734932df1>" mapc cond cond let "#<lambda -0x461f4b734932df1>" mapc] 2 [org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 14 [cond let progn if cond let cond let "#<lambda 0x166e276ea3cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>"] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b849071c9d08e>" funcall let progn] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e275f0bcddd64>" funcall] 6 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x166e275613cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>"] 7 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1e3d792596889823>" tq-process-buffer tq-filter "#<compiled -0x713dbaac228eebb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 14 [cond org-element-type let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let "#<lambda -0x461f4d3f08deef1>" funcall catch let] 4 [outline-back-to-heading condition-case org-back-to-heading let* progn save-excursion if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e264573cddd64>"] 4 [cdr let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 7 [org-noter--compare-locations and cond let cond let cond let "#<lambda 0x166e264573cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>"] 4 [and let let save-excursion org-element-property-drawer-parser cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101b84901732188e>" funcall let progn if cond let "#<lambda -0x461f4b734932df1>" mapc cond] 3 [cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e265c53cddd64>" funcall let progn if cond] 3 [and cond cond let "#<lambda -0x461f4b734932df1>" mapc cond cond let "#<lambda -0x461f4b734932df1>" mapc cond let "#<lambda -0x461f4b734932df1>" funcall catch] 7 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if] 2 [eq cond let progn if cond let cond let "#<lambda 0x166e26433bcddd64>" funcall let progn if cond let] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x166e267e8bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 3 [progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 10 [not cond org-get-limited-outline-regexp let* progn save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [progn if cond let "#<lambda -0x461f4b734932df1>" mapc cond cond let "#<lambda -0x461f4b734932df1>" mapc cond let "#<lambda -0x461f4b734932df1>" funcall catch] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e267b2bcddd64>" funcall] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b84901340f88e>" funcall let progn if cond] 6 [or let org-noter--doc-file-property let "#<lambda 0x166e2670e3cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let] 4 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 8 [< if let progn if cond let cond let "#<lambda 0x166e266e9bcddd64>" funcall let progn if cond let] 4 [cconv-fv cconv-make-interpreted-closure function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [let "#<lambda -0x461f4b734932df1>" mapc cond cond let "#<lambda -0x461f4b734932df1>" mapc cond let "#<lambda -0x461f4b734932df1>" funcall catch let let* org-element-map] 2 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e2679d3cddd64>" funcall] 4 [pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 2 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2665a3cddd64>" funcall let progn if] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b849012c5688e>" funcall let progn if cond let "#<lambda -0x461f4b734932df1>" mapc cond] 2 [let cond let cond let "#<lambda 0x166e261b33cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond] 3 [save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 15 [let "#<lambda 0x166e261203cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 4 [cons vector setq if progn cond let cond let cond let "#<lambda 0x166e260efbcddd64>" funcall let progn if] 5 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e2607cbcddd64>"] 4 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 20 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e26361bcddd64>" funcall let progn] 4 [mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 6 [> and if let org-noter--parse-location-property let "#<lambda 0x166e261f5bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101b8491d98db08e>" funcall let progn if] 13 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x166e26062bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [derived-mode-p not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 6 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 2 [and let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 8 [image-mode-window-put image-set-window-vscroll image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 3 [save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 40 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x166e26ebebcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e262013cddd64>"] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e262013cddd64>" funcall let progn] 4 [setq if while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 8 [not cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let "#<lambda -0x461f4d3f08deef1>" funcall catch] 6 [let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 14 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e27ed3bcddd64>" funcall let] 4 [cond let "#<lambda 0x166e27948bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc] 4 [cond let cond let "#<lambda 0x166e279683cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let] 3 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b8491eb4e888e>" funcall let progn if cond let "#<lambda -0x461f4b734932df1>" mapc] 6 [and if cond let "#<lambda 0x101b8491eb4e888e>" funcall let progn if cond let "#<lambda -0x461f4b734932df1>" mapc cond cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e278a7bcddd64>" funcall] 2 [cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let] 6 [vector setq if progn cond let cond let cond let "#<lambda 0x166e27d5f3cddd64>" funcall let progn if cond] 3 [progn frame-live-p and if progn if org-noter--valid-session if let org-noter-sync-next-page-or-chapter let while let dotimes let while] 2 [org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 22 [if let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 23 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b84907286f08e>" funcall let progn] 2 [org-not-nil if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 5 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let let] 3 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e27220bcddd64>" funcall let progn if] 4 [cond let* progn progn if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e27d963cddd64>" funcall let] 4 [condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 48 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e26501bcddd64>" funcall] 6 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101b84907e19f08e>" funcall let progn if cond let "#<lambda -0x461f4b734932df1>" mapc] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e26576bcddd64>" funcall let progn] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e26576bcddd64>" funcall let progn if] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e27a55bcddd64>"] 5 [let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 6 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x166e27d02bcddd64>" funcall] 7 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x101b84907c55a08e>" funcall let progn if cond let "#<lambda -0x461f4b734932df1>" mapc cond] 7 [cond let "#<lambda 0x166e27b37bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc] 5 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b84901a58a88e>"] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e27bcf3cddd64>" funcall] 7 [let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let "#<lambda -0x461f4d3f08deef1>" funcall catch let let* org-element-map] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e27a643cddd64>" funcall] 4 ["#<lambda 0x166e27a643cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let] 4 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let] 10 [setq while let dotimes let while let dotimes let measure-time setq let progn eval let* org-babel-execute:elisp] 2 [let "#<lambda -0x461f4b734932df1>" mapc cond cond let "#<lambda -0x461f4b734932df1>" mapc cond cond let "#<lambda -0x461f4b734932df1>" mapc cond let "#<lambda -0x461f4b734932df1>"] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e27930bcddd64>"] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x166e27a8dbcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond] 4 [if progn cond let cond let cond let "#<lambda 0x166e27a8dbcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>"] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x166e27a8dbcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x166e27aaabcddd64>" funcall] 4 [org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b84901baba08e>" funcall let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e2799fbcddd64>" funcall] 6 [if let org-noter--parse-location-property let "#<lambda 0x166e2799fbcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x166e252ccbcddd64>" funcall] 2 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e252ccbcddd64>" funcall let progn if] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e253173cddd64>"] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let progn progn] 1 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e25351bcddd64>" funcall let progn] 4 [cond org-element-type let "#<lambda -0x461f4b734932df1>" mapc cond cond let "#<lambda -0x461f4b734932df1>" mapc cond cond let "#<lambda -0x461f4b734932df1>" mapc cond] 2 [let progn if cond let "#<lambda -0x461f4b734932df1>" mapc cond cond let "#<lambda -0x461f4b734932df1>" mapc cond let "#<lambda -0x461f4b734932df1>" funcall] 3 [or cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 5 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e250a8bcddd64>" funcall let progn] 4 [org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e2504b3cddd64>" funcall let] 4 [frames-on-display-list "#<subr F616e6f6e796d6f75732d6c616d626461_anonymous_lambda_2>" internal--before-save-selected-window pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e250883cddd64>" funcall let progn] 1 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e250883cddd64>" funcall] 4 [mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let "#<lambda -0x461f4d3f08deef1>" funcall catch] 4 [progn progn if let org-noter--doc-goto-location if let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e25124bcddd64>" funcall let progn] 4 [org-element-property let cond let while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point] 4 [progn if let org-noter--parse-location-property let "#<lambda 0x101b84901460808e>" funcall let progn if cond let "#<lambda -0x461f4b734932df1>" mapc cond cond] 7 ["#<compiled -0x1c8c5fa5267e0adf>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1e3d792596889823>" tq-process-buffer tq-filter "#<compiled -0x713dbaac228eebb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e251a9bcddd64>" funcall let progn] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x166e251a9bcddd64>" funcall] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e2512ebcddd64>" funcall let] 4 ["#<compiled -0x713dbaac228eebb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 3 [eq cond let progn if cond let cond let "#<lambda 0x166e251dbbcddd64>" funcall let progn if cond let] 4 [cond org-element-contents mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let "#<lambda -0x461f4d3f08deef1>"] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b84901f1de88e>" funcall let progn if cond let "#<lambda -0x461f4b734932df1>"] 3 [org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 2 [let* progn if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [redisplay--update-region-highlight run-hook-with-args redisplay--pre-redisplay-functions redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e25ebdbcddd64>" funcall] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e25d913cddd64>" funcall let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x166e25dafbcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>"] 4 [let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 5 [pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e254c73cddd64>"] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 40 [or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x166e254c73cddd64>" funcall let progn] 4 [not cond org-get-limited-outline-regexp let* progn cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e254a3bcddd64>" funcall let] 6 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x166e254a3bcddd64>" funcall let progn] 4 [unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 3 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function] 2 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b849075f01a26>" funcall let progn if] 8 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x166e25dafbcddd64>" funcall let progn if cond] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e25dafbcddd64>"] 4 [remove-overlays org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 4 [cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond let "#<lambda 0x1122ebae0f72110f>" funcall catch let] 6 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x166e25d913cddd64>" funcall let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e25d913cddd64>" funcall let progn] 4 [org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 12 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b8490191f5a26>" funcall let progn if] 6 [condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 29 [if org-element-property < if let progn if cond let cond let "#<lambda 0x166e25ebdbcddd64>" funcall let progn if] 4 [or let org-noter--doc-file-property let "#<lambda 0x101b84901952b226>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e25e733cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>"] 4 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b8490197b7a26>" funcall] 7 [setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x166e251dbbcddd64>" funcall let progn if] 4 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 11 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101b8490198d1a26>" funcall let progn if cond] 13 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [macroexp-macroexpand macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b849014cc3a26>" funcall let progn if] 14 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e25147bcddd64>"] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x166e250883cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 4 [or let org-noter--doc-file-property let "#<lambda 0x166e250883cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b84901bef8a26>" funcall let progn if cond] 31 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e2504b3cddd64>"] 4 [mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond let "#<lambda 0x1122ebae0f72110f>" funcall catch] 4 [not cond org-element-contents if let progn progn if let progn if org-noter--get-view-info let progn progn if] 4 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101b849018c9aa26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc] 7 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [or if let org-noter--parse-location-property let "#<lambda 0x166e25351bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond] 4 [let org-noter--doc-file-property let "#<lambda 0x166e25351bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>"] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b84901874ca26>"] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e252ccbcddd64>" funcall] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e252ccbcddd64>" funcall let progn if cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101b84901bb8d226>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>"] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e2799fbcddd64>" funcall let progn] 4 [let "#<lambda 0x166e2799fbcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 4 [let* progn if cond let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>"] 4 [or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b84907c386a26>" funcall let progn] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e27aaabcddd64>" funcall] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101b84901a5ada26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e27a8dbcddd64>" funcall let progn if] 4 [eq cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 4 [if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let "#<lambda -0x461f4d3f08deef1>" funcall catch let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e27a643cddd64>" funcall let] 4 [not cond org-element-contents mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond let] 4 [and cond let cond let cond let "#<lambda 0x166e27bcf3cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e27bcf3cddd64>" funcall let progn if cond] 4 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x166e27b37bcddd64>" funcall let progn if cond] 4 [if org-element-property < if let progn if cond let cond let "#<lambda 0x166e27d02bcddd64>" funcall let progn if] 4 [org-noter--doc-file-property let "#<lambda 0x101b84907d4d5a26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc] 7 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let] 4 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 8 [cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond let "#<lambda 0x1122ebae0f72110f>" funcall catch let let*] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e265423cddd64>" funcall] 4 [timer-set-function run-with-idle-timer vector setq progn if if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 4 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [< if let progn if cond let cond let "#<lambda 0x166e26576bcddd64>" funcall let progn if cond let] 4 [let "#<lambda 0x101b84907e5d0226>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond] 7 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e26501bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x166e26501bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 4 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101b84907ecfca26>" funcall let] 3 [not and cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond let "#<lambda 0x1122ebae0f72110f>" funcall] 3 [if cond let "#<lambda 0x101b849071093a26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e27ebabcddd64>" funcall let progn if cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e27220bcddd64>" funcall let] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101b8490715d8a26>" funcall let progn if] 4 [org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b8490715d8a26>" funcall let progn] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101b84907249ba26>" funcall let progn if cond let] 7 [org-noter--relative-position-to-view let cond let "#<lambda 0x166e278a7bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let] 4 ["#<lambda 0x101b8491eb4b5226>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond let] 7 [let org-noter--doc-file-property let "#<lambda 0x166e278993cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>"] 4 [org-element-type let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let] 4 [function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion progn if] 4 [if let "#<lambda 0x166e27948bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e27948bcddd64>" funcall] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e27948bcddd64>" funcall let progn if cond] 4 [or let org-noter--doc-file-property let "#<lambda 0x166e27ed3bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let] 4 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [and if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc] 4 [or if let org-noter--parse-location-property let "#<lambda 0x166e27fb1bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e27fb1bcddd64>" funcall let progn] 4 [if save-restriction save-excursion org-outline-level funcall let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while let dotimes let measure-time] 7 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e262013cddd64>" funcall let progn if cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e262b03cddd64>" funcall let progn if cond] 4 [or if let org-noter--parse-location-property let "#<lambda 0x166e26ebebcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond] 4 [cond org-element-contents not cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond let "#<lambda 0x1122ebae0f72110f>"] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101b8491eac6ca26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>"] 7 ["#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let "#<lambda -0x461f4d3f08deef1>" funcall] 4 [org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0x166e26062bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc] 4 ["#<lambda 0x166e261f5bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b8491d93f0a26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>"] 3 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e261203cddd64>" funcall let] 4 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c54c9e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2665a3cddd64>" funcall let progn if cond] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b849013dd9226>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x166e2679d3cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 4 [cdr let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 8 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101b8490123b0226>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc] 2 [and progn or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--get-notes-window let progn progn] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e266e9bcddd64>" funcall let progn if cond] 4 [cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e2670e3cddd64>" funcall let progn] 4 [or let org-noter--doc-file-property let "#<lambda 0x166e267b2bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b8490174d4226>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e265fc3cddd64>"] 6 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b849016ece226>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond] 7 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e274a63cddd64>" funcall] 6 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 10 [cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond] 2 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e276ea3cddd64>" funcall let] 3 [cond let "#<lambda 0x166e276ea3cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc] 4 [condition-case org-back-to-heading-or-point-min org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101b8490707caa26>" funcall let progn if cond let] 2 [pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 2 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x166e2762bbcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond] 4 ["#<lambda 0x166e2762bbcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2762bbcddd64>" funcall let progn if cond] 4 [pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 3 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b849070388226>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>"] 6 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e276a43cddd64>"] 7 [org-outline-level funcall let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e2758f3cddd64>"] 8 [mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond let "#<lambda 0x1122ebae0f72110f>" funcall catch let let* org-element-map let let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e277c93cddd64>" funcall let] 2 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b84901102c226>" funcall let progn if cond let] 6 [pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e27758bcddd64>" funcall let] 8 [org-noter--doc-file-property let "#<lambda 0x166e270753cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function let* while save-excursion let*] 4 [let "#<lambda 0x101b849011542a26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e2725dbcddd64>" funcall let] 4 [pdf-info--normalize-file-or-buffer pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 4 [cond let cond let "#<lambda 0x166e2713a3cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let] 1 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 8 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 3 [save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 2 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x166e27f88bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 4 [goto-char save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b8491ff645a26>" funcall let progn if cond] 4 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c3799e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 2 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101b8491fc4aaa26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>"] 6 ["#<compiled -0x17ea0113246e3dd7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1e3d792596889823>" tq-process-buffer tq-filter "#<compiled -0x713dbaac228eebb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 6 [cond let "#<lambda 0x166e273a6bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e2a9063cddd64>" funcall] 4 [if let org-noter--parse-location-property let "#<lambda 0x166e2a9063cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x166e2a8703cddd64>" funcall] 3 [and cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let "#<lambda -0x461f4d3f08deef1>" funcall catch] 4 [let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond let "#<lambda 0x1122ebae0f72110f>"] 4 [if let org-noter--parse-location-property let "#<lambda 0x166e2afcbbcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let] 4 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b8491d2ec2226>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>"] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x166e2af94bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x166e2af94bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2aa693cddd64>" funcall let progn if cond] 4 [org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while let dotimes] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e2aaa2bcddd64>" funcall] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2aaa2bcddd64>" funcall let progn if cond] 4 [and if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond let "#<lambda 0x1122ebae0f72110f>" funcall catch] 4 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101b8491e616a226>" funcall] 3 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101b8491e616a226>" funcall let progn] 8 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x101b8491e5d97a26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond] 2 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b8491e5d97a26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>"] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e2b4363cddd64>" funcall] 3 [if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond let "#<lambda 0x1122ebae0f72110f>" funcall catch let let* org-element-map let let progn] 2 [or if let org-noter--parse-location-property let "#<lambda 0x166e26c113cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond] 3 [if save-restriction save-excursion org-outline-level funcall 1- let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2ac5bbcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>"] 3 [cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2ac3f3cddd64>" funcall let progn if cond] 4 [org-flag-region if save-excursion org-flag-heading let* save-excursion if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b8491dcb14226>" funcall let progn] 7 [run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 3 [let org-noter--doc-file-property let "#<lambda 0x166e2adcb3cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>"] 4 [cond let "#<lambda 0x166e2adcb3cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc] 4 ["#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond let "#<lambda 0x1122ebae0f72110f>" funcall] 6 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2ad853cddd64>" funcall let progn if cond] 1 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x166e2ad853cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 4 [cconv-make-interpreted-closure function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion progn] 4 [let "#<lambda 0x101b8491dcb3ba26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101b8491de806a26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>"] 3 [consp and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let] 2 [or let org-noter--doc-file-property let "#<lambda 0x101b8491de12da26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101b8491ddc40a26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>"] 6 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2a64d3cddd64>" funcall let progn if cond] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map or let* progn if] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101b8491df0b9226>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>"] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x166e2a4893cddd64>" funcall let] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2a4383cddd64>" funcall let progn if cond] 4 ["#<lambda 0x166e2a4fb3cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond let "#<lambda -0x461f4d3f08deef1>" mapc cond let] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x166e2a4fb3cddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>"] 4 [let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>" mapc cond let "#<lambda 0x1122ebae0f72110f>" funcall] 7 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x166e2abf6bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 7 [> and if let org-noter--parse-location-property let "#<lambda 0x166e2ab81bcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function let* while save-excursion let* progn if org-cycle-hide-drawers] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2a2163cddd64>"] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x101b849181ccc226>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond] 7 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2a2a0bcddd64>" funcall let progn if cond] 4 [save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if let progn progn] 4 [org-element-contents let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while let dotimes let] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2a3fbbcddd64>" funcall let progn if cond] 4 [let* org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while let] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2a24ebcddd64>" funcall let progn if cond] 3 [progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn] 3 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b849180ef1a26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc] 3 [org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101b8491b8394a26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond] 2 [let org-noter--doc-file-property let "#<lambda 0x101b8491bb48ba26>" funcall let progn if cond let "#<lambda 0x1122ebae0f72110f>" mapc cond cond let "#<lambda 0x1122ebae0f72110f>"] 2 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x166e2a0d23cddd64>" funcall let progn if] 7 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101b8491ba70c226>" funcall let progn if cond] 6 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [kill-buffer "#<compiled -0x1c8c5fba57961adf>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1e3d792596889823>" tq-process-buffer tq-filter "#<compiled -0x713dbaac228eebb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page] 3 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x166e2bd6dbcddd64>" funcall let progn if cond let "#<lambda -0x461f4d3f08deef1>" mapc cond cond] 3 [eq and cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to cond] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if] 3 [and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 4 [eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [Automatic\ GC] 912)) (25844 3693 7019 140000) nil]
