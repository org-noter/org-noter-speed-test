
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 3 [progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>" funcall catch] 9 [cond org-element-type let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>" funcall catch let] 4 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree] 123 [while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 92 [org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 52 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 585 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2406 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 7 [org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 20 [progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if] 5 [prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let] 4 [- 1- if save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while] 8 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x16c0177ba1add0bc>" funcall prog1 catch let progn if cond] 2 [save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 36 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x16c00efb79add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>"] 3 [org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 16 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 4 [cond let "#<lambda 0x16c00ec339add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let] 3 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 20 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 3 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c3693a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 15 [not cond org-get-limited-outline-regexp let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [let* if let* = or if if let* progn if org-noter--get-properties-end if let cond let* progn] 4 [org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0x16c00ed651add0bc>" funcall prog1 catch let progn if cond let] 6 [and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 72 [mapcar pdf-util-scale "#<compiled -0x6e23ba6556d8b81>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c36f723>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 2 [if let cond let* and let* org-element-contents-begin let cond let while let let* save-restriction save-excursion save-current-buffer] 4 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 11 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c00eb6b9add0bc>" funcall] 7 [if save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 24 [or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd01327f962be>" funcall prog1 catch let progn] 3 [let* if let* let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion] 4 [let "#<lambda 0x16c00e9ad1add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>"] 7 [unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [eq not if if if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 4 [org-noter--parse-location-property let "#<lambda 0x16c00ea1d9add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let] 4 [frame-current-scroll-bars window-current-scroll-bars window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 5 [not cond org-get-limited-outline-regexp let* progn save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [and progn or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--get-notes-window let progn progn] 6 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 18 [or if unwind-protect let* let org-fold-region if save-excursion org-fold-heading let* save-excursion if org-fold-show-children cond let* progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 10 [let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>" funcall] 5 [let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 60 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while] 4 [cond org-element-type let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond] 6 [progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 8 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x16c00dcfb1add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc] 4 [progn if unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 12 [save-current-buffer progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x16c00dafd1add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>"] 7 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd01323e94abe>" funcall prog1 catch let] 10 [mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>" funcall catch] 5 [catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while] 8 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 2 [org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 12 [symbolp cond org-element-type let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>" funcall catch] 3 [save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 8 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 20 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 23 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c00e8329add0bc>"] 6 ["#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>" funcall catch let let* progn if] 3 [if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x16c00d8721add0bc>" funcall prog1 catch let progn] 6 [save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if] 8 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 15 [let "#<lambda 0x16c00d8051add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>"] 3 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all] 3 [cconv-fv cconv-make-interpreted-closure function org-element-lineage-map if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [let org-noter--parse-location-property let "#<lambda 0x16c00db0b9add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond] 6 [if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 22 [or if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc] 2 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 4 [if let* if let* org-element-begin let* while if let* save-current-buffer org-element--cache-find progn if if setq let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form] 26 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 18 [if let cond let* and let* < if let progn if cond let cond let "#<lambda 0x16c00de3d9add0bc>"] 7 [cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>" funcall catch let] 2 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 75 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry progn if while] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 19 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn if] 6 [while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c00da059add0bc>"] 4 [or let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 12 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013e29aa2be>" funcall prog1 catch let progn] 3 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 894 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion] 8 [cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if] 4 [let org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x16c01125d1add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc] 6 [if save-restriction save-excursion org-outline-level funcall let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion] 4 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c378ca3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 12 [save-current-buffer org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if] 8 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 49 [progn save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [let "#<lambda 0x16c0112f81add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>"] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x16c0114731add0bc>" funcall prog1 catch] 4 [if org-activate-code font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ef2ca59c82c43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let] 4 [while org-font-lock-add-priority-faces font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ef072ca942143>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function] 4 [save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if] 4 [pdf-info--normalize-file-or-buffer pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 3 [if let* if let* < if let progn if cond let cond let "#<lambda 0x16c01120f9add0bc>" funcall prog1] 4 [font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156eb0ccc246ee43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer let if] 4 ["#<compiled -0x17ea01914f6255d7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1e54a71070716ae3>" tq-process-buffer tq-filter "#<compiled -0x7c121a1f63aca7b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 31 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c01144f1add0bc>" funcall prog1 catch] 4 [save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond] 4 [cond let cond let cond let "#<lambda 0x16c0165941add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>"] 4 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 11 [< if let progn if cond let cond let "#<lambda 0x16c0165dd9add0bc>" funcall prog1 catch let progn if] 4 [eq if let* if let* < if let progn if cond let cond let "#<lambda 0x16c0114d49add0bc>" funcall] 4 [remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0166a39add0bc>"] 4 [if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x16c011a029add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>"] 4 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 28 [let* if let* let and if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101bd013e842dabe>" funcall prog1] 2 [cond org-element-type let* and let* let* < if let progn if cond let cond let "#<lambda 0x16c011bf99add0bc>"] 4 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 36 [if let org-element-lineage let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [filtered-frame-list frames-on-display-list "#<subr F616e6f6e796d6f75732d6c616d626461_anonymous_lambda_2>" internal--before-save-selected-window pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c01161f9add0bc>" funcall prog1] 4 [if let org-fontify-meta-lines-and-blocks-1 condition-case org-fontify-meta-lines-and-blocks font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ef2e84e9bdc43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let*] 4 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x16c011a3c1add0bc>" funcall prog1 catch let progn if cond] 4 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if save-excursion if progn] 4 [org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013e1ecaabe>" funcall prog1 catch] 3 [if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x16c01167c9add0bc>" funcall prog1 catch let progn if cond] 4 ["#<subr F616e6f6e796d6f75732d6c616d626461_anonymous_lambda_2>" internal--before-save-selected-window pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 5 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c01171b9add0bc>" funcall prog1 catch] 4 [org-element-type memq if not and while let org-element-lineage let if let org-before-first-heading-p if org-fold-show-children cond let*] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c01751a9add0bc>" funcall] 4 [save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 4 [jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0173619add0bc>" funcall] 4 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c54b5a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 4 [progn cond let cond let cond let "#<lambda 0x16c0175bd1add0bc>" funcall prog1 catch let progn if cond let] 4 [let* while if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if] 8 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [not cond format let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013ffb17abe>" funcall prog1 catch let] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 10 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if save-excursion if] 4 [and let* vector setq if progn cond let cond let cond let "#<lambda 0x16c0173931add0bc>" funcall prog1 catch] 4 [if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 12 [= and or cond let* org-noter--parse-root org-element-contents let progn progn if let org-noter-sync-next-page-or-chapter let while let] 2 ["#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>" funcall] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x16c0170ef9add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>"] 4 [let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x16c0173169add0bc>" funcall] 4 [let if let org-before-first-heading-p if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013fcd81abe>" funcall] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0172359add0bc>" funcall prog1] 4 [progn aref progn progn org-element--cache-root let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion] 4 [let cond let cond let "#<lambda 0x16c0172511add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc] 4 [save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 8 [org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0x16c0171201add0bc>" funcall prog1 catch let progn if cond let] 4 [progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let*] 4 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101bd013ff58d2be>" funcall prog1 catch let progn if cond let] 5 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 10 [list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry if] 4 [if org-fontify-drawers font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ee80a15943e43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [gethash or let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect] 8 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [eq cond let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x16c0171ce1add0bc>"] 4 ["#<compiled 0x1e54a66450716ae3>" tq-process-buffer tq-filter "#<compiled -0x7c121a1f63aca7b>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c540ea3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 7 [eq if let cond let* and let* vector setq if progn cond let cond let cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0110a29add0bc>" funcall prog1 catch] 4 [let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x16c0110221add0bc>" funcall prog1] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0113459add0bc>" funcall] 4 [if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn if org-show-set-visibility] 4 [car if let cond let* and let* vector setq if progn cond let cond let cond] 4 [let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 8 [if let* org-cite-activate font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ea5234276d643>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c014a501add0bc>" funcall prog1 catch] 4 [if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013ea3ad2be>" funcall prog1 catch let progn if] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x16c014a1b1add0bc>" funcall prog1 catch let progn if cond] 4 [org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 12 [let* let* < if let progn if cond let cond let "#<lambda 0x16c00c51d1add0bc>" funcall prog1 catch let] 4 [cconv-fv cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 2 [let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page] 4 [eq if let cond let* and let* org-element-end <= and while let cond let* save-restriction save-excursion] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 6 [consp and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013e682aabe>"] 2 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form] 10 [and or let org-element--cache-verify-element and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe] 4 [pdf-info-query pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c546023>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 7 [progn if cond let cond let "#<lambda 0x16c00c2129add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>"] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x16c00c2129add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [cond let "#<lambda 0x16c00c4b31add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x16c00c3d21add0bc>" funcall] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [and let cond let cond let "#<lambda 0x16c00c5ac1add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>"] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 2 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x16c00c7d61add0bc>"] 4 [progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect save-current-buffer let if let progn progn] 4 [or if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>" funcall catch] 1 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c00c4eb9add0bc>" funcall prog1 catch] 4 [eq if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c01410b1add0bc>" funcall prog1 catch] 4 [let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0141ea1add0bc>" funcall prog1 catch] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [let let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while let dotimes let] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0140079add0bc>" funcall prog1] 4 [and not and or org-back-to-heading if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let*] 8 [if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if] 4 [if let* if let* let* < if let progn if cond let cond let "#<lambda 0x16c00c5e71add0bc>" funcall] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function seq-find org-cite-get-processor let org-cite-processor-has-capability-p and or let* org-cite-activate] 4 [let "#<lambda 0x101bd013e59432be>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>" funcall] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 8 [cond let* and let* let* < if let progn if cond let cond let "#<lambda 0x16c00c4191add0bc>" funcall] 4 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 28 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013f17c8abe>" funcall prog1 catch let progn] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c00c0c29add0bc>" funcall prog1 catch] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure] 6 [let* and let* < if let progn if cond let cond let "#<lambda 0x16c00c1399add0bc>" funcall prog1 catch] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 13 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map] 2 [if progn cond let cond let cond let "#<lambda 0x16c00c15f9add0bc>" funcall prog1 catch let progn if cond] 4 [org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children] 4 [progn cond let cond let cond let "#<lambda 0x16c00c0fc1add0bc>" funcall prog1 catch let progn if cond let] 4 [org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 16 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013ea3912be>" funcall prog1 catch] 2 [let cond let* and let* < if let progn if cond let cond let "#<lambda 0x16c01405f1add0bc>" funcall] 4 [org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0140661add0bc>" funcall prog1 catch] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x16c00c0211add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>"] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 6 [cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>" funcall catch let let*] 4 [cond org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101bd013cfbd8abe>" funcall prog1] 4 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 4 [progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x16c01437b1add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc] 4 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 26 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 11 [if let cond let* and let* let* < if let progn if cond let cond let] 4 [let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>" funcall catch let let* progn] 2 [symbolp cond org-element-type let* and let* vector setq if progn cond let cond let cond let] 4 [org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013cc4fcabe>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>"] 3 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x16c01435e9add0bc>" funcall] 4 [cond org-element-type let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x16c01435e9add0bc>"] 4 [org-remove-flyspell-overlays-in progn if org-fontify-drawers font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156eaed7303e4943>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn] 5 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv] 4 [catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>"] 4 [cond let progn if cond let cond let "#<lambda 0x16c0144fe1add0bc>" funcall prog1 catch let progn if cond] 4 [pdf-info--normalize-file-or-buffer pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c5450e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 3 [and let* < if let progn if cond let cond let "#<lambda 0x16c0143091add0bc>" funcall prog1 catch let] 4 [and if org-activate-dates font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ecdc3835aa743>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn] 4 [cond org-element-contents mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>"] 4 [if let* vector setq if progn cond let cond let cond let "#<lambda 0x16c0141d31add0bc>" funcall prog1 catch] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [while catch org-activate-links--text-properties if org-activate-links font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ead9ef64e4043>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect] 4 [if let progn if cond let cond let "#<lambda 0x16c00e6851add0bc>" funcall prog1 catch let progn if cond] 4 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 8 [org-noter--doc-get-page-slice let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c01422f1add0bc>" funcall prog1 catch] 4 [progn if let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let] 7 ["#<compiled -0x7c121a1f63aca7b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 3 [and let* vector setq if progn cond let cond let cond let "#<lambda 0x16c0142911add0bc>" funcall prog1 catch] 4 [not cond org-get-limited-outline-regexp concat re-search-forward if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 8 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101bd013c1f88abe>" funcall] 2 [function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler] 7 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x16c014bca9add0bc>" funcall] 4 [car eq if let cond let* and let* org-element-begin = or and not and if if] 8 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn] 4 [progn cond let cond let cond let "#<lambda 0x16c014a8d1add0bc>" funcall prog1 catch let progn if cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd013cced1abe>" funcall prog1 catch let progn if cond] 3 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c551ea3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 1 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0144bd9add0bc>"] 4 [progn cond let cond let cond let "#<lambda 0x16c0144bd9add0bc>" funcall prog1 catch let progn if cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0144bd9add0bc>" funcall] 4 [derived-mode-p if org-noter--doc-file-property let "#<lambda 0x16c0144bd9add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond] 4 [car if let cond let* and let* org-element-begin < or let if let org-before-first-heading-p if org-fold-show-children] 4 [mod if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013c2d60f16>" funcall prog1 catch] 25 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 4 [macroexpand-all cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map let let progn] 2 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x16c0142911add0bc>" funcall] 4 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x16c0142cc9add0bc>" funcall prog1 catch let progn if cond] 4 [progn if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 4 [symbolp cond org-element-type let "#<lambda -0x19a0d58a87dfa748>" mapc cond cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond cond let "#<lambda -0x19a0d58a87dfa748>" mapc] 2 [let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x16c01422f1add0bc>" funcall prog1 catch let progn if] 4 [progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if] 10 [let org-element-lineage let if let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if] 4 [progn cond let cond let cond let "#<lambda 0x16c00e6f21add0bc>" funcall prog1 catch let progn if cond let] 6 [let if let progn progn if let org-noter--focus-notes-region if let progn progn if let org-noter--doc-location-change-handler run-hooks] 4 [let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region] 8 [cond org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101bd013cf7a6716>" funcall prog1] 5 [while if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point] 4 [and if let org-noter--parse-location-property let "#<lambda 0x101bd013ce8cb716>" funcall prog1 catch let progn if cond let "#<lambda -0x19a0d58a87dfa748>" mapc] 3 [progn cond let cond let cond let "#<lambda 0x16c0143091add0bc>" funcall prog1 catch let progn if cond let] 4 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x16c0143091add0bc>" funcall prog1 catch let progn if cond let] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0144fe1add0bc>" funcall] 4 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let] 3 [progn if unwind-protect let* let org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [let "#<lambda -0x19a0d58a87dfa748>" mapc cond cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond let "#<lambda -0x19a0d58a87dfa748>" funcall catch let let* progn] 2 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x16c01435e9add0bc>" funcall prog1 catch] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013ce06bf16>" funcall prog1 catch let progn if cond let] 5 [if let* if let* vector setq if progn cond let cond let cond let "#<lambda 0x16c0143241add0bc>" funcall] 4 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101bd013cc42cf16>" funcall prog1 catch let progn if cond] 3 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x16c01439a1add0bc>" funcall] 4 [org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children] 4 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x16c01437b1add0bc>" funcall] 4 [1- if save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 9 [progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x16c01425a9add0bc>" funcall prog1 catch let progn] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0142701add0bc>" funcall prog1] 4 [save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion] 4 [if let* vector setq if progn cond let cond let cond let "#<lambda 0x16c0140661add0bc>" funcall prog1 catch] 4 [eq not if if if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x16c01405f1add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>"] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x101bd013e779a716>" funcall prog1 catch let progn if cond let "#<lambda -0x19a0d58a87dfa748>"] 2 [or if let org-noter--parse-location-property let "#<lambda 0x101bd013e7217716>" funcall prog1 catch let progn if cond let "#<lambda -0x19a0d58a87dfa748>" mapc] 7 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* progn] 9 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101bd013e7428716>" funcall] 7 [macroexp-macroexpand macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 4 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101bd013e7d3df16>" funcall prog1 catch let] 6 [let* and let* let* < if let progn if cond let cond let "#<lambda 0x16c00c0c29add0bc>" funcall prog1] 4 [save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [if let* let* < if let progn if cond let cond let "#<lambda 0x16c0140ee1add0bc>" funcall prog1 catch] 4 [if let* org-element-begin let* while if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd013f1a42716>" funcall prog1 catch let progn if cond] 13 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x16c0140079add0bc>" funcall] 4 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013f0877716>" funcall prog1 catch let] 6 [cond let cond let "#<lambda 0x16c0141ea1add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond] 4 [save-current-buffer progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage] 4 [consp and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let] 6 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c00c4eb9add0bc>" funcall prog1] 4 [let cond let "#<lambda 0x16c00c4eb9add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond] 4 [let "#<lambda 0x16c00c7d61add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c00c5ac1add0bc>" funcall prog1 catch] 7 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c00c3d21add0bc>" funcall prog1] 4 [cond org-element-type let* and let* org-element-begin = or and not and if if let save-restriction save-excursion] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013eb640716>" funcall prog1 catch let] 11 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x101bd013ea6c6716>" funcall prog1 catch let progn if cond let "#<lambda -0x19a0d58a87dfa748>"] 7 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 7 [and let* vector setq if progn cond let cond let cond let "#<lambda 0x16c00c3691add0bc>" funcall prog1 catch] 7 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 2 [setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [let "#<lambda 0x101bd013e6ed9716>" funcall prog1 catch let progn if cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond cond let "#<lambda -0x19a0d58a87dfa748>"] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c00c3441add0bc>" funcall prog1] 3 [- 1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer] 4 [org-noter--compare-locations and if cond let "#<lambda 0x101bd013e7053f16>" funcall prog1 catch let progn if cond let "#<lambda -0x19a0d58a87dfa748>" mapc] 2 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [let org-fold-core-get-folding-spec if org-fold-folded-p not or and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading outline-flag-subtree] 4 [kill-this-buffer-enabled-p redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c014a1b1add0bc>"] 6 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013e6a55716>" funcall prog1 catch let progn if cond] 3 [let* vector setq if progn cond let cond let cond let "#<lambda 0x16c014a501add0bc>" funcall prog1 catch let] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c014a501add0bc>" funcall] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 7 [if progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn] 3 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn] 8 [numberp if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013ed402f16>" funcall prog1 catch let progn if cond] 6 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x16c0110221add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>"] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0110a29add0bc>"] 4 [save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let] 4 [or if cond let "#<lambda -0x39a9f4957cd2411>" mapc cond let "#<lambda -0x39a9f4957cd2411>" funcall catch let let* progn if org-element-ast-map] 4 [cond org-element-type let "#<lambda -0x19a0d58a87dfa748>" mapc cond cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond] 3 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0111791add0bc>"] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0171ce1add0bc>"] 7 [org-at-heading-p and if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 7 [or if let org-noter--parse-location-property let "#<lambda 0x101bd013fd7c1716>" funcall prog1 catch let progn if cond let "#<lambda -0x19a0d58a87dfa748>" mapc] 3 [org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x16c0110871add0bc>"] 4 [cond org-element-type memq not and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion] 4 [let "#<lambda 0x101bd013ff5a2716>" funcall prog1 catch let progn if cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond cond let "#<lambda -0x19a0d58a87dfa748>"] 6 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 2 [and let* org-element-begin = or and not and if if let save-restriction save-excursion save-excursion let if] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0171201add0bc>" funcall] 7 [< if let progn if cond let cond let "#<lambda 0x16c0171201add0bc>" funcall prog1 catch let progn if] 4 [> and if let org-noter--parse-location-property let "#<lambda 0x101bd013fd7e3716>" funcall prog1 catch let progn if cond let "#<lambda -0x19a0d58a87dfa748>"] 7 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x16c0172511add0bc>" funcall prog1] 4 [progn if progn if if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 14 [if let* vector setq if progn cond let cond let cond let "#<lambda 0x16c0173169add0bc>" funcall prog1 catch] 4 [mapc cond cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond let "#<lambda -0x19a0d58a87dfa748>" funcall catch] 6 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x16c0170ef9add0bc>" funcall prog1 catch] 4 [prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 4 [cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond let "#<lambda -0x19a0d58a87dfa748>" funcall catch let let*] 6 [or and if let while let catch or setq cond let* progn progn unwind-protect save-current-buffer let] 4 [function setq let let* progn if org-element-ast-map let* progn if org-element-map let let progn progn if] 2 [and or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [or and if let cond let while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c01743e1add0bc>" funcall prog1] 4 [pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 7 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c0173709add0bc>" funcall prog1] 8 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x16c0173619add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 6 [if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond] 6 [or progn if let org-noter--parse-location-property let "#<lambda 0x101bd013f3d67f16>" funcall prog1 catch let progn if cond let "#<lambda -0x19a0d58a87dfa748>"] 7 [cond org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x16c01171b9add0bc>" funcall prog1] 3 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c01161f9add0bc>"] 9 [if let* if let* vector setq if progn cond let cond let cond let "#<lambda 0x16c0116351add0bc>" funcall] 4 [and if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 4 [let cond let "#<lambda 0x16c011bf99add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond] 5 [and and let* let let org-element--property org-element-parent setq while let org-element-lineage let if let org-before-first-heading-p if] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>" funcall catch let let* progn if org-element-ast-map let* progn if] 3 [concat re-search-forward if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [if let cond let* and let* setq if let* progn if org-noter--get-properties-end if let cond let*] 4 [cond cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond let "#<lambda -0x19a0d58a87dfa748>" funcall catch let] 6 [save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree if save-excursion if] 4 [org-element-type let "#<lambda -0x19a0d58a87dfa748>" mapc cond cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond let "#<lambda -0x19a0d58a87dfa748>" funcall catch let let*] 7 [image-display-size cdr let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 4 [or if let org-noter--parse-location-property let "#<lambda 0x101bd013ea9f0716>" funcall prog1 catch let progn if cond let "#<lambda -0x19a0d58a87dfa748>" mapc] 2 [not cond org-element-type let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let "#<lambda -0x11f4b3a067dfa748>" funcall catch] 3 [if let cond let* and let* min cons let* progn if progn if progn cond let] 4 [save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn] 4 [org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013e883df16>" funcall prog1] 2 [or if cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond cond let "#<lambda -0x19a0d58a87dfa748>" mapc] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [if let* if let* vector setq if progn cond let cond let cond let "#<lambda 0x16c0113a91add0bc>" funcall] 3 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c011afa1add0bc>" funcall] 3 [cdr car if let cond let* and let* < if let progn if cond let cond] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x16c00dbfb9add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>"] 4 [let* org-element-begin = and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 4 [select-window progn unwind-protect save-current-buffer let progn if org-noter--set-notes-scroll redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn] 4 [if let* if let* let* < if let progn if cond let cond let "#<lambda 0x16c00da461add0bc>" funcall] 8 [if save-restriction save-excursion org-outline-level funcall let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [save-excursion save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x16c00d3c81add0bc>" funcall] 9 [if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c00def49add0bc>" funcall prog1 catch] 3 [and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point] 4 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if] 4 [if let* vector setq if progn cond let cond let cond let "#<lambda 0x16c00df6b1add0bc>" funcall prog1 catch] 8 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013e1205716>" funcall prog1 catch let progn] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x16c00db0b9add0bc>"] 4 [if save-excursion org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [org-element-type let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond let] 8 [progn if cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond let "#<lambda -0x19a0d58a87dfa748>" funcall catch] 2 [cond org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x16c00d8721add0bc>" funcall prog1] 3 [let "#<lambda 0x101bd01323d6d716>" funcall prog1 catch let progn if cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond cond let "#<lambda -0x19a0d58a87dfa748>"] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x16c00db299add0bc>" funcall prog1 catch let progn if cond] 3 [cond org-element-type let "#<lambda -0x19a0d58a87dfa748>" mapc cond cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond let "#<lambda -0x19a0d58a87dfa748>" funcall catch let] 2 [org-element-type let* and let* org-element-end goto-char if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let* progn] 4 [cond org-element-type let* and let* org-element-begin goto-char "#<lambda 0xbcd4a8ef57b0c>" funcall setq progn if while catch let org-element-lineage-map] 4 [cond org-element-type eq not if if if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p] 4 [if org-noter--doc-file-property let "#<lambda 0x16c00d9de9add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond] 8 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 8 [if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 6 [let "#<lambda 0x16c00dafd1add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>"] 4 [timer-activate-when-idle run-with-idle-timer vector setq progn if if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 4 [let "#<lambda 0x16c00dc309add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let "#<lambda -0x11f4b3a067dfa748>"] 10 [eq cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101bd0132282d716>" funcall prog1] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x16c00dcfb1add0bc>" funcall prog1 catch let progn if cond] 4 [let org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x16c00eaa11add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc] 3 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x16c00e9e61add0bc>" funcall prog1 catch let progn if cond let] 3 [and not and or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x16c00d9069add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc] 6 [cdr let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [if let org-noter--parse-location-property let "#<lambda 0x101bd01323232716>" funcall prog1 catch let progn if cond let "#<lambda -0x19a0d58a87dfa748>" mapc cond] 6 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x16c00d9e89add0bc>" funcall] 3 [if let* if let* let* < if let progn if cond let cond let "#<lambda 0x16c00e9149add0bc>" funcall] 3 [and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd013234aaf16>" funcall prog1 catch let progn if] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 5 [org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 4 [let* org-element-end goto-char if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1e54a71070716ae3>" tq-process-buffer tq-filter "#<compiled -0x7c121a1f63aca7b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 8 [cond org-element-type memq if not and while let org-element-lineage let* org-up-heading-safe while save-excursion progn if org-show-set-visibility] 4 [mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 13 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if] 4 [cond let "#<lambda 0x16c00eb331add0bc>" funcall prog1 catch let progn if cond let "#<lambda -0x11f4b3a067dfa748>" mapc cond cond let] 2 [let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101bd0132f846716>" funcall prog1 catch let progn if] 2 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd0132a1a9f16>" funcall prog1 catch] 2 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x16c0174fa9add0bc>" funcall prog1 catch let progn if cond] 1 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let*] 4 [org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect] 4 [Automatic\ GC] 1118)) (25847 63823 678339 44000) nil]
