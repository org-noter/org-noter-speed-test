
[profiler-profile "28.1" cpu #s(hash-table size 487 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([not cond org-get-limited-outline-regexp let* progn cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond] 11 [while let progn if save-excursion org-element--get-node-properties let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while] 4 [and let cond let org-end-of-subtree save-excursion min let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if] 4 [save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond] 4 [condition-case org-back-to-heading-or-point-min org-end-of-subtree save-excursion min let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let] 4 [if save-excursion org-element--get-node-properties let* save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements] 4 [save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion org-element--parse-elements] 4 [progn let save-excursion org-element-section-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let*] 4 [user-error condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 511 [not or cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 401 [org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 108 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 24 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2128 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 26 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0870d6e114e800>" funcall let progn if cond] 4 [cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 67 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 564 [save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [or let org-noter--doc-file-property let "#<lambda 0xa0871ccc914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 2 [mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let let* org-element-map let progn] 4 [save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 71 [not and let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to cond let] 4 [condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 39 [cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 70 [pdf-view-image-size pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 12 ["#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall] 4 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 56 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 2 [outline-back-to-heading condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 32 [let or progn if let org-noter--parse-location-property let "#<lambda 0xa08704a1114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>"] 7 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0870440114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [cconv-fv cconv-make-interpreted-closure function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion] 4 [progn unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 62 [let cond let "#<lambda 0xa0871e1e114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871ed5914e800>" funcall let progn if cond] 4 [while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 56 [while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 20 [cond let "#<lambda 0xa0871b88114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [cconv-make-interpreted-closure function overlay-put let progn if org-flag-region let* if let* cond let org--hide-wrapper-toggle org-hide-drawer-toggle progn if] 4 [outline-back-to-heading condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 18 [condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 70 [not cond org-get-limited-outline-regexp let* progn save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 8 [window-edges window-inside-pixel-edges pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 3 [save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 23 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if] 3 [let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 56 [outline-flag-region outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 8 [if org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x10116329210ba28e>" funcall] 3 [goto-char save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0870764114e800>" funcall let progn if cond] 4 [if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 12 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 66 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 38 [vector setq if progn cond let cond let cond let "#<lambda 0xa0871472114e800>" funcall let progn if cond] 7 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let "#<lambda 0xa0871786914e800>" funcall let progn] 7 [cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08714d8114e800>" funcall let progn if cond] 8 [progn if cond let cond let "#<lambda 0xa0871a86114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 6 [cond let cond let "#<lambda 0xa0871a86114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [and let cond let org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while save-excursion progn if] 20 [org-element-contents not cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall] 3 [function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 8 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 8 [if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 21 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 64 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101163292269fa8e>" funcall let progn if cond let] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter] 5 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08716ff914e800>" funcall let] 4 [progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 80 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa0871a01114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 29 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871620114e800>" funcall] 3 [or cdr let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 49 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632924da1a8e>" funcall let progn if cond] 18 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08713aa914e800>"] 4 [cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 4 [null save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 36 [condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 64 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 7 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn] 7 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa08719a8114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [and progn or progn org-noter--view-info-regions or let* progn progn unwind-protect save-current-buffer let if let progn progn] 4 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 40 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101163292e5c0a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087180b914e800>" funcall] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871865114e800>" funcall let progn if cond] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871862914e800>" funcall] 7 [org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 22 [cond org-element-contents not cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>"] 4 [eq cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0871f9d114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa0871fc5914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [function cons vector setq if progn cond let cond let "#<lambda 0xa08772c9114e800>" funcall let progn if cond] 4 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 28 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let] 2 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f586ff28e>" funcall let] 11 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087709b114e800>" funcall let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632f59aec28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 3 [remove-overlays org-flag-region if save-excursion org-flag-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond] 6 [cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0xa08770e1914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 6 [and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 13 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08710f6914e800>" funcall let] 6 [org-element-type let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [symbolp cond org-element-contents mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [outline-back-to-heading condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 28 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08712c2914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 48 [format setq if while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [and let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 12 [cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa087112f914e800>" funcall let progn if cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087112f914e800>" funcall let progn if cond] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f3e6be28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 2 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f3d362a8e>" funcall let progn if] 9 [list setq progn cond let cond let cond let "#<lambda 0xa0871191914e800>" funcall let progn if cond let] 5 [cond let cond let "#<lambda 0xa0871191914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa087153a914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 18 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let] 1 [if save-restriction save-excursion org-outline-level funcall let org-end-of-subtree save-excursion let* save-excursion if org-show-children cond let* progn if] 4 [progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 31 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [outline-back-to-heading condition-case org-back-to-heading let* progn save-excursion if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 16 [let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 19 [function cons vector setq if progn cond let cond let "#<lambda 0xa08778f5114e800>" funcall let progn if cond] 4 [if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall catch let] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087780d914e800>" funcall let progn if cond] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f3774c28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 5 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877bca114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f379baa8e>" funcall let progn] 2 ["#<compiled -0x1c880ca794d412df>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x9c5db717f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 6 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0877b01914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 3 [derived-mode-p not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p if org-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f37c5ba8e>" funcall] 3 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08773c0914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f374b8a8e>" funcall let progn if] 6 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa08773f3914e800>" funcall let progn if] 1 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08773f3914e800>" funcall let progn] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if let progn if] 2 [save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 3 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x9c5db717f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 6 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0877543114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 3 [org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 18 [window-current-scroll-bars window-edges window-inside-pixel-edges pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let] 4 [let progn progn if let org-noter--get-current-view org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087757f114e800>"] 4 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f34b2028e>" funcall] 7 [progn cond let cond let cond let "#<lambda 0xa08775b6114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa08775b6114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 12 ["#<compiled -0x17ea0188d33cf9d7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x9c5db717f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 13 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 8 [cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall catch let let*] 6 [tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fa4049a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 2 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08777da914e800>" funcall] 6 [save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [let "#<lambda 0x1011632fa4a7728e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 6 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08764b3114e800>"] 7 [cond org-element-contents not cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>"] 6 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry let] 4 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877c38114e800>" funcall] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877c38114e800>" funcall let progn if cond] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa0877ecf114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877efb914e800>"] 5 [let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 8 [< if let progn if cond let cond let "#<lambda 0xa0877efb914e800>" funcall let progn if cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877efb914e800>" funcall] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877efb914e800>" funcall let progn if cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0877efb914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [if let org-noter--get-notes-window if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877fd2914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [or if let org-noter--parse-location-property let "#<lambda 0x1011632fa346a28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877e0c114e800>"] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 22 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0876554914e800>" funcall] 4 [org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 8 [cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction] 4 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0876521114e800>" funcall] 3 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876521114e800>" funcall let progn] 4 [save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 15 [or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa2ed528e>" funcall let progn if cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087640d114e800>"] 3 ["#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let let* org-element-map let] 4 [if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 4 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877aa2114e800>" funcall let] 4 [or let org-noter--doc-file-property let "#<lambda 0x1011632fa1fe128e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let] 7 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 3 [cond let cond let cond let "#<lambda 0xa0877a19114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let] 4 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fa3ccaa8e>" funcall let progn] 4 ["#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall] 2 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877f16114e800>" funcall let progn if cond let] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877fbc114e800>" funcall let progn] 4 [progn cond let cond let cond let "#<lambda 0xa0877924914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa087796f914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 6 [1- if save-restriction save-excursion org-outline-level funcall and let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility] 4 [if let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 9 [not cond org-get-limited-outline-regexp let* progn cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877d87114e800>" funcall let progn] 5 [not cond org-get-limited-outline-regexp let* progn if cond let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632faed5828e>" funcall let progn if cond let] 7 [and progn or progn frame-live-p and if progn if org-noter--valid-session if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0877e8e114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632faea7d28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 4 [or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877d7d114e800>" funcall let progn] 4 [org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877d7d114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 4 [if let org-noter--parse-location-property let "#<lambda 0x1011632fad53a28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let] 7 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877de4114e800>" funcall] 5 [vector setq if progn cond let cond let "#<lambda 0xa0877de4114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632faac2f28e>" funcall let progn if] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08762d3114e800>" funcall let] 4 [setq if while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 12 [mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let progn] 2 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876e6c914e800>"] 4 [or let org-noter--doc-file-property let "#<lambda 0xa0876e6c914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876e6c914e800>" funcall] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876e6c914e800>" funcall let progn if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876ef2114e800>" funcall let progn] 4 [- 1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer] 4 [org-noter--compare-locations and if cond let "#<lambda 0x1011632fabf3928e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fab8cb28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond] 6 [progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0876f6f114e800>" funcall let progn if cond] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0876f6f114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let] 6 [cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let let*] 4 [org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 12 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0876f5b914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [org-not-nil if let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 3 [and if progn if org-noter--valid-session if let org-noter--get-notes-window if let progn progn if let org-noter--doc-location-change-handler run-hooks] 4 [and if let org-noter--parse-location-property let "#<lambda 0x1011632facee228e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876fac114e800>" funcall let progn if cond] 4 [let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>"] 3 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 1 [symbolp cond org-element-type let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch] 3 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876c0a114e800>" funcall let progn if cond let] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter] 2 [symbolp cond org-element-type let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876ca0114e800>"] 2 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0876ca0114e800>" funcall] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fac2f028e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc] 3 [vector setq if progn cond let cond let cond let "#<lambda 0xa08700be114e800>" funcall let progn if cond] 3 ["#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087002a914e800>"] 4 [let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 3 [cond org-element-type let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 4 [cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let let* org-element-map let progn progn] 1 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa0876328114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0876328114e800>" funcall] 4 [and cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall catch] 3 [not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087678b914e800>" funcall let] 2 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa9513026>" funcall let progn if cond] 17 [cond org-element-contents mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>"] 4 [org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 14 [< if let progn if cond let cond let "#<lambda 0xa08763bc914e800>" funcall let progn if cond let] 4 [not cond format let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let] 6 ["#<compiled 0x7f3155b503565a0>" mapcar pdf-util-scale "#<compiled 0xade0723d9cb227e>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c55cca3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0870014114e800>" funcall let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 2 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632fac233026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [if progn cond let cond let cond let "#<lambda 0xa087002a914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch] 4 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 10 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08700be114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [goto-char condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632fada86826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876ca0114e800>" funcall let progn if cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632faf23f026>" funcall let progn if cond] 9 [condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876f81114e800>" funcall let progn] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876f81114e800>"] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876c0a114e800>"] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1011632fac2fd826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632fac2fd826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876cbb114e800>" funcall let progn] 4 [< if let progn if cond let cond let "#<lambda 0xa0876cbb114e800>" funcall let progn if cond let] 4 [setq if progn cond let cond let cond let "#<lambda 0xa0876cbb114e800>" funcall let progn if cond let] 4 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fac852826>" funcall let progn if] 2 [and cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch] 6 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fabae3826>" funcall let progn if] 27 [let org-noter--doc-file-property let "#<lambda 0xa0876f35114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c55c563>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0876f5b914e800>" funcall let progn] 4 [or let org-noter--doc-file-property let "#<lambda 0x1011632fabe92026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let] 6 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fabdf7026>" funcall] 6 [cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let let*] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876229114e800>" funcall] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map or let* progn] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn] 2 [vector setq if progn cond let cond let cond let "#<lambda 0xa0876ef2114e800>" funcall let progn if cond] 4 [if org-element-property < if let progn if cond let cond let "#<lambda 0xa0876ef2114e800>" funcall let progn if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 2 [cond org-element-contents not cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [not and cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fad553026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632fad553026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [cond let cond let "#<lambda 0xa0877de4114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877d7d114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [vector setq if progn cond let cond let cond let "#<lambda 0xa0877e8e114e800>" funcall let progn if cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877e8e114e800>"] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877d87114e800>"] 4 [run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 4 [if let org-noter--parse-location-property let "#<lambda 0x1011632fae3ae826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let] 3 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fae3ae826>" funcall let] 33 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08779d1914e800>" funcall let] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa08779d1914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [plist-get if org-element-property < if let progn if cond let cond let "#<lambda 0xa087796f914e800>" funcall let progn] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877fbc114e800>" funcall let] 4 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa03cb026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 3 [symbolp cond org-element-contents mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let] 4 [cond org-element-type let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let] 4 [not cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch] 4 [cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let let* org-element-map let let progn] 4 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 8 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 4 ["#<lambda 0xa0877609914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [org-noter--doc-file-property let "#<lambda 0xa0877a19114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [and if let org-noter--parse-location-property let "#<lambda 0x1011632fa1705826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond] 2 [progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa1705826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087640d114e800>" funcall let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 5 [or if let org-noter--parse-location-property let "#<lambda 0x1011632fa3570026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08764f7114e800>" funcall let progn if] 4 [let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall] 2 [and if let org-noter--parse-location-property let "#<lambda 0xa0876521114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa349d826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 3 [run-hook-with-args-until-success or progn unwind-protect save-current-buffer let let progn progn if let org-noter--get-current-view org-noter--get-view-info let progn progn] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0876554914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876554914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877e0c114e800>" funcall let progn if] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632fa5ab5026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 2 [cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let] 4 [org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let] 4 [and progn or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--get-notes-window let progn progn] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877c38114e800>" funcall let progn] 4 [setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877c92114e800>" funcall let progn if] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0877c92114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [if let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [symbolp cond org-element-type let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa08764b3114e800>" funcall] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa461a826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08777da914e800>" funcall] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08777da914e800>" funcall let progn if cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08777e3914e800>" funcall let progn] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876911114e800>" funcall let progn if] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f334d2026>"] 6 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632f334d2026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [let cond let "#<lambda 0xa08769c4914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08769c4914e800>"] 4 [cond let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let*] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087751c114e800>" funcall let progn if cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877525114e800>" funcall let progn if cond] 4 [let* progn org-before-first-heading-p if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [setq let let* org-element-map let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect save-current-buffer] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632f34196826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0877442114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877543114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877354114e800>" funcall let] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f374db826>" funcall let progn if cond let] 2 [setq progn cond let cond let cond let "#<lambda 0xa08773f3914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f37b48826>" funcall let progn if] 9 [remove-overlays org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 12 [or let org-noter--doc-file-property let "#<lambda 0xa0877b01914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c54fd63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f3664c026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 6 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa0877bca114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877bca114e800>" funcall] 4 [org-noter--compare-locations and if cond let "#<lambda 0x1011632f36aa1026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond] 6 [unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if let] 12 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f3a3ca826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 2 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xa08778af114e800>" funcall let progn if cond let] 2 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let let] 2 [or let org-noter--doc-file-property let "#<lambda 0x1011632f3aaaf826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let] 4 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c54b5a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 6 [kill-this-buffer-enabled-p redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [org-noter--doc-file-property let "#<lambda 0x1011632f39074826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 3 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877647914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08776ac914e800>" funcall let progn if cond] 2 [pdf-info-query--parse-response "#<compiled 0x9c5db717f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let] 3 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632f3d8cb026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 2 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f3d8cb026>" funcall let progn if] 4 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087153a914e800>" funcall] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function let* while save-excursion let* progn] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f3d0f5026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond] 4 [if org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0871191914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 3 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f3e62f826>" funcall let progn if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871290114e800>"] 4 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087112f914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [and progn or progn if progn progn unwind-protect save-current-buffer let if let progn progn if let] 4 [pdf-cache--data-get pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087123d914e800>" funcall let progn] 1 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let progn if] 3 [or progn if let org-noter--parse-location-property let "#<lambda 0xa08712c2914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632f3cdc0026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa08713eb914e800>" funcall let progn if cond let] 3 [progn cond let cond let cond let "#<lambda 0xa08713df114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 2 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f3b09a026>"] 6 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f3b09a026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond] 4 [let org-noter--parse-location-property let "#<lambda 0x1011632f3c1a7826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>"] 2 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08771de114e800>" funcall let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08770e1914e800>" funcall let progn] 5 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 2 [org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if let progn] 4 [if let "#<lambda 0x1011632f5872c026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 7 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087702a114e800>"] 2 [list list let let save-excursion org-element-property-drawer-parser cond let save-excursion org-element--current-element setq if while let let* save-restriction] 4 [progn cond org-noter--get-notes-window if let progn progn if let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [let org-noter--parse-location-property let "#<lambda 0x1011632f3f168826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall] 3 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1011632f3f168826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877278114e800>" funcall] 5 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877278114e800>" funcall let progn if] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xa08772c9114e800>" funcall let progn if cond let] 3 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f3f60c826>" funcall let progn if] 10 [cond org-element-type let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 3 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871fc5914e800>" funcall let progn if] 4 [let cond let "#<lambda 0xa0871fa3914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if] 4 [while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 6 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101163292f8e4826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 8 [or cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 6 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871865114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [plist-get if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101163292e48d026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101163292d9ac826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632924d62826>" funcall let progn] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08713aa914e800>" funcall] 7 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632923518026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 7 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0871620114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 2 [and if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 6 [function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler] 1 [symbolp cond org-element-type let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 3 [setq cond let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let] 2 [cconv--analyze-function cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function] 1 [let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let let* org-element-map] 4 [not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871b58914e800>" funcall let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632920cae826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 3 [progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871786914e800>" funcall let progn if cond] 5 [save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101163292103a826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 7 [cond org-element-contents mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x1011632f33669826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 7 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08705a8914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 3 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f306c2026>" funcall let progn if cond] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 2 [let org-noter--parse-location-property let "#<lambda 0x1011632f31f17026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f31985826>" funcall let progn] 7 [not cond org-get-limited-outline-regexp let* progn save-excursion or let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction] 4 [save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 6 [if let "#<lambda 0xa08704ea114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [or let org-noter--doc-file-property let "#<lambda 0x1011632928c1d826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let] 2 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632928c1d826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [if org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0xa08701ed914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 5 ["#<lambda 0x101163292aa2a826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let] 2 [or let org-noter--doc-file-property let "#<lambda 0x101163292aa2a826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871dd9914e800>" funcall let progn if cond] 3 [and if cond let "#<lambda 0x101163292b760026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let] 4 [pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 3 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101163292c4dd826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0870d6e114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 5 [if cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if let* while save-excursion let*] 4 [cond let cond let "#<lambda -0x758cd43ee142278>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 6 [org-at-heading-p and if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let] 4 [cond let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn progn if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 4 [Automatic\ GC] 1065)) (25844 5062 387524 74000) nil]
