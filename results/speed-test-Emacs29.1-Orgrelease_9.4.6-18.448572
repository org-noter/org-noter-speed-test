
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([progn let* save-excursion let if let org-element-src-block-parser funcall cond cond let cond let save-excursion org-element--current-element let*] 4 [not cond org-get-limited-outline-regexp let* progn cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond] 12 [and cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let* if while let] 4 [cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let* if while let save-excursion] 4 [save-excursion org-element-headline-parser cond let save-excursion org-element--current-element let* if while let save-excursion org-element--parse-elements cond let* if while] 4 [pdf-info-query pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c375323>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 13 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 1393 [user-error condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 380 [if org-element-property or if let org-noter--parse-location-property let "#<lambda -0x758cd43ee142278>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 112 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 51 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2100 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 34 [cond let cond let "#<lambda 0xa0870d6e114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [outline-back-to-heading condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 12 [pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 3 [not or cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 392 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 535 [pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 3 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871ccc914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let] 4 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 40 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871d09114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [remove-overlays org-flag-region if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if] 20 [if let org-noter--parse-location-property let "#<lambda 0xa0871dd9914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 60 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101163292ae0428e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 2 [outline-back-to-heading condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 37 [setq if while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>"] 4 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 16 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 23 [while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 8 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa0870440114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x10116329284db28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 3 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871e77114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [progn org-before-first-heading-p if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [insert-file-contents-literally pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x9c5db717f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 8 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871e1e114e800>" funcall let progn if cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 2 [let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 16 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 32 [numberp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0xa0871b22114e800>" funcall let progn if cond] 4 [let cond let "#<lambda 0xa0871b22114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map] 2 [or if let org-noter--parse-location-property let "#<lambda 0xa0871b99114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let let*] 4 [progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 32 [while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 11 ["#<compiled 0xc9ec7cb72acc529>" mapcar pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x9c5c3626f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c371be3>" mapcar] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 8 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08705a8914e800>" funcall let progn if cond let] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0xa08705a8914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 8 [or progn setq and or cond let* org-noter--parse-root org-element-contents if let progn progn if let progn] 4 [let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 46 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0870502914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [progn if cond let cond let "#<lambda 0xa087060e914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 10 [pdf-info-process-assert-running pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 2 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let progn] 4 [save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 27 [while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 84 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x9c5db717f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 16 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0870764114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [condition-case org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility] 32 [cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 43 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871472114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [or cdr let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 71 [cond let cond let cond let "#<lambda 0xa08714d8114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [vector setq if progn cond let cond let cond let "#<lambda 0xa0871b58914e800>" funcall let progn if cond] 4 [org-noter--doc-file-property let "#<lambda 0xa0871a86114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 24 [if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 42 [and let cond let org-end-of-subtree save-excursion let* save-excursion if org-show-children progn if while save-excursion progn if] 40 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 68 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 8 [let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 24 [condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 39 [unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 21 [not cond org-element-contents mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 93 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08713aa914e800>" funcall let progn] 4 [org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 14 [cond let cond let cond let "#<lambda 0xa08713f5914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08713f5914e800>" funcall let progn if cond] 4 [org-at-heading-p let* progn cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if let* while] 4 [not and cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let let progn] 3 ["#<lambda 0xa08719a8114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c37c3e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 13 [or progn if let org-noter--parse-location-property let "#<lambda 0x101163292e5c0a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 3 [cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 85 [if let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 27 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871865114e800>" funcall let progn if cond] 4 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 36 [not or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871862914e800>" funcall let] 4 [not cond org-get-limited-outline-regexp let* progn save-excursion or let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087172b114e800>" funcall] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871730114e800>" funcall] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let] 3 [let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 4 ["#<lambda 0xa0871fa3914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [and if progn if org-noter--valid-session if let org-noter--get-doc-window internal--before-with-selected-window let let progn progn if let org-noter--get-current-view] 4 [derived-mode-p not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 19 [org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 15 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f3f86928e>" funcall let progn if] 8 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa08772c9114e800>" funcall let progn if] 4 [cond org-element-contents mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>"] 4 [save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 84 [progn unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while] 44 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f58ab5a8e>" funcall let progn if] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 4 [condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 58 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 54 [null save-excursion let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 46 [org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 33 [mapconcat pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c578be3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 2 [vector setq if progn cond let cond let cond let "#<lambda 0xa08713df114e800>" funcall let progn if cond] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0xa08713df114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087123d914e800>" funcall let progn] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087123d914e800>" funcall let progn if] 4 [if save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 16 ["#<lambda 0xa0871164914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [and if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 12 [mapconcat pdf-info-query pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c549163>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871290114e800>" funcall let] 4 [pdf-info-process-assert-running pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 7 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871191914e800>" funcall let progn] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08715c7114e800>" funcall let] 4 [let org-noter--doc-file-property let "#<lambda 0xa08715c7114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [and let progn if org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 12 [or let org-noter--doc-file-property let "#<lambda 0x1011632f39d5ea8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let] 6 [let save-excursion org-element-property-drawer-parser cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to] 4 [pdf-info--normalize-file-or-buffer pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c549ce3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 3 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877647914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0877647914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [org-noter--relative-position-to-view let cond let "#<lambda 0xa0877746914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [mapconcat pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn] 4 [pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 6 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632f36355a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 2 [let cond let "#<lambda 0xa0877b01914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [outline-back-to-heading condition-case org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 20 [cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let] 4 [if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let] 4 [cond let "#<lambda 0xa08773f3914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [if let org-noter--parse-location-property let "#<lambda 0xa0877543114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [if save-excursion org-flag-region save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [symbolp cond org-element-type let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f3478328e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc] 2 [let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 13 [let or progn if let org-noter--parse-location-property let "#<lambda 0xa087757f114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa08775b6114e800>" funcall] 4 [cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall catch let] 7 [or if cons progn if org-noter-pdf--approx-location-cons car vector progn if org-noter-pdf--get-current-view run-hook-with-args-until-success or progn unwind-protect save-current-buffer] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877525114e800>" funcall] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f33d3a28e>" funcall let progn if] 10 [or let org-noter--doc-file-property let "#<lambda 0xa087751c114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [eq cond let cond let "#<lambda 0xa087751c114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08769c4914e800>" funcall let] 4 [cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let] 4 [cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if] 4 [let "#<lambda 0xa0876911114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876911114e800>" funcall let progn if cond] 4 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f328a0a8e>" funcall let] 2 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1011632f328a0a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08777e3914e800>" funcall let] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08777e3914e800>" funcall let progn if] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0xa08777e3914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let] 2 [cond let cond let cond let "#<lambda 0xa08777da914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0xa08777da914e800>" funcall let progn] 4 [let* org-get-level-face font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156f49f07e726143>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let] 4 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c54e223>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 7 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa08764b3114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map or let* progn if] 4 ["#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall] 4 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch] 12 [cconv-make-interpreted-closure function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry progn if while save-excursion progn] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632fa2551a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 7 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877fd2914e800>" funcall let progn if cond] 4 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c5462a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877e0c114e800>" funcall let progn if cond] 4 [cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall catch let let*] 2 [let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 8 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0876554914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fa208428e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xa087656a114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0xa087656a114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [not cond org-get-limited-outline-regexp let* progn cond let save-restriction save-excursion org-element-at-point let "#<lambda 0x13e3eb0>" funcall if let* if] 4 [pdf-cache-get-image pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 4 [if org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0xa08764f7114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [org-noter--doc-file-property let "#<lambda 0xa087640d114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [cond let "#<lambda 0xa087640d114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [if org-element-property < if let progn if cond let cond let "#<lambda 0xa0876455914e800>" funcall let progn if] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876455914e800>" funcall let progn if cond] 4 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fa121c28e>"] 3 [org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0877aa2114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877aa2114e800>" funcall let] 4 [let org-do-emphasis-faces font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ea08d5738cd43>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function window-end let cond let* progn progn unwind-protect] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fa038028e>" funcall let progn] 7 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877f16114e800>" funcall] 4 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa04a528e>" funcall let progn] 2 [let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let] 20 [function org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while let] 2 [progn if let org-noter--parse-location-property let "#<lambda 0x1011632fafcda28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn] 7 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632faf12fa8e>" funcall let progn if cond] 3 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632faf12fa8e>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877924914e800>" funcall let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877924914e800>" funcall let progn if cond] 4 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 10 [and if progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let] 3 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa087796f914e800>" funcall] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa08779d1914e800>"] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877d87114e800>" funcall let progn] 4 [function setq let let* org-element-map let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect] 4 [org-noter--doc-file-property let "#<lambda 0x1011632faea7d28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc] 3 [if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 4 [pdf-info--normalize-file-or-buffer pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c55bea3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 1 [setq if progn cond let cond let cond let "#<lambda 0xa0877d7d114e800>" funcall let progn if cond let] 4 ["#<compiled -0x1c880c96c688aadf>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x9c5db717f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 4 [cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877de4114e800>" funcall let progn if] 4 [list let let save-excursion org-element-property-drawer-parser cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion] 4 [org-noter--doc-get-page-slice let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632faac2f28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 2 [or progn if let org-noter--parse-location-property let "#<lambda 0x1011632faac2f28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08762d3114e800>" funcall let progn if cond] 4 [pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x9c5c3623f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if] 3 [cond let cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0876229114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876f6f114e800>" funcall let progn] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876ed8914e800>" funcall] 4 [condition-case org-back-to-heading-or-point-min save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect] 4 [org-get-limited-outline-regexp let* progn org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 15 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876f5b914e800>" funcall] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876f35114e800>" funcall let] 4 [and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance] 17 ["#<compiled -0x17ea01a3d6c35ad7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x9c5db717f863923>" tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 10 [1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1011632fac25f28e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 3 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876cbb114e800>" funcall let progn if] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x1011632faf4e428e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 4 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c544c63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 10 [or if let org-noter--parse-location-property let "#<lambda 0xa0876c0a114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632facb8128e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond] 6 [or progn if let org-noter--parse-location-property let "#<lambda 0xa0876f81114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0xa0876f81114e800>" funcall let progn] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876ca0114e800>" funcall let progn] 4 [cond let progn if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>"] 2 [run-hook-with-args-until-success cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0870080914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 ["#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall] 4 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa08700be114e800>" funcall] 4 [or let org-noter--doc-file-property let "#<lambda 0xa08700be114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 14 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0870014114e800>" funcall let] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0870014114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0870014114e800>"] 4 [org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa08763bc914e800>"] 4 [let "#<lambda 0x16d07daca9af77ae>" mapc cond cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall catch let let* org-element-map] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xa0876328114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [outline-flag-region outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 8 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632fa9f88a8e>" funcall let progn if cond let "#<lambda 0x16d07daca9af77ae>"] 6 [save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876328114e800>" funcall] 4 [cond org-element-type let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08763bc914e800>" funcall let] 4 [if let cond let while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction save-excursion org-element-at-point] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1011632fac233026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 6 [let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while let dotimes let measure-time] 2 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa08700be114e800>" funcall let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632fac7f5026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 8 [org-back-to-heading save-excursion org-flag-heading while let* save-excursion if org-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 ["#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall] 3 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632faf23f026>" funcall let progn if] 6 [progn cond let cond let cond let "#<lambda 0xa0876f81114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [let org-noter--doc-file-property let "#<lambda 0xa0876f81114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876f81114e800>" funcall] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fafcb4826>" funcall let progn if cond let] 2 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0876c0a114e800>" funcall let] 4 [if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let] 3 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876cbb114e800>"] 4 [plist-get if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0876fac114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [progn frame-live-p and if progn if org-noter--valid-session if let org-noter--get-current-view org-noter--get-view-info let progn progn if let] 4 [if let org-noter--parse-location-property let "#<lambda 0xa0876f35114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [save-excursion let* progn org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [numberp if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fab728826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876f5b914e800>" funcall let progn if cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876f5b914e800>" funcall let progn] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fabd41826>" funcall let progn if cond] 13 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876ed8914e800>"] 4 [if save-restriction save-excursion org-outline-level funcall max format setq if while let* save-excursion if org-show-children progn if] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1011632fabe92026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876f6f114e800>"] 8 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632fabdf7026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 2 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fabdf7026>" funcall] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0876229114e800>" funcall let] 4 [cond let cond let "#<lambda 0xa0876229114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info] 4 [not cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632faaf35826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 3 [vector setq if progn cond let cond let cond let "#<lambda 0xa0876e6c914e800>" funcall let progn if cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632faac82826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 7 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let progn progn if] 4 [progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa08762d3114e800>" funcall let progn if cond] 4 [let* progn org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 4 [let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn progn if let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632fad553026>" funcall let progn if cond] 15 [vector setq if progn cond let cond let cond let "#<lambda 0xa0877de4114e800>" funcall let progn if cond] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877de4114e800>" funcall let progn if] 4 [org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 13 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877d7d114e800>" funcall let progn] 4 [if cond let "#<lambda 0x16d07daca9af77ae>" mapc cond let "#<lambda 0x16d07daca9af77ae>" funcall catch let let* org-element-map save-excursion org-noter--show-note-entry let] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632faec40826>" funcall let progn] 6 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877e8e114e800>" funcall let] 3 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877d87114e800>"] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877d87114e800>" funcall] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fae3ae826>" funcall let progn if] 15 [org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 12 [let cond let cond let "#<lambda 0xa08779d1914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [plist-get if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1011632fafdef826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 3 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0xa087796f914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let] 2 [if let org-noter--parse-location-property let "#<lambda 0xa0877924914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [org-noter--parse-location-property let "#<lambda 0xa0877fbc114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877f85114e800>" funcall] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877f85114e800>" funcall let progn] 4 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa01f8826>" funcall let progn if cond] 6 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877f16114e800>" funcall let progn if] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877609914e800>" funcall] 4 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa124e826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632fa156c026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 3 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877aa2114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [org-element-property vector setq if progn cond let cond let cond let "#<lambda 0xa0876455914e800>" funcall let progn if] 4 [display-graphic-p if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 3 [org-noter--parse-location-property let "#<lambda 0xa087640d114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location] 3 [throw cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 3 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0876521114e800>"] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632fa355a826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 7 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877e0c114e800>" funcall] 4 [if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877efb914e800>" funcall let progn] 4 [mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877c38114e800>" funcall let progn if cond] 4 [cdr let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877c92114e800>" funcall] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877c92114e800>" funcall] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let*] 4 [org-back-to-heading progn condition-case if org-up-heading-or-point-min cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 5 [save-excursion org-entry-end-position cond let* progn if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f32ab3826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 6 [or if let org-noter--parse-location-property let "#<lambda 0xa08777e3914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0xa0876911114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [setq if progn cond let cond let cond let "#<lambda 0xa08769c4914e800>" funcall let progn if cond let] 4 [save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction] 12 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 8 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0877525114e800>" funcall let progn if cond] 4 [cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f35498826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08775b6114e800>" funcall let progn if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map let*] 4 [save-excursion let* progn org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1011632f352df826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 6 [if org-element-property < if let progn if cond let cond let "#<lambda 0xa0877543114e800>" funcall let progn if] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877543114e800>" funcall let progn] 4 [save-excursion org-outline-level funcall let* save-excursion if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [and cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632f3544a826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0877354114e800>"] 4 [if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f374db826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08773f3914e800>" funcall let progn] 4 [progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let let* org-element-map let let] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08773c0914e800>" funcall let progn] 4 [progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0xa0877b5e914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let let*] 3 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1011632f3a3ca826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08778f5114e800>" funcall let] 4 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 8 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632f3a4e8026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 6 [let "#<lambda 0xa08778af114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08778af114e800>" funcall let progn if cond] 8 [progn if let org-noter--parse-location-property let "#<lambda 0x1011632f3aed9826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond] 6 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa0877698114e800>" funcall] 3 [mapconcat pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 4 [eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 2 [cdr let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 4 [cond org-element-contents mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08715c7114e800>" funcall] 5 [pdf-view-image-size pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871290114e800>"] 6 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa0871290114e800>" funcall] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f3e7a4026>" funcall let progn if] 3 [cond let cond let "#<lambda 0xa087112f914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let] 4 [if org-element-property < if let progn if cond let cond let "#<lambda 0xa087112f914e800>" funcall let progn if] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0xa087112f914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [let cond let "#<lambda 0xa087112f914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 4 [org-noter--doc-file-property let "#<lambda 0xa087112f914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 4 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f3fd1c826>" funcall let] 3 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f3fd1c826>" funcall let progn if] 6 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 2 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let] 3 [- 1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08713eb914e800>" funcall let progn] 6 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 3 [eq cond let progn if cond let cond let "#<lambda 0xa08710f6914e800>" funcall let progn if cond let] 4 [org-element-type let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let let*] 7 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0xa08770e1914e800>" funcall let progn] 2 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f58a76826>" funcall let progn if cond let] 11 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa087702a114e800>" funcall let progn if cond] 3 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f5b381026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 3 [if let org--property-global-or-keyword-value let cond let while catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 4 [goto-char condition-case org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let org--property-local-values let while catch let save-restriction save-excursion] 6 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 2 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632f59303826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 7 [let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f3f168826>" funcall let progn] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa08772c9114e800>"] 1 ["#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>" funcall catch let let* org-element-map let] 6 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871fc5914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>"] 6 [progn cond org-noter--compare-locations and if cond let "#<lambda 0x1011632921f4d826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [list setq progn cond let cond let cond let "#<lambda 0xa0871fa3914e800>" funcall let progn if cond let] 4 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let] 1 [pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 3 [if org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101163292e48d026>" funcall] 6 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0xa087180b914e800>" funcall] 4 [let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>"] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* org-element-map] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101163292e851826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 2 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08719a8114e800>" funcall let progn if] 4 [catch let* org-element-map or let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect save-current-buffer] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0871902114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [or let org-noter--doc-file-property let "#<lambda 0x1011632924d62826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa08713aa914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 2 [funcall catch let let* org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn] 2 ["#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond let "#<lambda 0x16d07d42135661ae>" funcall catch let let* org-element-map let] 4 [progn if cond let cond let "#<lambda 0xa08716ff914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 3 [cond org-element-contents not cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632923ade026>" funcall let] 2 [let cond let "#<lambda 0xa0871a4d914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>"] 3 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0xa0871a4d914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [and if cond let "#<lambda 0x1011632920269826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let] 7 [progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632920cae826>" funcall let progn if cond let] 3 [not cond org-get-limited-outline-regexp let* progn org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0xa0870764114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 3 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f32a6b826>"] 2 [let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [cconv-make-interpreted-closure function let* while save-excursion let* progn if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [org-noter--parse-location-property let "#<lambda 0x1011632f33487026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0870502914e800>" funcall let progn if] 4 [plist-get if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1011632f31229026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [let "#<lambda 0xa08706ab914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 4 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa08706ab914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>"] 4 [if org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x1011632f306c2026>" funcall let] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871b88114e800>" funcall let progn if cond] 4 [numberp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x1011632f31f17026>" funcall let progn if cond] 2 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1011632f31f17026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>"] 4 [if let "#<lambda 0xa0871b99114e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc] 2 [cond let save-excursion org-element--current-element setq if while let let* save-restriction save-excursion catch org-element--parse-to cond let save-restriction] 4 ["#<compiled 0x7f3155b503565a0>" mapcar pdf-util-scale "#<compiled 0xade0723d9cb227e>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c36e623>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 3 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871e77114e800>" funcall let progn if] 7 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 2 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x10116329297e7826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond] 6 [let* progn save-excursion if org-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter] 2 [org-noter--parse-location-property let "#<lambda 0x1011632928c1d826>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 4 [let "#<lambda 0xa0871dd9914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond let "#<lambda 0x16d07d42135661ae>" mapc cond] 5 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871dd9914e800>" funcall let progn if cond let "#<lambda 0x16d07d42135661ae>" mapc cond cond] 4 [org-noter--parse-location-property let "#<lambda 0x101163292b760026>" funcall let progn if cond let "#<lambda -0xf93b0b33ca99e52>" mapc cond cond let "#<lambda -0xf93b0b33ca99e52>" mapc] 2 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871d09114e800>" funcall let progn if cond] 3 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0xa0871d09114e800>"] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 2 [let* progn if org-cycle-hide-drawers save-excursion org-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let* progn if] 4 [tq-process-buffer tq-filter "#<compiled -0x70574e173f227bb>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 3 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x129d1b9985c326ae>" funcall let progn if cond let] 6 [Automatic\ GC] 1295)) (25844 5037 397181 488000) nil]
