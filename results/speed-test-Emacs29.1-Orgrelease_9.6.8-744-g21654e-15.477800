
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 108 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 620 [kill-this-buffer-enabled-p redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 7 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2426 [let cond let cond let "#<lambda 0x925883ec626f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc] 3 [save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn] 4 [cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if let progn if org-noter--get-view-info let progn progn if] 13 [and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 92 [or progn if let org-noter--parse-location-property let "#<lambda 0x101f15431f3901be>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>"] 2 [let cond let* and let* org-element-end or let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if] 4 [org-element-type let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 80 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion] 8 [prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let] 7 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 33 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 9 [let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if] 4 [or let* progn if org-element-map let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect] 4 [progn org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x925885a1626f770>" funcall prog1 catch] 2 [org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0x92588532626f770>" funcall prog1 catch let progn if cond let] 4 [let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region] 8 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 27 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258850b626f770>" funcall prog1 catch] 2 [if save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 28 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c36fc63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 5 [save-current-buffer org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if] 12 [cond let "#<lambda 0x925885c0e26f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let] 7 [org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 60 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 39 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 77 [let cond let "#<lambda 0x9258a419626f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond] 6 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 2 [catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading] 4 [symbolp cond org-element-type let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc] 6 [let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>" funcall] 8 [or set-buffer save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if] 4 [and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold apply outline-back-to-heading outline-flag-subtree outline-hide-subtree if save-excursion if progn progn] 4 [save-restriction save-excursion org-outline-level funcall let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 8 [cons vector setq if progn cond let cond let cond let "#<lambda 0x9258bf77e26f770>" funcall prog1 catch let] 6 [cond let cond let "#<lambda 0x9258b885e26f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond] 4 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c375ea3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 21 [not cond org-get-limited-outline-regexp concat re-search-forward if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x9258be8e626f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc] 7 [org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children] 4 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f1545303889be>" funcall prog1 catch let progn if cond] 2 [save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 20 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading if org-back-to-heading-or-point-min] 4 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 4 [cond org-element-type let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>" funcall catch let] 6 [mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>" funcall catch] 4 [org-element-parent if let org-element-lineage let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 8 [derived-mode-p if org-noter--doc-file-property let "#<lambda 0x101f154551f0c1be>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond] 2 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 13 [and let* vector setq if progn cond let cond let cond let "#<lambda 0x9258bb84626f770>" funcall prog1 catch] 7 [let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 60 [org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children] 4 [org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f154502b451be>" funcall prog1] 3 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree] 98 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form] 8 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258b401e26f770>" funcall] 6 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 36 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37ec63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 3 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 24 [let* and let* org-element-end <= and while let cond let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case] 4 [let* progn if cond let cond let cond let "#<lambda 0x9258b992626f770>" funcall prog1 catch let progn if] 7 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c373463>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 2 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 42 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 13 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 51 [save-restriction save-excursion org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 48 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f1545565819be>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>"] 3 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn] 16 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 10 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading if] 8 [or progn if let org-noter--parse-location-property let "#<lambda 0x9258df12e26f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>"] 3 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 9 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading let* save-excursion if] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 10 [cond let* and let* and if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion] 4 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 903 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258dca7626f770>" funcall prog1 catch] 4 [let org-element-lineage let if let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 6 [let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>" funcall catch let let* progn] 4 [symbolp cond org-element-contents mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let] 4 [prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258ddc5626f770>" funcall prog1 catch] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading let* save-excursion] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258ded0e26f770>" funcall prog1] 4 [cond org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x9258bc89626f770>" funcall prog1] 4 [cond org-element-type eq if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion] 4 [pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c3799e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 6 [cons vector setq if progn cond let cond let cond let "#<lambda 0x9258bcea626f770>" funcall prog1 catch let] 4 [pdf-info-query pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c378ca3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 3 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x9258a6c3626f770>" funcall prog1 catch let progn if cond] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function] 7 [org-element-contents mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>" funcall] 2 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 2 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if] 8 ["#<compiled 0xdc608c8846cc528>" mapcar pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x73f3b8d4a2468e3>" tq-process-buffer tq-filter "#<compiled -0x711a8d606d46c7b>" accept-process-output pdf-info-query pdf-info-getselection pdf-info-textregions pdf-cache-textregions pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c378123>" mapcar] 3 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if] 4 [if let* org-cite-activate font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x1568f6f8029ce343>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let] 4 [font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ed67c35ad6043>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if] 8 [apply timer-event-handler accept-process-output pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 6 [numberp if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x9258a7e7e26f770>" funcall prog1 catch let] 4 [save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101f154559d811be>" funcall prog1 catch let] 2 [if let cond let* and let* vector setq if progn cond let cond let cond let] 4 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion] 8 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let] 4 [org-noter--parse-location-property let "#<lambda 0x9258a0efe26f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 10 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion] 4 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101f15450f2771be>" funcall prog1] 2 [cond org-element-type let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond] 2 [and let* < if let progn if cond let cond let "#<lambda 0x9258a253e26f770>" funcall prog1 catch let] 4 [org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 3 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x9258a1d8e26f770>" funcall prog1 catch let progn if cond let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 15 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 8 [not cond org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f15450f6d19be>" funcall] 3 [eq cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x9258ae02626f770>" funcall prog1] 4 [org-outline-level funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 12 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c5493e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 6 [cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>" funcall catch let let*] 4 [if let* save-current-buffer org-element--cache-find and let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction] 4 [let cond let* and let* org-element-begin = and if let* save-current-buffer org-element--cache-find progn if if setq] 4 [if let* if let* let let org-element--property org-element-parent if let org-element-lineage let* org-up-heading-safe while save-excursion progn] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f15450951a1be>" funcall prog1 catch let] 4 [cond let cond let "#<lambda 0x9258a370e26f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond] 4 ["#<compiled -0x711a8d606d46c7b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 5 [cond org-element-type let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x92589b56e26f770>"] 4 [car eq if let cond let* and and let* let let org-element--property org-element-parent if let org-element-lineage] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x73f3bacda2468e3>" tq-process-buffer tq-filter "#<compiled -0x711a8d606d46c7b>" accept-process-output pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 12 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn if] 4 [pdf-info--normalize-file-or-buffer pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer] 2 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x92589a63626f770>" funcall prog1] 4 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let*] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x92589d5d626f770>" funcall prog1 catch] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv] 10 [pdf-info-query pdf-info-pagesize pdf-cache-pagesize pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 6 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x9258a3a0626f770>" funcall prog1 catch let] 4 ["#<compiled -0x17ea0193eea85ad7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x73f3761aa2468e3>" tq-process-buffer tq-filter "#<compiled -0x711a8d606d46c7b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 20 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x925899c7e26f770>" funcall prog1 catch] 4 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn if] 4 ["#<compiled -0x1a3f6178c55a1f0d>" pdf-util-pdf-window-p pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 3 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map let progn] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 14 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn] 3 [if let* if let* vector setq if progn cond let cond let cond let "#<lambda 0x925899b5e26f770>" funcall] 4 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading] 4 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn] 4 [cond let cond let "#<lambda 0x925899eae26f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond] 4 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 20 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x9258997e626f770>" funcall prog1 catch let progn if cond] 4 [if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 12 [cond let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x9258aa3f626f770>" funcall] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let progn] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x9258a9d8626f770>" funcall] 4 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 40 [let* and let* let* < if let progn if cond let cond let "#<lambda 0x9258aa53626f770>" funcall prog1] 4 [mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c543163>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn] 7 [cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>" funcall catch let let* progn if org-element-ast-map let*] 4 [and if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let] 3 [progn progn org-element--cache-root let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if] 4 [cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let] 6 [macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0x9258a851626f770>" funcall prog1 catch let progn if cond let] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258aabae26f770>"] 4 [symbolp cond org-element-type let* and let* vector setq if progn cond let cond let cond let] 4 [while catch org-activate-links--text-properties if org-activate-links font-lock-fontify-keywords-region font-lock-default-fontify-region font-lock-fontify-region "#<compiled -0x156ed339d5e6c043>" jit-lock--run-functions jit-lock-fontify-now jit-lock-function redisplay_internal\ \(C\ function\) redisplay progn unwind-protect] 4 [if let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks] 4 [progn progn if let org-noter--get-notes-window let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let] 3 [let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x9258ba08626f770>" funcall prog1 catch let] 4 [pdf-view-desired-image-size pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let] 2 [or progn if let org-noter--parse-location-property let "#<lambda 0x9258982a626f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>"] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 10 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258b683626f770>" funcall prog1 catch] 4 [let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point] 4 [catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>"] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 6 [org-element-type let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>" funcall catch let let*] 4 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 12 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101f15450096a9be>" funcall prog1 catch let progn if cond] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258b421626f770>" funcall] 4 [list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading] 4 [let "#<lambda 0x9258b48b626f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>"] 4 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children] 12 [let "#<lambda 0x101f1543000569be>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>"] 2 [let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x9258b575626f770>" funcall prog1 catch let] 4 [macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 8 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function] 4 [let* if let* < if let progn if cond let cond let "#<lambda 0x9259ebf8626f770>" funcall prog1 catch] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101f15454e7da9be>" funcall prog1 catch let progn if cond let] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259e999626f770>"] 4 [gethash or let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f15454ee591be>" funcall] 5 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading let*] 4 [if let* if let* vector setq if progn cond let cond let cond let "#<lambda 0x9259e9b4626f770>" funcall] 4 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-lineage-map if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* progn if] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259e92d626f770>"] 4 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x9259e966626f770>" funcall] 4 [and if save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion] 4 [let cond let "#<lambda 0x9259e871e26f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond] 4 [if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 12 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f15454fa7b1be>" funcall prog1 catch] 6 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while save-excursion progn] 8 ["#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>" funcall catch let let* progn if] 2 [eq if let cond let* and let* let* < if let progn if cond let cond] 4 [let* org-element-begin <= and if if let* org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259fa3b626f770>" funcall prog1 catch] 4 [progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--get-notes-window if let progn progn if let] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let] 4 [cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>" funcall catch let] 3 [setq if progn cond let cond let cond let "#<lambda 0x9259e80e626f770>" funcall prog1 catch let progn if] 4 [save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if] 16 [let* if let* let* < if let progn if cond let cond let "#<lambda 0x9259f7e9e26f770>" funcall prog1] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq] 4 [org-element-type let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x9259f728626f770>" funcall prog1 catch] 4 [tq-process-buffer tq-filter "#<compiled -0x711a8d606d46c7b>" accept-process-output pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c5441e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if] 7 [derived-mode-p if org-noter--doc-file-property let "#<lambda 0x9259f4a9626f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond] 4 [or progn progn if let org-noter--get-doc-window let progn progn if let org-noter--doc-goto-location if let progn progn] 2 [cond org-element-contents mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>"] 4 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children cond let*] 4 [org-noter--parse-root org-element-contents let progn progn if let org-noter-sync-next-page-or-chapter let while let dotimes let while let dotimes] 2 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x9259f6bde26f770>" funcall] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259f642e26f770>"] 4 [derived-mode-p if org-noter--doc-file-property let "#<lambda 0x9259f69d626f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259f6d6626f770>"] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [progn org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x9259f417626f770>" funcall prog1 catch] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259f9e0626f770>"] 4 [or progn progn if let org-noter--get-doc-window if let org-noter--doc-approx-location let progn progn if let org-noter-sync-next-page-or-chapter let] 2 [or if let org-noter--parse-location-property let "#<lambda 0x9259f5c1626f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc] 4 [progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259f412626f770>" funcall] 4 [or and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if save-excursion] 4 [mapconcat pdf-info-query pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c55df23>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 5 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259f5f5e26f770>" funcall prog1] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [cond let "#<lambda 0x9259f79c626f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let] 4 [progn cond let cond let cond let "#<lambda 0x9259f7cbe26f770>" funcall prog1 catch let progn if cond let] 4 [org-fold-core-get-folding-spec-from-alias if let org-fold-core-get-folding-spec if org-fold-folded-p not or and save-excursion org-at-heading-p or progn if outline-back-to-heading@fix-for-org-fold apply] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259f7be626f770>" funcall prog1 catch] 4 [org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if save-excursion] 8 [if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond] 3 [pdf-info--normalize-file-or-buffer pdf-info-pagelinks pdf-cache-pagelinks pdf-links-hotspots-function "#<compiled 0x1aafeaa33c5539a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259fb79e26f770>" funcall] 4 [progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if] 4 [and if cond let "#<lambda 0x101f15455c0a99be>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259fb9a626f770>" funcall prog1 catch] 4 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f1545459771be>" funcall prog1 catch let progn if cond let] 2 [funcall setq while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 8 [progn if org-element-ast-map let* progn if org-element-map let progn progn if let progn if org-noter--get-view-info let] 6 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259fb9a626f770>" funcall] 4 [let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x9259fb79e26f770>" funcall prog1] 4 [cons vector setq if progn cond let cond let cond let "#<lambda 0x9259fb79e26f770>" funcall prog1 catch let] 4 [let progn if cond let "#<lambda -0x9dcf809483cc8f>" mapc cond cond let "#<lambda -0x9dcf809483cc8f>" mapc cond let "#<lambda -0x9dcf809483cc8f>" funcall] 2 [and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f1545479b3616>" funcall prog1 catch let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259f7be626f770>" funcall prog1] 4 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101f15454b2ece16>" funcall prog1 catch] 2 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x9259f7cbe26f770>" funcall prog1 catch let] 4 [symbolp cond org-element-type let "#<lambda -0x9dcf809483cc8f>" mapc cond cond let "#<lambda -0x9dcf809483cc8f>" mapc cond cond let "#<lambda -0x9dcf809483cc8f>" mapc] 7 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259f79c626f770>" funcall prog1 catch] 4 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259f5f5e26f770>"] 4 ["#<lambda 0x9259f5f5e26f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc] 4 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f1545491e5616>" funcall prog1 catch let progn if cond] 5 [car if let cond let* and let* < if let progn if cond let cond let] 4 [let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259f5c1626f770>" funcall prog1 catch] 4 [save-current-buffer progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage] 4 [mapc cond cond let "#<lambda -0x9dcf809483cc8f>" mapc cond let "#<lambda -0x9dcf809483cc8f>" funcall catch let let* progn if org-element-ast-map] 2 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259f9e0626f770>" funcall] 4 [org-get-limited-outline-regexp concat re-search-forward if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [symbolp cond org-element-type let "#<lambda -0x9dcf809483cc8f>" mapc cond cond let "#<lambda -0x9dcf809483cc8f>" mapc cond let "#<lambda -0x9dcf809483cc8f>" funcall catch] 2 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259f417626f770>" funcall prog1] 4 [org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let let*] 2 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f154549d91616>" funcall prog1 catch let] 4 [cond cond let "#<lambda -0x9dcf809483cc8f>" mapc cond cond let "#<lambda -0x9dcf809483cc8f>" mapc cond let "#<lambda -0x9dcf809483cc8f>" funcall catch let] 2 ["#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>" funcall] 4 [if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children] 8 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure] 7 [org-element-type let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x9259f642e26f770>" funcall] 4 [let* and let* let* < if let progn if cond let cond let "#<lambda 0x9259f6bde26f770>" funcall prog1] 4 [let "#<lambda 0x9259f6bde26f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>"] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259f623626f770>" funcall prog1] 4 [progn if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 4 ["#<lambda 0x101f15454b948e16>" funcall prog1 catch let progn if cond let "#<lambda -0x9dcf809483cc8f>" mapc cond cond let "#<lambda -0x9dcf809483cc8f>" mapc] 2 [org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x9259f4a9626f770>" funcall prog1 catch let] 4 [memq and progn or progn aref progn progn org-element--cache-root let* save-current-buffer org-element--cache-find progn if if setq] 4 [cond let "#<lambda -0x9dcf809483cc8f>" mapc cond cond let "#<lambda -0x9dcf809483cc8f>" mapc cond let "#<lambda -0x9dcf809483cc8f>" funcall catch let let*] 4 [if org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0x9259f728626f770>" funcall prog1 catch let progn if cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259f7e9e26f770>" funcall prog1] 6 [not cond org-element-type let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>" funcall catch] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259f6ef626f770>" funcall prog1] 4 [cond let* and let* org-element-begin let* while if let* save-current-buffer org-element--cache-find progn if if setq let] 4 [let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f15454d00ce16>" funcall prog1 catch let progn if cond] 8 [cond org-element-type let* and let* let* < if let progn if cond let cond let "#<lambda 0x9259e80e626f770>"] 3 [eq or and save-current-buffer org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point] 4 [let "#<lambda 0x101f15454d75c616>" funcall prog1 catch let progn if cond let "#<lambda -0x9dcf809483cc8f>" mapc cond cond let "#<lambda -0x9dcf809483cc8f>"] 3 [if let org-noter--parse-location-property let "#<lambda 0x9259d825626f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond] 4 [cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x9259d825626f770>" funcall prog1 catch] 4 [if let* vector setq if progn cond let cond let cond let "#<lambda 0x9259d84c626f770>" funcall prog1 catch] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101f15454c61d616>" funcall prog1 catch let] 9 [if let* if let* vector setq if progn cond let cond let cond let "#<lambda 0x9259e884e26f770>" funcall] 4 [org-back-to-heading if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility] 4 [or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f15454cf50616>" funcall prog1 catch let progn] 3 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259e82ee26f770>" funcall] 4 [or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f15454f907e16>" funcall prog1 catch let progn] 6 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259e871e26f770>" funcall prog1] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259e966626f770>" funcall prog1 catch] 4 [save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [cond let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x9259e92d626f770>" funcall] 3 [org-knuth-hash mod if let* save-current-buffer org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259e9b4626f770>"] 6 [setq progn progn if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 8 [cond org-element-type let "#<lambda -0x9dcf809483cc8f>" mapc cond cond let "#<lambda -0x9dcf809483cc8f>" mapc cond cond let "#<lambda -0x9dcf809483cc8f>" mapc cond] 2 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x9259e999626f770>" funcall prog1 catch] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all] 6 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x9259ebf8626f770>" funcall] 4 [let "#<lambda -0x9dcf809483cc8f>" mapc cond cond let "#<lambda -0x9dcf809483cc8f>" mapc cond cond let "#<lambda -0x9dcf809483cc8f>" mapc cond let "#<lambda -0x9dcf809483cc8f>"] 3 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x9258b440e26f770>" funcall] 4 [or and save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f154300141616>" funcall prog1 catch let progn if cond let "#<lambda -0x9dcf809483cc8f>"] 2 [and if let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x9258b575626f770>" funcall prog1 catch let progn if] 4 [let* if let* < if let progn if cond let cond let "#<lambda 0x9258b575626f770>" funcall prog1 catch] 4 [save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x9258b48b626f770>" funcall prog1 catch let progn if cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258b421626f770>" funcall prog1] 6 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101f1545008d8616>" funcall prog1 catch let progn if cond] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258b700626f770>" funcall] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 6 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258b761e26f770>" funcall prog1 catch] 4 [let* let* < if let progn if cond let cond let "#<lambda 0x9258b676626f770>" funcall prog1 catch let] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f154503fd4e16>" funcall prog1 catch] 8 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258b6a3e26f770>"] 4 [if let* if let* org-element-begin let* while if let* save-current-buffer org-element--cache-find progn if if setq let] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101f1545029d6e16>" funcall prog1 catch let progn if cond let] 2 [progn cond let cond let cond let "#<lambda 0x9258b683626f770>" funcall prog1 catch let progn if cond let] 4 [let "#<lambda 0x9258982a626f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>"] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter] 3 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x9258ba08626f770>" funcall] 4 [if let org-noter--parse-location-property let "#<lambda 0x101f15450273b616>" funcall prog1 catch let progn if cond let "#<lambda -0x9dcf809483cc8f>" mapc cond] 3 [cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x9258b64f626f770>" funcall prog1 catch let progn if] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [org-element--cache-find progn if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258aabae26f770>" funcall] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258a851626f770>" funcall prog1] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0x9258a851626f770>" funcall prog1 catch let progn if cond let] 4 [and if cond let "#<lambda 0x101f154508c04e16>" funcall prog1 catch let progn if cond let "#<lambda -0x9dcf809483cc8f>" mapc cond] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x92589bcd626f770>" funcall] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 6 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 2 [cond let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x9258aa53626f770>" funcall] 4 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 8 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258aa3f626f770>" funcall prog1 catch] 4 [not cond org-get-limited-outline-regexp let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 8 [cond let cond let "#<lambda 0x9258997e626f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond] 4 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 8 [if let cond let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion] 4 [if cl-intersection or let* progn if org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while] 2 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 4 [macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let] 4 [setq progn if if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 4 [macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 [progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect save-current-buffer let if] 4 [cond org-element-type let* and let* < if let progn if cond let cond let "#<lambda 0x925899c7e26f770>" funcall] 4 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if if org-show-set-visibility] 13 [cconv-fv cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map or let* progn] 4 [org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 4 [org-element--property or if let org-noter--parse-location-property let "#<lambda 0x92589a08e26f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>"] 4 [or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter-sync-prev-page-or-chapter let while let dotimes let] 2 [or if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>" funcall catch] 4 [if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f1545082a2616>" funcall prog1 catch let progn] 7 [cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while] 3 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x92589b3fe26f770>" funcall prog1] 4 [org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f15450a543616>" funcall prog1 catch let] 2 [if org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0x92589ba9e26f770>" funcall prog1 catch let progn if cond] 10 [org-element-type let* and let* < if let progn if cond let cond let "#<lambda 0x9258a370e26f770>" funcall prog1] 8 [setq if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while] 4 [cconv-make-interpreted-closure function setq let let* progn if org-element-ast-map let* progn if org-element-map save-excursion org-noter--show-note-entry let while] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258ae02626f770>"] 10 [or if let org-noter--parse-location-property let "#<lambda 0x101f15450fa5fe16>" funcall prog1 catch let progn if cond let "#<lambda -0x9dcf809483cc8f>" mapc] 6 [progn cond let cond let cond let "#<lambda 0x9258a36ee26f770>" funcall prog1 catch let progn if cond let] 4 [let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x9258a36ee26f770>" funcall prog1] 4 [save-current-buffer org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if] 12 [unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if let] 4 [- 1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer] 13 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258a1d8e26f770>" funcall] 6 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x9258a1d8e26f770>" funcall] 4 [mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>" funcall catch let let* progn if org-element-ast-map] 5 [let org-noter--parse-location-property let "#<lambda 0x101f15450f3a3e16>" funcall prog1 catch let progn if cond let "#<lambda -0x9dcf809483cc8f>" mapc cond cond] 2 [let cond let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x9258a172e26f770>"] 4 [cond save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 4 [let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x9258a0efe26f770>" funcall prog1] 6 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 5 [and not and or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility] 4 [progn cond let cond let cond let "#<lambda 0x9258a634e26f770>" funcall prog1 catch let progn if cond let] 4 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion let*] 4 [let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x9258a7e7e26f770>" funcall prog1 catch let] 5 [let* if let* setq cond save-excursion let let org-fold-core-get-folding-spec if org-fold-folded-p not or and save-excursion org-at-heading-p] 6 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while] 4 [vector setq if progn cond let cond let cond let "#<lambda 0x9258a4b6626f770>" funcall prog1 catch let progn] 3 [save-excursion save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point] 4 [progn frame-live-p and if progn if org-noter--valid-session cond let* org-noter--parse-root org-element-contents if let progn progn if] 5 [if let* if let* org-element-contents-end let cond let while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258bcea626f770>" funcall prog1] 3 [save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 4 [let "#<lambda -0x9dcf809483cc8f>" mapc cond cond let "#<lambda -0x9dcf809483cc8f>" mapc cond let "#<lambda -0x9dcf809483cc8f>" funcall catch let let* progn] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258bc89626f770>"] 3 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree save-excursion] 4 [setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x9258ddc5626f770>" funcall prog1 catch let] 6 [and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 8 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x101f15455eb63e16>" funcall] 11 [if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if] 8 [org-noter--compare-locations and if cond let "#<lambda 0x101f15455d8a2616>" funcall prog1 catch let progn if cond let "#<lambda -0x9dcf809483cc8f>" mapc] 2 [if org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let] 4 [progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x9258dca7626f770>" funcall prog1 catch let progn if cond] 4 [progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>" funcall catch] 4 [memq if not and while let org-element-lineage let if let org-before-first-heading-p if save-excursion if progn progn] 4 [let "#<lambda 0x9258a133e26f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>"] 2 [let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let] 4 [or if while catch let org-element-lineage-map if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [if save-excursion org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [function setq let let* progn if org-element-ast-map let* progn if org-element-map let let progn progn if] 3 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x9258df54626f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>"] 5 [pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 6 [or let cond let* if let* let let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x9258df1a626f770>" funcall] 3 [or let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 4 [save-current-buffer not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage setq if org-end-of-subtree] 4 [let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>" mapc cond let "#<lambda -0x1d397012e483cc8f>"] 6 [if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x9258b992626f770>" funcall] 3 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101f1545013b6e16>" funcall prog1 catch let progn] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258b841626f770>" funcall] 3 [not cond org-get-limited-outline-regexp let* progn save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 3 [org-element--cache-active-p and if let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion] 4 [cond org-element-type let "#<lambda -0x9dcf809483cc8f>" mapc cond cond let "#<lambda -0x9dcf809483cc8f>" mapc cond let "#<lambda -0x9dcf809483cc8f>" funcall catch let] 6 [and not and or org-back-to-heading if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258bb1d626f770>" funcall prog1] 4 [let "#<lambda 0x9258bb1d626f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let "#<lambda -0x1d397012e483cc8f>"] 4 [save-current-buffer catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe] 4 [let* and let* vector setq if progn cond let cond let cond let "#<lambda 0x9258bb84626f770>" funcall prog1] 3 [org-element-contents-begin let cond let while let let* save-restriction save-excursion save-current-buffer catch org-element--parse-to condition-case if setq let] 4 [pdf-view-sorted-hotspot-functions pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 2 [org-noter--parse-location-property let "#<lambda 0x9258b94a626f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let] 4 [not if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading if] 4 [run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 5 [save-current-buffer org-element--cache-active-p if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map if or org-back-to-heading if org-back-to-heading-or-point-min] 4 [insert-file-contents-literally pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x73f3761aa2468e3>" tq-process-buffer tq-filter "#<compiled -0x711a8d606d46c7b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 2 [catch org-element--parse-to condition-case if setq let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage let* org-up-heading-safe while] 4 [org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [and or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f154552edc616>" funcall prog1 catch let] 6 [cond let "#<lambda 0x9258bda5626f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond cond let] 3 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 4 [unwind-protect save-current-buffer let progn if org-noter--set-notes-scroll redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if] 3 [cconv-make-interpreted-closure function org-element-map let let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while] 3 [org-element--cache-active-p and if if setq let save-restriction save-excursion save-excursion let if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min] 4 [if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f154553286e16>" funcall prog1 catch let] 6 [cond let cond let "#<lambda 0x9258bc4de26f770>" funcall prog1 catch let progn if cond let "#<lambda -0x1d397012e483cc8f>" mapc cond] 3 [org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101f154554f3de16>" funcall prog1] 2 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x9258a419626f770>"] 7 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 3 ["#<lambda 0x101f154318303e16>" funcall prog1 catch let progn if cond let "#<lambda -0x9dcf809483cc8f>" mapc cond cond let "#<lambda -0x9dcf809483cc8f>" mapc] 2 [save-current-buffer progn if org-element--cache-sync if if progn if let save-restriction save-excursion save-excursion let if org-element-at-point org-element-lineage-map] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [cdr member if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if] 4 [setq progn if org-element-lineage let if let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if] 4 [org-element-type let* and and let* let let org-element--property org-element-parent if let org-element-lineage let* org-up-heading-safe while save-excursion] 4 [numberp and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x925883ec626f770>" funcall prog1 catch let progn] 8 [let org-element--property or if let org-noter--parse-location-property let "#<lambda 0x1295672a2c87cebe>" funcall prog1 catch let progn if cond let] 2 [Automatic\ GC] 1120)) (25847 63985 849452 655000) nil]
