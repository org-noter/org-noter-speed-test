
[profiler-profile "28.1" cpu #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8125 data ([if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 48 [progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 105 [user-error or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 838 [null save-excursion let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 129 [cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let*] 4 [or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 95 [and if save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 326 [null save-excursion let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 84 [org-fold-region if save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 4 [let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if] 640 [redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 2576 [and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 11 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244e2245d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [progn unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 73 [cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction] 95 [progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 20 [or set-buffer save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction] 12 [not or cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 468 [progn frame-live-p and if progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e27f950fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 6 [and save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 8 [redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn] 28 [if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch] 57 [and save-excursion org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 73 [while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 96 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x101bd3a463540f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 2 [let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 114 [org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 44 [if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 3 [and cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch] 4 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree] 140 [if eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let] 15 [org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let] 26 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 13 [and not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 56 [or if let org-noter--parse-location-property let "#<lambda 0x1244e20d4d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 7 [org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 8 [save-current-buffer org-element--cache-active-p if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond] 4 [org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e2387d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 6 [unwind-protect let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 46 [save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 76 [save-current-buffer org-element--cache-active-p and if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 8 [and save-excursion org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 34 [let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 17 [and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 12 [org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 31 [and if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 22 [pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 3 [save-excursion org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 24 [set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 14 [cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 38 [if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 4 [let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 54 [not if progn if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let] 4 [org-get-valid-level let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [if org-noter--get-location-top > cond let org-noter--note-after-tipping-point and setq cond let cond let "#<lambda 0x1244e209fd0fc9ac>" funcall let progn] 4 [save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let] 8 [let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let] 2 ["#<lambda 0x1244e259d50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e259d50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion] 20 [let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 40 [save-current-buffer org-element--cache-active-p and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 8 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x101bd3a45a463f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 3 [cond org-element-contents not cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>"] 4 [save-current-buffer org-element--cache-active-p and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 8 [setq if while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 8 [pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c3779a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 14 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e3c7b50fc9ac>" funcall] 4 [let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 56 [if if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 61 [let save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 84 [if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 4 [let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion] 35 [org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 13 [progn if let org-noter--parse-location-property let "#<lambda 0x1244e3cb0d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [progn or progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--mode-line-text eval redisplay_internal\ \(C\ function\) redisplay progn] 4 [mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch] 6 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e3cfbd0fc9ac>" funcall let progn if cond] 4 [cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [org-fold-region if save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [or set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion] 6 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e42e6d0fc9ac>" funcall let] 4 [or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 26 [if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 8 [set-buffer save-current-buffer org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn] 4 [and if cond let "#<lambda 0x101bd3a45f847f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 2 [save-excursion let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 92 [let let* if org-fold-core--property-symbol-get-create put-text-property if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if] 4 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4e4fd0fc9ac>" funcall let progn if cond let] 4 [setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 4 [progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 120 [org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 66 [while let let catch let* org-element-map let let progn progn if let org-noter-sync-next-page-or-chapter let while let] 2 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244e400d50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if] 24 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e4e6dd0fc9ac>" funcall let] 4 [org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 23 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e4088d0fc9ac>" funcall] 4 [let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 47 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while] 8 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244e43f150fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 21 [if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 8 [not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 19 [> and if let org-noter--parse-location-property let "#<lambda 0x1244e437c50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry progn if] 4 [and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 14 [not cond org-element-type eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 8 [cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let* org-element-map let progn progn] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility] 4 [if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 18 [let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 63 [and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 8 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility] 4 [run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 4 [progn or progn frame-live-p and if progn if org-noter--valid-session if let progn if org-noter--get-view-info let progn] 4 [if save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 8 [eq cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244e7a4f50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [org-element--cache-active-p if let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 8 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map let progn progn if] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e434a50fc9ac>" funcall] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a4564ba72e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 7 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7d79d0fc9ac>" funcall let progn if] 4 [let "#<lambda 0x101bd3a457f5472e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 2 [derived-mode-p not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 21 [save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 22 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7dbfd0fc9ac>" funcall] 4 [save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn] 8 [pdf-info--normalize-file-or-buffer pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c37c3e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location] 4 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7abdd0fc9ac>" funcall] 4 [if let org-noter--parse-location-property let "#<lambda 0x1244e7abdd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [plist-get if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244e7abdd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn if] 12 [not cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch] 4 [progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e7978d0fc9ac>" funcall let progn if cond] 4 [or set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 12 [progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a4671fbf2e>" funcall let progn if cond let] 4 [if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let] 4 [outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if] 84 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4abed0fc9ac>" funcall let] 4 [eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 9 [org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get] 12 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let] 8 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a460736f2e>" funcall let progn if] 7 [let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 12 [cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let] 4 ["#<lambda 0x1244e7b7850fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [save-excursion let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 111 [not and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 4 [window-edges image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if] 28 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a461c6b72e>" funcall let progn if cond let] 6 [let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let] 26 [if org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let] 4 [save-excursion org-at-heading-p and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 41 [while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 18 [org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 4 [or cdr let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 77 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e787cd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e78efd0fc9ac>" funcall] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 16 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e72c2d0fc9ac>" funcall] 4 [catch or org--property-get-separator let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or] 23 [org-at-heading-p not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 20 [save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn] 8 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e48ced0fc9ac>" funcall] 4 [mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let* org-element-map let let] 4 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [or progn if let org-noter--parse-location-property let "#<lambda 0x1244e4a6b50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 8 [memq not and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if] 4 [re-search-backward or while save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 61 [org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a4418d672e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 12 [save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 53 [save-current-buffer org-element--cache-active-p if let org-element-at-point org-element-lineage let if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond] 4 [cond org-element-type let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [pdf-cache-get-image pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let] 17 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7cf750fc9ac>" funcall let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e7cf750fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 18 [let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let* org-element-map] 4 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244e7c0250fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [setq org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let* progn if] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while] 4 [while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 35 [or set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion] 14 [cond let "#<lambda 0x1244e7f2c50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 14 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7fb7d0fc9ac>" funcall let progn] 4 [org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 40 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244e7fb7d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a4454e0f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 2 [cond let "#<lambda -0x691676165835e70>" funcall catch let let* org-element-map let progn progn if let progn if org-noter--get-view-info] 3 [and or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch] 20 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7ffe50fc9ac>" funcall] 4 [or let org-noter--doc-file-property let "#<lambda 0x1244e7edad0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 2 [pdf-view-display-image pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 619 [save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 16 [save-restriction save-excursion org-outline-level funcall max format setq if while let* save-excursion if org-fold-show-children progn if while] 4 [run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if] 4 [plist-get if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244e723a50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [and if org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 8 [progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 12 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea7d950fc9ac>" funcall] 4 [save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point org-element-lineage let if or org-back-to-heading] 4 [derived-mode-p not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if] 12 [and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 34 [and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea49450fc9ac>" funcall let progn if] 4 [org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 53 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244ea78350fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 ["#<lambda 0x1244ea78350fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [not cond org-element-type let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 8 [macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms] 4 [if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 10 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244eaa62d0fc9ac>" funcall] 4 [macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eaac8d0fc9ac>"] 4 [eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 22 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [if if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 8 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq] 4 [or let org-noter--doc-file-property let "#<lambda 0x101bd3a440a7a72e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea631d0fc9ac>" funcall let progn if cond] 4 [if org-element-property < if let progn if cond let cond let "#<lambda 0x1244ea631d0fc9ac>" funcall let progn if] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea631d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let] 4 [setq let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 20 [or or set-buffer save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 4 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry] 4 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244eab2550fc9ac>" funcall] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 12 [org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let] 20 [symbolp cond org-element-type let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eab0850fc9ac>" funcall let progn] 4 [= and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a44ab4872e>" funcall let progn] 7 [< if let progn if cond let cond let "#<lambda 0x1244ea88bd0fc9ac>" funcall let progn if cond let] 4 [or progn org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244ea88bd0fc9ac>" funcall let] 4 [org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch let save-restriction] 40 [cconv--analyze-function cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv] 4 [pdf-info-query--escape mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c542de3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn] 3 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb539d0fc9ac>" funcall let progn if cond] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb539d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [progn condition-case if if let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion] 33 [cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244eb192d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 8 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244eb7fdd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>"] 4 [or if unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 8 [while progn if let* save-excursion progn if org-cycle-show-empty-lines progn progn unwind-protect save-current-buffer let if let progn] 24 [if org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a44a11872e>" funcall let progn if cond] 23 [or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if let catch let] 11 [let* progn if progn if progn cond let cond let "#<lambda 0x1244eb123d0fc9ac>" funcall let progn if cond] 4 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn] 8 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101bd3a446491f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 2 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb7c4d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 ["#<compiled -0x17ea0194bab0c6d7>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1e4a3198b997a963>" tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 15 [or or set-buffer save-current-buffer org-element--cache-active-p and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 8 [org-noter--doc-file-property let "#<lambda 0x1244eb63850fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [org-element--cache-active-p and if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn] 4 [cond org-element-contents mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>"] 4 [macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect] 4 [if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch] 8 [plist-get if org-element-property < if let progn if cond let cond let "#<lambda 0x1244e4c06d0fc9ac>" funcall let progn] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e4c06d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn if let] 8 [cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 ["#<compiled -0x1c8cc98aa18dd6df>" pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1e4a3198b997a963>" tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay] 4 [progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4f69d0fc9ac>" funcall let] 4 [setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e4fafd0fc9ac>" funcall let progn if] 4 [or if let org-noter--parse-location-property let "#<lambda 0x1244e4fafd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [save-excursion org-fold-heading while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [org-noter--doc-file-property let "#<lambda 0x101bd3a452c4972e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let] 42 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e420050fc9ac>" funcall let progn] 4 [if outline-flag-region@fix-for-org-fold apply outline-flag-region outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let] 4 [if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 8 [not cond org-element-contents mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let] 8 [save-current-buffer not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion] 8 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a452b31f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 6 [or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4d1150fc9ac>" funcall] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4d1150fc9ac>" funcall let progn] 4 [save-current-buffer org-element--cache-active-p if or org-back-to-heading let* progn save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility] 4 [and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 17 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 2 [keymap-canonicalize redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 6 [or set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244e4c6ad0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4cc0d0fc9ac>" funcall let progn if] 4 [if org-element-property let* save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x1244e4daa50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 4 [org-noter--parse-location-property let "#<lambda 0x1244e4daa50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 8 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a5cc8aa72e>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 3 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4bd9d0fc9ac>" funcall let progn] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e4bd9d0fc9ac>" funcall] 4 [let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5cc708f2e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 3 [org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4ba650fc9ac>" funcall let progn] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4ba650fc9ac>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea95dd0fc9ac>" funcall let progn if cond] 4 [< if let progn if cond let cond let "#<lambda 0x1244ea95dd0fc9ac>" funcall let progn if cond let] 4 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5d4db872e>" funcall let progn if] 2 [save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5d4db872e>" funcall let progn] 4 [if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property] 8 [if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 38 [save-excursion org-at-comment-p and while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 29 [or cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 4 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 8 [let cond let "#<lambda 0x1244ea9e150fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [not and or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion] 12 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea96c50fc9ac>" funcall let progn] 8 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function] 4 [cond org-element-type eq if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let] 8 [org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [or org--property-get-separator let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244ea89ad0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region] 4 [or or set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let*] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea87bd0fc9ac>" funcall let] 4 [intern org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a0d497572e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 3 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e6866d0fc9ac>" funcall let progn if] 4 [- 1- if save-restriction save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer] 8 [setq org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e681950fc9ac>" funcall let progn if cond] 4 [cdr let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 8 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e6b09d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e6b5cd0fc9ac>" funcall] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses] 4 [save-current-buffer org-element--cache-active-p and or let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 4 [save-current-buffer progn if org-element--cache-sync if if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading if] 8 [org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 26 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e6a8d50fc9ac>" funcall] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a0cde7072e>" funcall let progn if cond] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a0cde7072e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [plist-get if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0x1244e6a13d0fc9ac>" funcall let] 4 [progn if cond let cond let "#<lambda 0x1244e6a13d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [cond let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244e6a13d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn] 4 [org-noter--doc-file-property let "#<lambda 0x101bd3a0cd06572e>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 7 [pdf-view-sorted-hotspot-functions pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 1 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e66aed0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e66aed0fc9ac>"] 4 [or let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let*] 8 [let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall] 4 [save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [pdf-history-push pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 8 [let org--property-local-values let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 3 [while let let* save-restriction save-excursion save-current-buffer progn unwind-protect let catch org-element--parse-to condition-case if setq let org-element-at-point] 4 [< if let progn if cond let cond let "#<lambda 0x1244e6667d0fc9ac>" funcall let progn if cond let] 4 [org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 32 [org-noter--doc-file-property let "#<lambda 0x1244eb46550fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [not cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 12 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x1244eb46550fc9ac>" funcall let progn if cond let] 4 [org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb4b5d0fc9ac>" funcall] 4 [featurep and if save-excursion let if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond] 4 [progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn progn] 4 [and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a5ce403f2e>" funcall let] 7 [cond org-element-type eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 13 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb4cf50fc9ac>" funcall let progn] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb4cf50fc9ac>" funcall] 4 ["#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch let let* org-element-map let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb54bd0fc9ac>" funcall let progn if cond] 4 [or if let org-noter--parse-location-property let "#<lambda 0x1244eb54bd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244eac6950fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 4 [if save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5d55cc72e>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 2 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ead3fd0fc9ac>" funcall] 4 [let cond let "#<lambda 0x1244ead3fd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [/ max min let* org-noter--conv-page-percentage-scroll - image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 4 [if let progn if cond let cond let "#<lambda 0x1244eac5050fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 11 [< if let progn if cond let cond let "#<lambda 0x1244eac5050fc9ac>" funcall let progn if cond let] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eac5050fc9ac>" funcall let] 4 [progn cond let cond let cond let "#<lambda 0x1244eac5050fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ead3fd0fc9ac>" funcall let progn if cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ead3fd0fc9ac>" funcall let] 4 [make-org-noter--view-info let progn progn if let progn if org-noter--get-view-info let progn progn if let org-noter--doc-location-change-handler run-hooks] 4 [if save-current-buffer if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a5d4e88586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 4 ["#<lambda 0x101bd3a5cc33ad86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let] 4 ["#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch let let* org-element-map let] 4 [and cond let cond let cond let "#<lambda 0x1244eb54bd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb54bd0fc9ac>" funcall] 8 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a5cffa1586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [let progn if cond let cond let "#<lambda 0x1244eb4b5d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [if prog1 let let* if org-fold-core--property-symbol-get-create list remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let] 4 [and if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e6667d0fc9ac>" funcall let] 4 [setq if progn cond let cond let cond let "#<lambda 0x1244e6a34d0fc9ac>" funcall let progn if cond let] 4 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e6a34d0fc9ac>" funcall let progn if cond] 4 [and if cond let "#<lambda 0x101bd3a5c936ad86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 6 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a5c936ad86>" funcall let progn if] 34 [cond org-element-contents mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>"] 4 [setq if progn cond let cond let cond let "#<lambda 0x1244e66f1d0fc9ac>" funcall let progn if cond let] 4 [cond let "#<lambda 0x1244e66f1d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [image-next-line image-scroll-up let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn if let] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a0cd0efd86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244e66aed0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [pdf-history-before-change-page-hook run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn progn] 20 [mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a0cdd30d86>" funcall let progn if cond] 46 [mapcar pdf-util-scale "#<compiled -0x6a7084438d47f81>" mapcar pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c5450e3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e6a13d0fc9ac>" funcall let] 4 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0x1244e6a13d0fc9ac>" funcall let progn] 4 [and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 4 [cconv-make-interpreted-closure function setq let let* org-element-map save-excursion org-noter--show-note-entry let while let cond let* progn progn unwind-protect] 4 [if let "#<lambda 0x1244e6a08d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244e6a08d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [vector setq if progn cond let cond let cond let "#<lambda 0x1244e6a08d0fc9ac>" funcall let progn if cond] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 4 [not if progn if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 4 [and cond let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e6a8d50fc9ac>" funcall let progn if cond let] 4 [cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let] 4 [org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading let* save-excursion if org-fold-show-children progn if while save-excursion progn if] 4 [or progn org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a0d513d586>" funcall let progn if cond] 3 [org-element-map or let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect save-current-buffer let if] 4 [progn buffer-live-p and if progn if org-noter--valid-session if let org-noter--get-notes-window if let progn progn if let] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a0d4ac0d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e6866d0fc9ac>" funcall let] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion] 4 [setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a5d544dd86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 4 [or set-buffer save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let] 12 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea830d0fc9ac>" funcall] 4 [save-current-buffer not if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a5d517ed86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea865d0fc9ac>" funcall let progn] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea865d0fc9ac>" funcall] 4 [progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch] 6 [org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 4 [org-fold-core-get-folding-spec-from-alias let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion progn] 8 [set-buffer save-current-buffer org-element--cache-active-p and if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 12 [macroexp-macroexpand macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [org-noter--parse-location-property let "#<lambda 0x101bd3a5d4e5a586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc] 3 [let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244ea9e150fc9ac>"] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244ea9e150fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [org-noter--get-doc-window if let org-noter--doc-approx-location let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while] 2 [setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while] 8 ["#<lambda 0x1244eaf83d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let progn progn if let] 4 [cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values] 7 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244eaf98d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 3 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101bd3a5cc036d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea95dd0fc9ac>" funcall let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea95dd0fc9ac>" funcall let progn] 4 [while if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion] 4 [cond org-element-contents let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while let dotimes] 3 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244e4b8cd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 3 [or and if let while let catch or setq cond let* progn progn unwind-protect save-current-buffer let] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if] 4 [run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a5cea07d86>" funcall let progn if cond] 13 [org-element-property vector setq if progn cond let cond let cond let "#<lambda 0x1244e4daa50fc9ac>" funcall let progn if] 4 [org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e4cc0d0fc9ac>" funcall] 4 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4cc0d0fc9ac>" funcall let] 4 [macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all] 8 [if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 6 [if if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if let] 4 [and if if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 8 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4b54d0fc9ac>"] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4d91d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 [if let org-noter--parse-location-property let "#<lambda 0x1244e4d1150fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree] 4 [let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch let let* org-element-map] 4 [mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch let let* org-element-map let let] 7 [pdf-view-text-regions-hotspots-function "#<compiled 0x1aafeaa33c5462a3>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect] 4 [progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a453569586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [if org-element-property vector setq if progn cond let cond let cond let "#<lambda 0x1244e428750fc9ac>" funcall let progn] 4 [if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a4530ced86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e420050fc9ac>" funcall] 4 [or let org-noter--doc-file-property let "#<lambda 0x1244e420050fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a45263b586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 3 [let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a45263b586>" funcall] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4202d0fc9ac>" funcall let progn if cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e4202d0fc9ac>"] 4 [let cond let "#<lambda 0x1244e4202d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>"] 4 [and if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let*] 4 [and if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 8 [let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>"] 4 [function setq let let* org-element-map let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a446e49d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 4 [while cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if let catch let] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4f69d0fc9ac>"] 4 [mode-line-default-help-echo redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn] 4 [not and cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall] 4 [not if progn if let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn if] 4 [if org-noter--get-location-page < or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a453278d86>" funcall let] 10 [member-ignore-case cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a453278d86>" funcall let progn if] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb6bf50fc9ac>" funcall let progn] 4 [progn if org-fold-core-get-folding-spec-from-alias org-fold-core-folding-spec-p if org-fold-core--check-spec progn if let org-fold-region if save-excursion org-fold-heading while let* save-excursion] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x101bd3a446125d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [while if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min if] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a44b413586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 6 [setcar let* progn if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x101bd3a446ea0586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [and not and or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility] 4 [let progn progn if let org-noter-sync-prev-page-or-chapter let while let dotimes let while let dotimes let measure-time] 3 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a446017d86>" funcall] 15 [cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb123d0fc9ac>" funcall let] 4 [save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while if] 8 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb138d0fc9ac>" funcall let progn] 4 [org-before-first-heading-p if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eb7fdd0fc9ac>" funcall let progn] 8 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function setq let] 4 [funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>"] 4 [if let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eb539d0fc9ac>"] 4 [not if if if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map] 2 [cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch let let*] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea88bd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [macroexpand-all cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244eab0850fc9ac>" funcall] 4 [not cond format let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eab2550fc9ac>"] 4 [cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch let] 4 [cond org-get-limited-outline-regexp let* progn if let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 8 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244eaa8b50fc9ac>" funcall let progn if cond] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion] 4 [let org-noter--parse-location-property let "#<lambda 0x101bd3a44f7fa586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>"] 4 [org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn progn] 12 [save-current-buffer not if progn if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if] 4 [and if cond let "#<lambda 0x101bd3a440f8f586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 6 [not if progn if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion] 4 [and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 4 ["#<lambda 0x1244eaac8d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [save-excursion org-at-heading-p and or org-back-to-heading save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if while save-excursion] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244ea40fd0fc9ac>"] 6 [setq org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let while if] 12 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea78350fc9ac>" funcall let progn if] 4 [org-element-property and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point and let org-up-heading-safe while] 4 [progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if let progn progn if let] 10 [> or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a44eeaad86>" funcall let progn if] 4 [not and cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall] 4 [org-noter--get-location-page > or cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244ea7d950fc9ac>"] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244ea7d950fc9ac>" funcall let progn if cond] 4 [let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree save-excursion let*] 4 [and save-excursion org-at-heading-p and or org-back-to-heading if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if while save-excursion progn if] 4 [and if cond let "#<lambda 0x101bd3a444879586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 6 ["#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall] 4 [function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7edad0fc9ac>" funcall let progn] 5 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7edad0fc9ac>" funcall] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a4459fb586>" funcall let progn if cond let] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7ffe50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 5 [let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e7ffe50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [setq progn cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e7ffe50fc9ac>" funcall let progn if] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7ffe50fc9ac>"] 4 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block let if let org--property-local-values let] 18 [or if let org-noter--parse-location-property let "#<lambda 0x1244e7fb7d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [and if let org-element-at-point let org-before-first-heading-p if save-excursion if progn progn unwind-protect save-current-buffer let if let] 4 [let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let] 9 [function setq let let* org-element-map or let* progn if org-noter--get-properties-end if let cond let* progn progn] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7fa150fc9ac>" funcall let progn if cond] 4 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7fa150fc9ac>" funcall let] 4 [save-excursion progn unwind-protect let* let org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond] 4 [org-not-nil if let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7c0250fc9ac>" funcall let progn if] 4 [and and let* org-noter-pdf--convert-to-location-cons run-hook-with-args-until-success or setq progn cond org-noter--compare-locations and cond let cond let cond] 4 [not cond org-get-limited-outline-regexp concat re-search-forward if save-excursion org-fold-region save-excursion org-fold-show-entry if org-show-set-visibility save-excursion org-noter--show-note-entry let while] 4 [if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e7c7050fc9ac>" funcall let progn if cond] 4 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7c7050fc9ac>"] 4 [= and if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point and let org-up-heading-safe while] 4 [or let org-noter--doc-file-property let "#<lambda 0x101bd3a5c0e4b586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 6 [cconv-analyze-form cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e7c72d0fc9ac>"] 7 [or if let org-noter--parse-location-property let "#<lambda 0x1244e7c72d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [cond let "#<lambda 0x1244e7c72d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [function cons vector setq if progn cond let cond let "#<lambda 0x1244e48d5d0fc9ac>" funcall let progn if cond] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e48d5d0fc9ac>" funcall let progn if] 4 [org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let*] 4 [let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a451057586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 7 [let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>"] 4 [let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4a6b50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [org-element-type eq if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let if] 8 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e49d1d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [org-element-lineage let if let org-before-first-heading-p if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p cond let save-restriction save-excursion org-get-property-block] 4 [cond org-noter--compare-location-cons if cond org-noter--compare-locations and cond let cond let cond let "#<lambda 0x1244e48ced0fc9ac>" funcall let progn] 4 [org-element--cache-active-p and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children cond let* progn if if org-show-set-visibility save-excursion] 4 [or let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect save-current-buffer let if let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244e7273d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [if org-noter--get-location-page let cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244e78efd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e787cd0fc9ac>"] 4 [and if cond let "#<lambda 0x101bd3a44cc22d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244e7d9a50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 5 [save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e7d9a50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [plist-get if org-element-property let* while if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let] 4 [catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a4616ffd86>"] 4 [set-buffer save-current-buffer org-element--cache-active-p if let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block let] 4 [or setq progn cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a461f26586>" funcall let progn if cond let] 2 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min save-excursion org-fold-show-entry progn if] 4 [cond let cond let* progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region] 12 [save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4ad7d0fc9ac>" funcall let progn if cond let] 4 [or set-buffer save-current-buffer org-element--cache-active-p and or let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion] 4 [if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a46733ad86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 4 [progn if let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point or let and if org-end-of-subtree] 4 [set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction] 4 [< if let progn if cond let cond let "#<lambda 0x1244e79d050fc9ac>" funcall let progn if cond let] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a457f68586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 4 [org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a457f68586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond] 4 [tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 2 [save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let* save-excursion if org-fold-show-children progn if] 4 [if org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244e7d79d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a456d82d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc] 2 [save-excursion org-outline-level outline-end-of-subtree outline-flag-subtree outline-hide-subtree if save-excursion if progn progn unwind-protect save-current-buffer let if let progn] 4 [org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion progn] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a45da60d86>" funcall let progn if] 4 [save-current-buffer org-element--cache-active-p and let org-up-heading-safe or cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance] 3 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a45d9ce586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 4 [eq cond let cond let "#<lambda 0x1244e43e7d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [not if progn if let org-element-at-point org-element-lineage let if or org-back-to-heading let* progn save-excursion if org-fold-show-children] 4 [org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let save-restriction save-excursion org-get-property-block] 5 [not cond org-element-type let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall catch] 4 [set-buffer save-current-buffer org-element--cache-active-p if or org-back-to-heading progn condition-case if if let org-up-heading-safe or cond let while] 4 [if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [eq if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e43f150fc9ac>" funcall] 6 [cond let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>"] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a452144586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 4 [let org-noter--doc-location-change-handler run-hooks pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let let progn] 4 [or set-buffer save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-back-to-heading-or-point-min cond let] 8 ["#<lambda 0x1244e4e6dd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let] 4 [and if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while let*] 4 ["#<compiled -0xacbb0bc9b011650>" filtered-frame-list frames-on-display-list "#<subr F616e6f6e796d6f75732d6c616d626461_anonymous_lambda_2>" internal--before-save-selected-window pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success progn unwind-protect save-current-buffer let] 4 [cconv-fv cconv-make-interpreted-closure function cons vector setq if progn cond let cond let cond let "#<lambda 0x1244e400d50fc9ac>" funcall] 2 [save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e400d50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc] 4 [save-current-buffer org-element--cache-active-p if let org-element-at-point or let and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn] 4 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244e4e4fd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [< or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a45f8cd586>" funcall let progn if] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e4f4350fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [org-noter--get-location-page = and or cond org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a45f26ad86>" funcall let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e4e89d0fc9ac>" funcall let progn if] 4 [org-element--cache-active-p and if if setq let org-element-at-point and let org-up-heading-safe while save-excursion progn if org-show-set-visibility save-excursion] 4 [let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall] 4 [pdf-util-munch-file pdf-info-query--transform-response pdf-info-query--parse-response "#<compiled 0x1e4a3198b997a963>" tq-process-buffer tq-filter "#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page] 3 [or let org-noter--doc-file-property let "#<lambda 0x1244e42e6d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let] 4 [save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children cond let* progn if] 4 [let cond org-noter--relative-position-to-view let cond let "#<lambda 0x1244e3cfbd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e3cfbd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [progn if org-fold-core-get-folding-spec-from-alias let org-fold-region save-excursion org-fold-show-entry progn if while save-excursion progn if org-show-set-visibility save-excursion org-noter--show-note-entry] 4 [or and cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e3cb0d0fc9ac>" funcall let progn] 4 [and if cond let "#<lambda 0x101bd3a45cc23d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let] 4 [cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e3c7b50fc9ac>" funcall let progn if cond] 4 [org-noter--parse-location-property let "#<lambda 0x1244e3c7b50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc] 4 [org-element-property or if let org-noter--parse-location-property let "#<lambda 0x1244e3c7b50fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [remove-text-properties progn if if if save-restriction save-excursion progn unwind-protect let* let org-fold-region if save-excursion org-fold-heading while] 4 [intern org-element-property or let org-noter--doc-file-property let "#<lambda 0x101bd3a45b48b586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 2 ["#<lambda 0x101bd3a45bad0586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let] 4 [org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e209fd0fc9ac>" funcall let progn if] 4 [or progn if let org-noter--parse-location-property let "#<lambda 0x1244e209fd0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [org-element--cache-active-p and if org-end-of-subtree save-excursion let* save-excursion if org-fold-show-children progn if while save-excursion progn if org-show-set-visibility] 4 [plist-get if org-element-property or if let org-noter--parse-location-property let "#<lambda 0x101bd3a45469d586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 6 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x101bd3a454e92d86>" funcall let] 4 [vector setq if progn cond let cond let cond let "#<lambda 0x1244e2059d0fc9ac>" funcall let progn if cond] 5 [car let or progn if let org-noter--parse-location-property let "#<lambda 0x1244e2059d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>"] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all] 1 [not cond org-get-limited-outline-regexp let* progn if if org-show-set-visibility save-excursion org-noter--show-note-entry let while let cond let* progn] 4 [pdf-view-image-size pdf-misc-size-indication eval redisplay_internal\ \(C\ function\) redisplay progn unwind-protect save-current-buffer let let progn progn if let org-noter--doc-goto-location if] 4 [macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all] 2 [cond let or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a4629d1d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 3 [org-noter--compare-location-cons if cond org-noter--compare-locations and if cond let "#<lambda 0x101bd3a4629d1d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>"] 4 [save-current-buffer org-element--cache-active-p and if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children progn if while save-excursion] 4 ["#<compiled -0x7cc9b24cadc673b>" accept-process-output pdf-info-query apply pdf-info-renderpage pdf-cache-renderpage pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if org-noter-pdf--goto-location run-hook-with-args-until-success] 3 [+ setcdr let* let* save-current-buffer org-element--cache-find progn if if setq let org-element-at-point let org-before-first-heading-p if org-fold-show-children] 4 [and if cond let "#<lambda 0x101bd3a4636a8d86>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>"] 3 [symbolp cond org-element-type let "#<lambda -0x7ffc31465835e70>" mapc cond cond let "#<lambda -0x7ffc31465835e70>" mapc cond let "#<lambda -0x7ffc31465835e70>" funcall catch] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--all-clauses macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms] 1 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e213650fc9ac>" funcall let] 4 [macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexp--all-forms macroexp--expand-all macroexpand-all cconv-make-interpreted-closure function org-element-map let let progn] 2 [mapconcat pdf-info-query pdf-info-getannots pdf-annot-getannots pdf-annot-hotspot-function "#<compiled 0x1aafeaa33c368b63>" mapcar pdf-view-apply-hotspot-functions pdf-view-create-page pdf-view-display-page pdf-view-redisplay pdf-view-goto-page if let progn if] 1 [or progn if let org-noter--parse-location-property let "#<lambda 0x101bd3a463a6a586>" funcall let progn if cond let "#<lambda -0x7ffc31465835e70>" mapc cond] 4 [let "#<lambda 0x1244e27f950fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond] 4 [cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv-analyze-form cconv--analyze-function cconv-analyze-form cconv-fv cconv-make-interpreted-closure function setq let let* org-element-map let* progn] 4 [if let org--property-global-or-keyword-value let cond let while if let catch let save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction] 4 ["#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond cond let "#<lambda -0x691676165835e70>" mapc cond let "#<lambda -0x691676165835e70>" funcall] 6 [save-restriction save-excursion org-entry-get-with-inheritance cond save-restriction save-excursion save-excursion let org-entry-get or let org-noter--doc-file-property let "#<lambda 0x1244e2245d0fc9ac>" funcall let] 8 [org-element-property or let org-noter--doc-file-property let "#<lambda 0x1244e2245d0fc9ac>" funcall let progn if cond let "#<lambda -0x691676165835e70>" mapc cond cond] 4 [let* org-element-map or let* progn if org-noter--get-properties-end if let cond let* progn progn unwind-protect save-current-buffer let] 4 [progn progn unwind-protect save-current-buffer let if let progn progn if let org-noter--focus-notes-region if let progn progn] 4 [Automatic\ GC] 1489)) (25844 6334 665255 958000) nil]
